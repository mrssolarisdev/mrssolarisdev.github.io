
===========================================================================================================================
SELETORES

		seletor * { conteudo } permite a manipulação de TUDO ao mesmo tempo, útil para
		zerar formatações padrão, ele manipula todos os padrões inseridos nele
		ao mesmo tempo
		exemplo: * { 
			margin: 0px; 
			padding: 0px;
			} 
		(zera todas as margens e paddings
		de todos os elementos do site)


Entrar em uma classe dentro de outra, util para marcar a pagina na qual voce está, neste exemplo, na id home seleciono a
 classe .homeque contém um a (link) e personalizo o que acontece dentro dele, neste caso, coloco a id no body em home 
 ponho body id="home" na pagina de sobre, ponho sobre, como ele nao vai achar a id home no body, 
 vai pular e não marcará o link de home
		#home .home a,
		#sobre .sobre a, #contato .contato a{
			background-position: right bottom;
			background-color: #f99200;
			color: white;
		}


Seletor :not(parametro)
Aplica estilos ao elemento selecionado MENOS ao que voce passou como parametro para o seletor not.
Ex:

li:not(:first-of-type) {
  margin-left: 10px;
}
Pode encadear:

p:not(:first-of-type, .special) {
	margin-left: 10px;
}
https://res.cloudinary.com/samanthaming/image/upload/f_auto,q_auto/v1579935822/tidbits/46-css-not-selector.jpg


Seletor vazio :empty
Aplica estilos a elementos que não tenham filhos. Filhos podem ser considerados quaisquer nós ou até mesmo texto,
comentarios e caracteres vazios.

ex:

.alert {
  background: pink;
  padding: 10px;
}
.alert:empty {
  display: none;
}

Uma solução para esse caso tambem poderia ser:

.alert:not(:empty) {
    background: pink;
    padding: 10px;
}

https://res.cloudinary.com/samanthaming/image/upload/f_auto,q_auto/v1579935846/tidbits/72-css-empty-selector.jpg



https://www.samanthaming.com/tidbits/72-css-empty-selector/

Alguns tipos de seletores:

:last-child
:last-of-type
:nth-child
:nth-of-type
:only-child
:only-of-type

==========================================================================================================================

O HTML = HYPERTEXT MARKUP LANGUAGE 

MARCA O QUE É CADA PARTE DO TEXTO, INDICA AO INTERPRETADOR O QUE É O QUE
O QUE É O VIDEO, UMA DIV ETC.


LISTAS

<ol> Ordened List- - Lista ordenada- numeros
<ul> Unordened List - Lista nao ordenada
<li> List item - Item da lista
 ul type : circle, disc, square
 ol type : 1, A, a, I e i(algarismos romanos)
=======================================================================================================================
TABELAS
 <table> tabela TODAS DEVEM COMEÇAR ASSIM

 <tr> table row - linha da tabela
 <td> table data  - itens da tabela
 <th> table header - cabeçalho da tabela
 <td colspan="2" - column spansion - expansão da coluna nesse caso
 uma coluna ocupa o espaço de 2
 <td rowspan="2" - row spansion - expansão da linha, nesse
 caso uma linha ocupa o espaço de duas
 <thead> Header da tabela, geralmente engloba uma <tr> que tem elementos <th> dentro, serve pra agrupar os elementos do
 cabeçalho da tabela.
 <tbody> Corpo da tabela, engloba tudo que forem dados que não fazem parte do header da tabela, agrupa trs que tem tds.
 Mais do que isso, ele tem uma barra de scroll, que só aparece nele(no thead nao). É bom pra impressão, pois, se eu fosse
 imprimir uma tabela, o header da tabela apareceria em cada folha, se não tivesse esse atributo, desse modo aparece só 
 na primeira.
 <tfoot> O footer da tabela, do mesmo modo que a theader, só aparece uma vez em impressões.

 atributo scope:
	<th scope="col">Month</th>
NESSE EXEMPLO, DIZ QUE ESSA TH É UM TABLE HEADER DE UMA COLUNA, PODERIA SER ROW, E ENTÃO SERIA O HEADER DE UMA LINHA.
    
Comentar html <!-- conteudo -->
Comentar css /* conteudo */
======================================================================================================================
MEDIDAS E BACKGROUND

PIXEL - px
PORCENTAGEM - %
RELATIVO - em - TAMANHO RELATIVO AO TAMANHO DO CONTEINER PAI
exemplo:


<div class="conteiner-pai">
<p class="bolo"</p>
</div> /* P terá o tamanho que a class conteiner pai terá*/

REPETIÇÃO DO BACKGROUND
background-repeat:  repeat, no-repeat, repeat-x, repeat-y

FIXAÇÃO DO BACKGROUND
background-attachement : fixed(nao rola com a pagina), scroll(rola com a pagina), local(rola com o conteudo do elemento), 
initial, inherit

POSIÇÃO DO BACKGROUND(TAMBEM DA P USAR % ASSIM: x% y%)
background-position: 5%(X) 6%(Y);
OU PIXEL:
background-position: 50px 50px;
background-position: center bottom (recebe dois valores
	ao mesmo tempo) valores: center, top, bottom, left, right
	background: (pode se usar varios parametros ao msm tempo)
	exemplo : background: pink url('url') repeat-x fixed (no caso a imagem
		fica encima da cor de fundo) center center
	comando background na ordem :
	 cor imagem repeat attachement position


TAMANHO DO BACKGROUND
(AUTO É O TAMANHO PADRÃO, LENGTH ASSUME O TAMANHO DA IMAGEM, COVER DEIXA A IMAGEM DO TAMANHO DO CONTEINER QUE A CONTEM, CONTAIN
	ASSUME O TAMANHO O BASTANTE PRA QUE A IMAGEM FIQUE TOTALMENTE VISIVEL, O TAMANHO NECESSARIO. INITIAL DEFINE O VALOR PADRÃO
	INHERIT ASSUME O TAMANHO DO ELEMENTO PAI MAIS PROXIMO)
É BOM USAR EM CONJUNTO COM BACKGROUND POSITION(CENTER, TOP, BOTTOM, LEFT, RIGHT[DE PREFERENCIA CENTER, PRA CENTRALIZAR])
background-size: auto|length|cover|contain|initial|inherit;

AJUSTE DO BACKGROUND NA CAIXA
background-clip: border-box|padding-box|content-box|initial|inherit;

DEFINIÇÃO DE ONDE O BACKGROUND VAI COMEÇAR 
background-origin: padding-box|border-box|content-box|initial|inherit;
(padding-box: começará da primeira ponta esquerda do topo a partir da area do padding)(border-box: começará desde a ponta
	esquerda superior a partir da borda)(content-box começará da ponta esquerda superior a partir do começo do conteudo da caixa)

EFEITO APLICADO NO BACKGROUND
background-blend-mode: normal|multiply|screen|overlay|darken|lighten|color-dodge|saturation|color|luminosity;

BACKGROUND LINEAR (GRADIENTE)
background: linear-gradient(to bottom, cor, cor);

BACKGROUND: radial-gradient(cor, cor,cor) (RADIAL NÃO LEVA VALOR DE POSICIONAMENTO)

VALORES DE POSICIONAMENTO E REPETIÇÃO DE BACKGROUND:
NO-REPEAT
REPEAT-Y
REPEAT-X

CENTER
TOP
BOTTOM
LEFT
RIGHT
OU PODE USAR A MEDIDA deg. NO LUGAR DO POSICIONAMENTO: background: linear-gradient(VALORdeg,cor, cor, cor);





PODE-SE COMBINAR ATÉ 2 VALORES DE POSIÇÃO FORA O DE REPETIÇÃO

RGB/RGBA

RGB DEFINE A COR, RGBA DEFINE A COR E A TRANSPARENCIA

background: rgba(255, 255, 255,0.5);
background: rgb(255, 255, 255);
============================================================================================================================
[INPUTS]
INPUTS TIPOS: color, date, search, range, email, url, number(campo que seria campo giratório em java(spinner), text, password,
 button, submit, radio, checkbox,

-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
FORM
<form> Formulário (INPUTS DEVEM ESTAR DENTRO DE UM FORMULARIO, POIS O BOTÃO DE ENVIAR PARA UM BANCO DE DADOS, PEGA OS DADOS
	DAS INPUTS QUE ESTÃO JUNTO COM ELE DENTRO DESTE FORM, E ENVIA TODOS ESTES DADOS DO FORM NO QUAL ELE ESTÁ)

INPUT PARA TEXTO
<input type="text" name="Alguma coisa aqui">

INPUT PARA SENHA
<input type="password" name"Nome exibido no browser">

INPUT PARA EMAIL
<input type="email" name="nome" placeholder="Insira seu email.." required="">

INPUT PARA NUMERO(SPINNER)
<input type="number" name="qtd" id="qtd">
[o number tem parametros especificos:
	min="numero"
	max="numero"
ASSIM A SETA SO DEIXA VOCE IR ATÉ O NUMERO DETERMINADO, SE PASSAR DO ESPECIFICADO A CERTA TRAVA, SE DIGITAR ALGO MAIOR OU
MENOR E TENTAR ENVIAR, O BOTÃO NÃO DEIXA
	tambem o:
	step="numero"

	DEFINE DE QUANTO EM QUANTO A QUANTIDADE NA CAIXA CONTARÁ
]
INPUT PARA URL
<input type="url" name="url" id="url" placeholder="ex: http://www..."
[ESSA INPUT SÓ ACEITA URL COM HTTP:// ENTÃO É UTIL DEIXAR ISSO CLARO NO PLACEHOLDER]

INPUT PARA PESQUISA
<input type="search" id="search">

INPUT PARA CONTROLE DESLIZANTE
<input type="range" id="range">
[PARA ELE TAMBEM SE APLICA O MAXIMO E MINIMO:
	max="numero"
	min="numero"
E UM VALOR NO QUAL ELE JÁ VEM CONFIGURADO:
	value="numero"

	NAO PEGA EM NAVEGADORES DEFASADOS
]

SE PEDIR PRA RESGATAR O VALUE, ELE RETORNA O VALOR ONDE A BARRA DE SELEÇÃO DO RANGE ESTÁ
TESTE:

<!DOCTYPE html>
<html>
<body>

<input type="range" id="ta" min="0" max="5" step="1">
<script type="text/javascript">
	let d = document.getElementById('ta');

	d.addEventListener('change',
    ()=>{
    	console.warn(d.value);
	}
    );


</script>
</body>
</html>


para estilizar:

input[type=range] {
  -webkit-appearance: none; /* remove estilo padrão do browser */
}

/* estiliza o marcador móvel */

input[type=range]::-webkit-slider-thumb {
  -webkit-appearance: none; /* remove estilo padrão do browser */
  background: red;
  height: 30px;
  border-radius: 50%;
  width: 30px;
}
/* estiliza barra*/

input[type=range]::-webkit-slider-runnable-track {
  width: 100%;
  height: 30px;
  background: blue;
}


Como não tem como colocar indicadores do valor pelo html, podemos colocar um norte para o usuario, usando js.

assim:

 <input id="idade" type="range" min="18" max="120" value="18" onchange="mostrarIdade(this.value)" />
 <span id="exibeIdade">18</span>

  function mostrarIdade(novoValor) {
       document.getElementById("exibeIdade").innerHTML = novoValor;
  }


UTILIZA PREFIXOS DE COMPATIBILIDADE MOZ E MS


INPUT PARA DATA
<input type="date" id="date">
[---------NAO PEGA EM NAVEGADORES DEFASADOS----------]

INPUT PARA COR
<input type="color" id="color">
[DA PRA DEFINIR A COR NA QUAL ELE VEM AO CARREGAR A PAGINA
	value="corHex"
]

INPUT PARA BOTÃO
<input type="button" value="Nome exibido no lugar"> 

INPUT PARA ENVIAR UM ARQUIVO PARA UM SERVIDOR
<input type="Submit" value="Nome exibido no lugar"> 

BOTÕES DE RADIO
<input type="radio" name="nome exibido no browser"> value="Nome exibido no lugar"> 

BOTÕES DE CHECKBOX		 
<input type="checkbox" name="Nome exibido"> 

INPUT PARA ARQUIVO
<input type="file" id="arquivo">



PROPRIEDADE: caret-color: cor;
DEFINE A COR DA BARRINHA QUE APARECE QUANDO VOCE ESTA DIGITANDO

********************************* NOVAS INPUTS, PFV USE**********************************************************
[ 
INPUT PARA EMAIL(NÃO DEIXA O CAMPO SER PREENCHIDO SEM @ OU LETRAS DEPOIS DO ARROBA)
<input type="email" name="nome" placeholder="Insira seu email.." required="">
]
************************************** PROPRIEDADES DAS INPUTS **************************************************
[placeholder]="PLACEHOLDER É O TEXTO DENTRO DA INPUT QUE APARECE NO CAMPO"
[Value]= "Nome exibido nos botões, campos de texto e também o valor enviado depois do processamento, para o banco de dados"
[name]= referencia ao que foi inserido na caixa, aparece no browser nomeando duas inputs do tipo radio, você as agrupa,
fazendo com que só uma possa ser selecionada, no checkbox, mesmo com nomes iguais, você pode selecionar quantas quiser.
[id]= serve para ligar uma label ao input, ao clicar na label, voce vai para a input
[required]="Impede que o campo fique vazio ao enviar dados de um form" SE USA ASSIM: required="required" ou: required(sem valores)
ou required=""
[autofocus]= DIZ A CAIXA QUE DEVE APARECER SELECIONADA ASSIM QUE A PAGINA CARREGA, INDICANDO AO USUARIO POR ONDE ELE DEVE COMEÇAR


CAIXA DE SELEÇÃO(COMBOBOX)
<select name="estado"> </select> Cria uma caixa de seleção

OPÇÕES DE UMA CAIXA DE SELEÇÃO(COMBOBOX)
<option value="Bahia">BA</option> Cria opções dentro de uma caixa de seleção // Nesse caso, o nome estado irá receber o valor bahia.

AREA DE TEXTO
<textarea></textarea>
RETIRA A OPCAO DE AUMENTAR A TEXTAREA
<textarea style="resize: none"></textarea>


[fieldsets são tags que agrupam dados semelhantes]

<fieldset>
</fieldset>	

legend é a legenda do fieldset

<legend> </legend>

----------------------------------------------------------------------
LABEL É A ETIQUETA, O ROTULO DE UMA INPUT(NOME QUE VEM ANTES)
		<label></label>

		for: id que associa um input a uma label(quando voce clica na label ela te leva pro input)
		QUANDO O ID NO FOR TEM O MESMO NOME QUE O DE UMA INPUT, AO CLICAR VOCE É LEVADO PARA A INPUT

		<label for="nome">Nome</label>
		<input type="text" name="nome" id="nome">

		há como fazer isso sem precisar do id, assim : 
		<label>Nome:
			<input type="text" name="nome">
		</label>


 		TYPE É O TIPO DE INPUT NO QUAL O ESTILO VAI SER APLICADO, OS QUE NAO FOREM ESPECIFICADOS NÃO SOFREM ALTERAÇÃO

 		input[type="text"].tague{
 		}

 		PARA MAIS DE UM

 		input[type="number"], [type="submit"]{
			width: 80px;
		}
 		

		PARA EXIBIR AS LABELS ACIMA DAS FIELDS É SÓ MUDAR O DISPLAY PRA BLOCK



		PRA FAZER AQUELAS AREAS DE TEXTO QUE TEM UM ICONE DO LADO PRIMEIRO DÊ UM PADDING-LEFT PRA AFASTAR O TEXTO DENTRO
		CRIE UMA SEGUNDA CLASSE COM O ICONE E COLOQUE NA INPUT DEPOIS POSICIONE COM BACKGROUND POSITION O BACKGROUND 
		QUE TU COLOCOU ALI (OLHE A PASTA AUTENTICAÇÃO INTERFACE PARA ENTENDER DO QUE SE TRATA)

		

		QUANDO O INPUT ESTÁ SELECIONADO, PARA PERSONALIZAR OQ ACONTECE NA SELEÇÃO USE
		classedoinput :focus{

		}
==============================================================================================


				________________________[TAG AUDIO]__________________________


				<audio></audio> - DEFINE UM AUDIO, LEVA ATRIBUTOS COMO:

				controls - DEFINE QUE O AUDIO TEM CONTROLE DE VOLUME, ACELERAR ETC.
				autoplay - DEFINE QUE O AUDIO COMEÇA SOZINHO.
				loop     - DEFINE QUE O AUDIO SE REPETE QUANDO ACABA.
				preload  - DEFINE QUE O AUDIO É CARREGADO JUNTO COM A PÁGINA.
					O atributo preload é usado em elementos audio para carregar arquivos grandes.
					Ele pode assumir 3 valores:
					"none" não carrega o arquivo
					"auto" carrega o arquivo
					"metadata" carrega apenas os meta dados do arquivo


				src      - DEFINE DE ONDE O AUDIO É PEGO, MAS É MELHOR USAR A TAG SOURCE:

				<source></source> - DEFINE DE ONDE O AUDIO SERÁ PEGO, LEVA OS ATRIBUTOS:
				source="endereçoAudio.extensão"
				type="extensao/extensao" // audio/mp3

				________________________[TAG VIDEO]__________________________


				<video></video> - DEFINE UM VIDEO, LEVA ATRIBUTOS COMO:


				____________________[ATRIBUTOS VIDEO]_________________

				audioTracks	Returns an AudioTrackList object representing available audio tracks
				autoplay	Sets or returns whether the audio/video should start playing as soon as it is loaded
				buffered	Returns a TimeRanges object representing the buffered parts of the audio/video
				controller	Returns the MediaController object representing the current media controller of the audio/video
				controls	Sets or returns whether the audio/video should display controls (like play/pause etc.)
				crossOrigin	Sets or returns the CORS settings of the audio/video
				currentSrc	Returns the URL of the current audio/video
				currentTime	Sets or returns the current playback position in the audio/video (in seconds)
				defaultMuted	Sets or returns whether the audio/video should be muted by default
				defaultPlaybackRate	Sets or returns the default speed of the audio/video playback
				duration	Returns the length of the current audio/video (in seconds)
				ended	Returns whether the playback of the audio/video has ended or not
				error	Returns a MediaError object representing the error state of the audio/video
				loop	Sets or returns whether the audio/video should start over again when finished
				mediaGroup	Sets or returns the group the audio/video belongs to (used to link multiple audio/video elements)
				muted	Sets or returns whether the audio/video is muted or not
				networkState	Returns the current network state of the audio/video
				paused	Returns whether the audio/video is paused or not
				playbackRate	Sets or returns the speed of the audio/video playback
				played	Returns a TimeRanges object representing the played parts of the audio/video
				preload	Sets or returns whether the audio/video should be loaded when the page loads
				readyState	Returns the current ready state of the audio/video
				seekable	Returns a TimeRanges object representing the seekable parts of the audio/video
				seeking	Returns whether the user is currently seeking in the audio/video
				startDate	Returns a Date object representing the current time offset
				textTracks	Returns a TextTrackList object representing the available text tracks
				videoTracks	Returns a VideoTrackList object representing the available video tracks
				volume	Sets or returns the volume of the audio/video
				src      - DEFINE DE ONDE O AUDIO É PEGO, MAS É MELHOR USAR A TAG SOURCE:

				<source></source> - DEFINE DE ONDE O VIDEO SERÁ PEGO, LEVA OS ATRIBUTOS:
				source="endereçoVideo.extensão"
				type="extensao/extensao" // video/mp4

				Vários arquivos podem ser especificados utilizando o elemento <source> 
				para disponibilizar vídeo ou áudio codificados em formatos diferentes para navegadores diferentes.
				Por exemplo:

				<video controls="">
				  <source src="foo.ogg" type="video/ogg">
				  <source src="foo.mp4" type="video/mp4">
				  Seu navegador não suporta o elemento <code>video</code>.
				</video>

				Também é possível especificar os codecs que o arquivo de mídia requer; isso permite que o navegador
				faça escolhas mais inteligentes:

				<video controls="">
				  <source src="foo.ogg" type="video/ogg; codecs=dirac, speex">
				  Seu navegador não suporta o elemento <code>video</code>.
				</video>

				AS CLASSES PARA ESTILIZAR VIDEO:

				.video:hover 
				.player
				.player .progress
				.player .progress-bar
				.player .button-holder
				.player .progress-button
				.player [class^="buffered"]
				.player .play-pause
				.player .play
				.player .pause-button
				.player .play .pause-button
			    .player .pause .play-button
			    .player .pause-button
			    .player .pause-button span
			    .player .pause-button span:first-of-type
			    .player .time
			    .player .stime .ttime
			    .player .play:hover,
			    .player .play:active
			    .pause-button:active span
			    .player .pause-button:hover span
			    .player .volume
			    .player .volume-icon
			    .player .volume-icon-hover
			    .player .volume-holder,
			    .player .valume-bar-holder
			    .player .volume-button
			    .player .volume-button-holder
			    .pplayer .volume-bar
			    .player .fullscreen
			    .player .fullscreen a
			    .player .volume-icon span
			    .player .volume-icon span:before
			    .player .volume-icon span:after
			    .player .volume-icon span:before
			    .player .volume-icon span:after
			    .player .v-change-X span:after onde X varia de 1 a 11 (ambos inclusos).

			    
				_______________________[HTML Audio/Video Methods]_______________________
				Method	Description
				addTextTrack()	Adds a new text track to the audio/video
				canPlayType()	Checks if the browser can play the specified audio/video type
				load()	Re-loads the audio/video element
				play()	Starts playing the audio/video
				pause()	Pauses the currently playing audio/video

						

----------------------------------------------------------------------------
LETRAS

		ESPAÇAMENTO ENTRE LETRAS
		letter-spacing: 0.1em;

		ESPAÇAMENTO ENTRE PALAVRAS
		word-spacing:1em;

		ALTURA DO TEXTO:
		line-height: 40px;
		
		INDENTAÇÃO DO TEXTO, O QUANTO SE AFASTA PELA ESQUERDA
		text-indent: 40px ;


		MODO DO TEXTO
		text-decoration: (definir a formatação do link (none))

		TRANSFORMAÇÃO DO TEXTO(uppercase, lowercase, capitalize)

		text-transform:;

		PESO DA LETRA: normal|bold|bolder|lighter|number|initial|inherit;
		font-weight:bold;

		ESTILO DO TEXTO

		text-style italic, strong

		ESTILO DA LINHA DO TEXTO

		text-decoration : underline, overline (encima), line-through


		FONT FACE


		TEM QUE CONVERTER DO FORMATO COMUM QUE ELA VEM PRA O FORMATO : WEB OPEN FONT FORMAT WOFF
		ENTÃO BAIXA A FONTE QUE QUER E CONVERTE AQUI: https://transfonter.org
		DEPOIS CARREGA ELA NO FONT FACE:

		@font-face{
			font-family: "Nome da fonte"; //NOME DA FONTE QUE VOCE VAI USAR PRA CHAMAR A FONTE NO CSS
			src: url(../pasta/nomedafonte.woff); // LOCAL DA FONTE
		}

		SE O NOME DA FONTE QUE VOCE ESCOLHER TIVER MAIS DE UMA PALAVRA, VOCE PRECISA USAR AS ASPAS 

		PARA USAR MAIS DE UMA FONT, DEFINA MAIS DE UM FONT FACE


		SOMBRA NO TEXTO

		PRIMEIRO PARAMETRO PRA CIMA, SEGUNDO PRO LADO, TERCEIRO EXPANSÃO DA SOMBRA(BLUR), E QUARTO A COR
		text-shadow: tamanho, tamanho, tamanho, cor;


		SMALL CAPS NO TEXTO OU NÃO
		font-variant: normal|small-caps|initial|inherit;

		RESUMO DE ATRIBUTOS FONT:
		EX:
		font: 12px "Lucida Grande", "Lucida Sans Unicode", Arial, sans-serif;

		EFEITOS NAS LETRAS
		<br> quebra de linha
		<p> paragrafo
		<hr> horizontal line- linha horizontal
		<b> e <strong> Negrito
		<u> underline
		<em> e <i> italico
		<strike> ticado



		<h1> ate <h6> titulos de cabeçalho
		NO BOOTSTRAP:
		APLICANDO EM POR EXEMPLO: H1 A CLASS H6, ELE TOMA O ESTILO DO H6
		<h1 class="h6">Titulo</h3>



-----------------------------------------------------------------------------------------------------------------
LINKS

Estados do link:

a:link (estado do link quando não visitado)
a:visited (estado do link quando visitado)
a:hover (estado do link quando voce passa o mouse)
a:active (estado do link enquanto pressionado)
pode se formatar mais de um estado de link ao mesmo tempo, exemplo:

a:link, a:visited, a:hover, a:active{
	color:pink;
}

para abrir uma pagina em uma nova guia é só colocar:

target: _blank;



para aplicar os estilos de link em determinados locais e não em todos
os links do site:
.menu-item:link, .menu-item:visited{
	color: white;
}

.menu-item:hover{
	color: pink;
	background: white;
}

nomedaclasse(id ou tag também):seletor(hover,visited,link:active);

elementos a são links, são quase como span, para fazer eles virarem blocos, use: display: block

===============================================================================================================
CURSOR

MUDA O CURSOR NA TELA: (pointer(mão))

cursor:pointer;


OU PODE SER UMA IMAGEM, ASSIM:

cursor: url(url_da_imagem) 

move,alias,all-scroll,auto,cell,context-menu,col-resize,copy,crosshair,default,e-resize,ew-resize,grab,grabbing,help,move
n-resize,ne-resize,nesw-resize,ns-resize,nw-resize,nwse-resize,no-drop,none,not-allowed,pointer,progress,row-resize
,s-resize,se-resize,sw-resize,text,url,w-resize,wait,zoom-in,zoom-out

==========================================================================
CONTROLE DE DIVS


POSITIONS:
position: param;
static|absolute|fixed|relative|sticky|initial|inherit;


(TANTO STICKY QUANDO FIXED FICAM FIXOS E FLUTUANDO SEM PRECISAR USAR FLOAT, MAS A DIFERENÇA DE UM PARA O OUTRO É QUE 
O STICKY FICA FIXO NO ELEMENTO PAI(RELATIVO A ELE) ATÉ QUE A PAGINA SEJA ROLADA, E SÓ ENTÃO GRUDA EM ALGUM CANTO(TOPO)
https://www.w3schools.com/css/css_positioning.asp


FIXED*
FICA FIXO EM RELAÇÃO AO CORPO (ABSOLUTO)

RELATIVE* 
FICA RELATIVO AO ELEMENTO PAI, ABOSLUTE EM RELAÇÃO AO CORPO DO DOCUMENTO)


STICKY*
FICA FIXO E FLUTUANDO SEM PRECISAR USAR FLOAT,O STICKY FICA FIXO NO ELEMENTO PAI(RELATIVO A ELE) ATÉ QUE A PAGINA 
SEJA ROLADA, E SÓ ENTÃO AO PASSAR POR ALGO GRUDA EM ALGUM CANTO(TOPO)
https://www.w3schools.com/css/css_positioning.asp
[PRECISA DO PREFIXO -WEBKIT-]

STATIC* É O PADRÃO
RELATIVE DIZ RESPEITO AO CONTEINER PAI DO OBJETO, ELE SE POSICIONA EM RELAÇÃO AO SEU PAI, TIRANDO ELE DO LUGAR, ELE SE POSICIONA
NORMALMENTE, MAS DEIXA O ESPAÇO REFERENTE AO SEU TAMANHO AINDA ABERTO DO LOCAL DE ONDE FOI MOVIDO.

ABSOLUTE*
FICA POSICIONADO EM RELAÇÃO AO CORPO DO DOCUMENTO, FICA ABSOLUTO, E QUANDO POSICIONADO, AO SER RETIRADO DO LOCAL ONDE ESTAVA
NÃO DEIXA UM ESPAÇO EM BRANCO.

COMPORTAMENTO DAS POSIÇÕES: [https://miro.medium.com/max/1200/1*pe9E2kzrX48Wwn_0wKklmw.png]


PROPRIEDADES DE DESLOCAMENTO USANDO POSITION(USE POSITION ANTES DE USAR ELAS)

FICARÁ DIFERENTE A DEPENDER DO TIPO DE POSICIONAMENTO QUE VOCE USOU (RELATIVE, ABOSLUTE, ETC)

	top: medida;
	left:medida;
	right:medida;
	bottom:medida;


COMPORTAMENTO POSICIONAL
Elementos bloco, ficam um abaixo do outro, alguns deles são:
<h1> <p> <table> <div>
Elemento inline , ficam um elemento inline ficam um ao lado do outro
e ocupam o tamanho do seu conteudo
<a> <span> <img>
Elementos inline bloco tem uma combinação do comportamento tanto do 
block, quanto do inline, agem como blocos, mas se posicionam um ao lado
do outro.

MARGIN

margin: auto, você centraliza o elemento na tela, auto detecta automaticamente a margem da borda correta
exemplo:
 [margin: 0 auto;] (o mais usado, 0 para cima e baixo, e automatico para laterais)

Z-INDEX

z-index define a ordem de prioridade de sobreposição de elementos que estão sobrepostos.
exemplo: (QUANTO MAIOR O VALOR, MAIOR A PRIORIDADE, ORDEM CRESCENTE)
elemento um tem z-index 2 e elemento 2 tem z-index 1 então elemento um
ficará sobreposto ao elemento dois, pois 2 é ordem de prioridade maior que 1


CLEAR 
[
comando clear: limpa o fluxo de elementos flutuantes exemplo:
.clear{
	clear: both(ambos) left, right none.
}
<div class="clear"></div>
<p class="clear"></p>
]


--------------------------------------------------------------------------------------------------------------------------
DISPLAY

inline|inline-block|block|contents|flex|grid|inline-flex|inline-grid|inline-table|list-item|run-in|table|table-caption|
table-column|table-header-group|table-footer-group|table-row-group|table-cell|table-column|table-row|none|initial
[
inline
Exibe um elemento como um elemento in-line (como <span>). Quaisquer propriedades de altura e largura não terão efeito

block
Exibe um elemento como um elemento de bloco (como <p>). Começa em uma nova linha e ocupa toda a largura

contents
Faz com que o contêiner desapareça, tornando os elementos filhos filhos do elemento no próximo nível no DOM

flex
Exibe um elemento como um contêiner flexível de nível de bloco

grid
Exibe um elemento como um contêiner de grade no nível de bloco

inline-block
Exibe um elemento como um contêiner de bloco no nível in-line. O elemento em si é formatado como um elemento in-line, mas você pode aplicar valores de altura e largura

inline-flex
Exibe um elemento como um contêiner flexível de nível in-line

inline-grid
Exibe um elemento como um contêiner de grade no nível in-line
inline-table O elemento é exibido como uma tabela em nível in-line
item de lista Deixe o elemento se comportar como um elemento <li>

run-in
Exibe um elemento como bloco ou sequencial, dependendo do contexto

table
Deixe o elemento se comportar como um elemento <table>

table-caption
Deixe o elemento se comportar como um elemento <caption>

table-column-group
Deixe o elemento se comportar como um elemento <colgroup>

table-header-group
Deixe o elemento se comportar como um elemento <thead>

table-footer-group
Deixe o elemento se comportar como um elemento <tfoot>

table-row-group
Deixe o elemento se comportar como um elemento <tbody>

table-cell
Deixe o elemento se comportar como um elemento <td>

table-column
Deixe o elemento se comportar como um elemento <col>

table-row
Deixe o elemento se comportar como um elemento <tr>

none
O elemento é completamente removido

initial
Define essa propriedade para seu valor padrão.

inherit
Herda essa propriedade de seu elemento pai.]
----------------------------------------------------------------------------------------------------------------------

DISPLAY FLEX:

TODOS ESTES TEM QUE TER PREFIXO DE COMPATIBILIDADE E SÃO:
-webkit-
-ms-
É UM PORRE COLOCAR TODA HORA PREFIXO, ENTÃO USE ESTE LINK:

https://autoprefixer.github.io


*DISPLAY FLEX É MUITO MELHOR PARA POSICIONAR ELEMENTOS DENTRO DE UM CONTEINER SEM PRECISAR DE POSITION OU FLOAT
OS ELEMENTOS DENTRO DE UM CONTEINER FLEX SE CHAMAM FLEX ITEMS, E PODEMOS MANIPULAR ELES PARA ORDENÁ-LOS COMO QUISERMOS
DENTRO DESTE CONTEINER. PRIMEIRO NO CONTEINER MAIS EXTERNO(PAI) PONHA:*

display:flex;

PROPRIEDADES DO FLEX:
*FLEX DIRECTION*
flex-direction: PARAM;
row|row-reverse|column|column-reverse|
row:
PADRÃO, OS ELEMENTOS INTERNOS APARECEM COMO LINHAS UMAS AO LADO DAS OUTRAS, COMEÇANDO A PARTIR DA ESQUERDA.

row-reverse:
OS ELEMENTOS INTERNOS APARECEM COMO LINHAS UMAS AO LADO DAS OUTRAS, MAS COMEÇANDO A PARTIR DA DIREITA.

column 
ALINHA OS ELEMENTOS INTERNOS AO CONTEINER FLEX UM ABAIXO DO OUTRO, COMO UMA COLUNA DE ITENS

column-reverse
ALINHA OS ELEMENTOS INTERNOS AO CONTEINER UM ABAIXO DO OUTRO COMO UMA COLUNA DE ITENS, MAS INVERTE A ORDEM DOS ELEMENTOS
O QUE ESTARIA EM ULTIMO VEM PRA CIMA, O DE CIMA VEM PRA BAIXO, ALGO ASSIM.


///////
*FLEX-WRAP*
flex-wrap:param;
nowrap|wrap|wrap-reverse

TODAS ESSAS FORMATAÇÕES TAMBÉM SÃO APLICADAS NÃO SOMENTE QUANDO O CONTEINER PAI NÃO ABRIGA TODOS OS ELEMENTOS, MAS TAMBEM
QUANDO A TELA É REDIMENSIONADA.
**ESSAS PROPRIEDADES SO SAO APLICADAS NO CASO DE OS ELEMENTOS NAO CABEREM MAIS NO CONTEINER PAI(FLEX)

nowrap(padrão)
DETERMINA QUE OS ELEMENTOS INTERNOS COM TAMANHO DEFINIDO INDEPENDENTEMENTE DO TAMANHO QUE TENHAM, SERÃO ESPREMIDOS DENTRO 
DO CONTEINER PAI, AO INVES DE DEIXAR ACONTECER UMA QUEBRA, DEIXANDO OS ELEMENTOS INTERNOS ESCAPAREM DO PRINCIPAL.

wrap
SE OS ELEMENTOS DENTRO DO CONTEINER PAI NÃO COUBEREM NO ESPAÇO HORIZONTAL QUE SOBROU(NAO COUBEREM NA LINHA)
ELE FAZ UMA QUEBRA E JOGA PRA BAIXO OS QUE SOBRARAM(como no inline-block)

wrap-reverse
IGUAL AO WRAP, MAS INVERTENDO OS ELEMENTOS.


*ALINHAR OS ELEMENTOS FLEX*
justify-content: PARAM;
flex-start|flex-end|center|space-between|space-around

flex-start(padrão)
OS ELEMENTOS SE ALINHAM A PARTIR DO CANTO SUPERIOR ESQUERDO

flex-end
OS ELEMENTOS SE ALINHAM A PARTIR DO FIM DO CONTEINER PAI(FLEX)

center
ALINHA OS ELEMENTOS NO CENTRO DO FLEX(PAI)

space-between
ALINHA OS ELEMENTOS E AUTOMATICAMENTE OS DISTRIBUI PELO FLEX PONDO UMA MARGEM IGUAL ENTRE CADA UM
SE EU TIVESSE 4 ELEMENTOS DENTRO DO CONTEINER, E DEPOIS ADCIONASSE MAIS UM, ELE RECALCULARIA O TAMANHO DE CADA UM
E OS ORGANIZARIA DE FORMA QUE TODOS TIVESSEM O MESMO ESPAÇAMENTO ENTRE SI, E FICASSEM TOTALMENTE ALINHADOS AO FLEX
[ELE NÃO LEVA EM CONTA A MARGEM LATERAIS, OS ELEMENTOS QUASE QUE COLAM NELAS, A PROXIMA LEVA]

space-around
ASSIM COMO O SPACE BETWEEN ALINHA OS ELEMENTOS AUTOMATICAMENTE E AJUSTA O ESPAÇO ENTRE ELES, MAS LEVA EM CONTA TODO O 
ESPAÇO AO REDOR, DEIXANDO OS ELEMENTOS ALINHADOS ENTRE SI, MAS TAMBEM ÁS MARGENS DO CONTEINER PAI.

*ALINHAMENTO/POSICIONAMENTO DOS ITENS*
align-items: param;
stretch|center|flex-start|flex-end|baseline

strech
PREENCHE TODA A AREA DO CONTEINER PAI, ATÉ COMPLETAR TODA A *ALTURA* E SOMENTE A ALTURA DO FLEX

center
TODOS OS ELEMENTOS VÃO PRO MEIO DO CONTEINER PAI, EXATAMENTE PRO MEIO.

flex-start
TODOS OS ELEMENTOS DO FLEX COLAM NA PARTE SUPERIOR DO CONTEINER

flex-end
TODOS OS ELEMENTOS DO FLEX COLAM NA PARTE INFERIOR DO CONTEINER

baseline
ALINHA DENTRO DO CONTEINER FLEX TODOS OS ELEMENTOS BASEADOS NA LINHA DE TEXTO DOS ELEMENTOS INTERNOS.
EXEMPLO:
SUPONDO QUE ALGUMA DAS DIVS TIVESSE UM PADDING TOP, E AS OUTRAS 4 NÃO, O ALINHAMENTO COMEÇARIA HORIZONTALMENTE,
DAS DIV QUE TEM PADDING, ONDE O TEXTO COMEÇA NELAS, FAZENDO A PARTE DO PADDING NÃO DESALINHAR ELE EM RELAÇÃO AS OUTRAS DIVS
RESUMIDAMENTE, O ALINHAMENTO COMEÇA A PARTIR DA PRIMEIRA LINHA DE TEXTO DA DIV FILHA DO FLEX.
 _____             _____
|     |___________|     |
|div 1|div2 |div3 |div4 |
|     |     |     |     |
*************************
exemplo em: RecusosCssHtmlEspeciais/flexbox/index

É LEGAL USAR O FLEX COM 
ROW
WRAP
CENTER
PARA CONFIGURAR BARRA LATERAIS E AREA DE POSTAGEM



*[ORDENANDO OS ELEMENTOS DENTRO DO FLEXBOX:]*

NA CLASSE OU ID DOS ELEMENTOS FILHOS VAI A SEGUINTE LINHA: (ESSE CODIGO VAI NO BOX DOS FILHOS, NAO DO PAI)
*order: numeroInteiro;*

*ESSE NÚMERO DITA A ORDEM QUE ESSE ELEMENTO ASSUMIRÁ DENTRO DA FILA DO FLEXBOX CONTEINER(PAI)*
ESSE NUMERO FUNCIONA DO MAIOR PARA O MENOR, DO CONJUNTO DOS INTEIROS(I*), POIS 0 É O PADRÃO, DEFININDO COMO 0, VOCE 
ORDENA OS ITENS NA FLEX NA ORDEM EM QUE APARECEM NO HTML
[UTIL PARA FAZER O ESQUEMA DE DEIXAR : CONTEUDO PRIMARIO- SECUNDARIO - LATERAL, PARA FACILITAR A LEITURA POR DEFICIENTES
MAS DEPOIS MUDANDO A ORDEM DE EXIBIÇÃO PARA VISUALIZAÇÃO NORMAL.
]

exemplo:

 .div1{
 	order: 4;
 }
 .div2{
 	order:1;
 }
 .div3{
 	order: 2;
 }
 .div4{
 	order: 3;
 }

 _______________________
|div2 |div3 |div4 |div1 |
|     |     |     |     |
*************************

*[CRESCIMENTO DO CONTEINER FILHO]*
	flex-grow:NUMERO;   

PARAMETROS: 0(DEFAULT), N> 0 

ESSE ELEMENTO PASSA A NAO TER UM TAMANHO FIXO, PASSA A OCUPAR TODO O TAMANHO DISPONIVEL DO CONTEINER, JUNTAMENTE COM OS
OUTROS FILHOS QUE PODEM OU NÃO TER ESSA PROPRIEDADE(NÃO ESPREME OS OUTROS FILHOS, TUDO BEM), [OS ELEMENTOS QUE TIVEREM ESTA 
PROPRIEDADE ESTICARÃO E FICARÃO MAIORES, PROCURANDO PREENCHER TODO O ESPAÇO DISPONIVEL NO FLEX PAI]
 DITA UM NUMERO PROPORCIONAL AO TAMANHO QUE ELE VAI OCUPAR EM RELAÇÃO AOS OUTROS ITENS DENTRO DO CONTEINER.
***REFERENTE AO TAMANHO QUE O ITEM NO FLEX VAI ASSUMIR, SE SOMANDO COM OS OUTROS ELEMEMENTOS ATÉ COMPLETAR TODO O CONTEINER**

[ESSE EFEITO SO FICARA VISIVEL MESMO QUANDO VOCE APLICAR WIDTH NOS ELEMENTOS]
ANTES:
 __________________________________
|                                  |
|  _________________               |
| |div1 |div2 |div3 |              |
| |     |     |     |              |
|  ******************              |
|                                  |
|                                  |
|                                  |
|                                  |
|                                  |
|                                  |
|__________________________________|

DEPOIS, COM flex-grow: 1; na div1

 __________________________________
|                                  |
|  ______________________________  |
| |div1              |div2 |div3 | |
| |                  |     |     | |
| ******************************** |
|                                  |
|                                  |
|                                  |
|                                  |
|                                  |
|                                  |
|__________________________________|

DEPOIS, COM flex-grow:1; na div1, e flex-grow:2; na div2:

 __________________________________
|                                  |
|  _______________________________ |
| |div1      |   div2       |div3 ||
| |          |              |     ||
| *********************************|
|                                  |
|                                  |
|                                  |
|                                  |
|                                  |
|                                  |
|__________________________________|


DEPOIS, COM flex-grow:1, na div1; flex-grow:2, na div2; flex-grow:3, na div3:
 __________________________________
|                                  |
|                                  |
|  _______________________________ |
| |div1   |  div2    | div3       ||
| |       |          |            ||
| *********************************|
|                                  |
|                                  |
|                                  |
|                                  |
|                                  |
|                                  |
|__________________________________|


*[CAPACIDADE DE REDUÇÃO DO ITEM FILHO]*
(UTIL QUANDO SE REDUZ O TAMANHO DA TELA, DITA QUE TAMANHO AQUELE ITEM FILHO PODE ASSUMIR, QUANDO A TELA É REAJUSTADA.
BARRAS LATERAIS POR EXEMPLO, EM CASO DE REDUÇÃO DEVEM FICAR MENORES DO QUE AREAS DE POST)

flex-shrink: numeroInteiro(N>0)
 DEFAULT:1;

******************************QUANTO MAIOR O VALOR MAIOR O TAMANHO DO ELEMENTO********************************

ANTES:
TUDO DEFAULT
 __________________________________
|                                  |
|                                  |
|  _______________________________ |
| |div1   |  div2    | div3       ||
| |       |          |            ||
| *********************************|
|                                  |
|                                  |
|                                  |
|                                  |
|                                  |
|                                  |
|__________________________________|

DEPOIS:
com

		.div1{
			flex-shrink: 1;
		}
		.div2{
			flex-shrink: 2;
		}
		.div3{
			flex-shrink: 5;
		}

 ___________________________
|                           |
|                           |
|  ________________________ |
| |div1   |  div2    | div3||
| |       |          |     ||
| ************************* |
|                           |
|                           |
|                           |
|                           |
|___________________________|


*[AJUSTANDO O TAMANHO INICIAL DE CADA ITEM DENTRO DO FLEX]*
flex-basis: param;
PARAM-> auto, Npx;
INDICA O TAMANHO INICIAL DO ELEMENTO NO FLEX, ANTES DA DISTRIBUIÇÃO DO ESPAÇO RESTANTE
(SE UM ELEMENTO TEM FLEX-GROW APLICADO NELE, SEGUIRÁ COM AQUELE TAMANHO, ESTE SERVE PARA OS RESTANTES, É BOM COLOCAR EM TODOS
POIS INDICA DE ONDE COMEÇARÁ, DE QUE TAMANHO O ELEMENTO OBRIGATORIAMENTE COMEÇARÁ(se nao tem um definido))
------------------------------------------------------------------------------------------------------------------------

FLUTUAÇÃO:


float: left, right,none, inherit

para areas de blocos como blogs, usa-se float
área de postagem : float: left (esquerda)
area lateral float right


O COMPORTAMENTO DO FLOAT:
SE FLUTUO 3 ELEMENTOS A ESQUERDA, UM FLUTUA
A ESQUERDA DO OUTRO.
------------------------------------------------------------------------------------------------------------------------
CLEAR

caso um elemento fique por baixo de outro acidentalmente basta aplicar:
Clear: both;
------------------------------------------------------------------------------------------------------------------------

BOX SIZING

ELEMEMENTOS QUE TEM UM WIDTH E TAMANHO DEFINIDOS, TEM SEU TAMANHO AUMENTADO QUANDO ACRESCENTADO UM PADDING.
OU SEJA, O TAMANHO TOTAL SERÁ O TAMANHO DECLARADO+ O PADDING INTERNO. BOX SIZING RETIRA ESSE COMPORTAMENTO, E PASSA
A FAZER COM QUE O ELEMENTO TENHA SOMENTE SEU TAMANHO DECLARADO.
ELE TAMBEM SEGUE O PADRÃO DE CONFIGURAÇÃO CONFORME O BROWSER, PORTANTO: 

-webkit-box-sizing:border-box;
-moz-box-sizing:border-box;
box-sizing: border-box;

OS VALORES QUE INTERESSAM SÃO:
border-box, QUE ASSUME SOMENTE O TAMANHO DECLARADO, E inherit QUE ASSUME O TAMANHO DO PAI




BOX-SHADOW
SOMBRA ATRÁS DE UMA CAIXA, OS PARAMTROS SÃO:

TAMANHO SUPERIOR E INFERIOR, TAMANHOS LATERAIS(OU TAMANHO SUPERIOR INFERIOR LATERAL LATERAL), EXPANSÃO DA SOMBRA, 
E "ALTURA" DA CAIXA, SIMULA O LEVANTAMENTO OU REBAIXAMENTO DO OBJETO, OU SEJA, O TAMANHO DA SOMBRA QUE O OBJETO FAZ, E O ANGULO
NO QUAL ELE ESTÁ VIRADO.
box-shadow: 20px 20px 2px 40px rgba(1,1,1,0.5);

DÁ PRA USAR VARIAS BORDAS EM CONJUNTO:

box-shadow: 5px 5px 8px blue inset, 10px 10px 8px red, 15px 15px 8px green;
[ASSIM UMA SOMBRA FICA POR BAIXO DA OUTRA]

 VALORES DE POSICIONAMENTO DA BORDA*:none|h-offset v-offset blur spread color |inset|initial|inherit;

OVERFLOW

IMPEDE QUE UMA IMAGEM MUITO GRANDE SAIA DO TAMANHO DO CONTEINER E ESTOURE O LAUOUT,
CORTA A PARTE EXCEDENTE DA IMAGEM

overflow: hidden;

PARA CRIAR UM ELEMENTO QUE TENHA UMA BARRA DE ROLAGEM USE TAMBEM O OVERFLOW, DESSE MODO:

overflow-y:scroll; /*BOM PARA CRIAR UMA CAIXA CUJA ROLAGEM SÓ SEJA PARA BAIXO.*/
 OU
overflow-x:scroll;
 OU
overflow: scroll;


HERANÇA EM DIVS

PARA TODOS OS ELEMENTOS P DENTRO DA CLASSE .caixa
.caixa p{
	padding: 15px;
}

SOMENTE PARA OS PARAGRAFOS QUE CONTIVEREM A CLASSE .caixa
p.caixa {
	padding-left: 4px;
}


-----------------------------------------------------------------------------------------------------------------------
BORDAS

tipos de borda: solid|dashed|dotted|double|groove - 3d com luminosidade vinda de baixo
ridge - 3d com luminosidade vinda de cima|inset|outset|none|hidden


BORDER RADIUS

ARREDONTAMENTO DE BORDA, PARA CONFIGURAR É SÓ SEGUIR A SEQUENCIA, -WEBKIT, -MOZ, BORDER
O ULTIMO BORDER RADIUS NÃO LEVA TRAÇO

-webkit-border-radius: 1px;
-moz-border-radius:1px;
border-radius:1px;

BORDER COLLAPSE

COLA OU SEPARA A BORDA DE ELEMENTOS PROXIMOS UMA NA OUTRA

border-collapse: separate/collapse;

-----------------------------------------------------------------------------------------------------------------------
*ANIMAÇÕES*

 PARA CRIAR UMA ANIMAÇÃO NAO SE USA CLASS, OU ID, OU TAG MAS SIM: @keyframes E UM NOME: @keyframes nomeB{}
 DEPOIS É NECESSARIO DEFINIR OS VALORES FINAIS E INICIAIS DA ANIMAÇÃO:

DEFINE-SE PROPRIEDADE: TAMANHO, COR, BORDA ETC.
 @keyframes nome{
 	from{
 		propriedade
 	}
 	to{
 		propriedade
 	}
 }

 APÓS É NECESSARIO COLOCAR A ANIMAÇÃO NO ELEMENTO QUE SE DESEJA APLICAR:

 O KEYFRAME TEM QUE SER COMPATIVEL COM OUTROS BROWSERS, PORTANDO AS PROPRIEDADES DE COMPATIBILIDADE DEVEM SER APLICADAS
NO GERADOR DO KEYFRAME:
 @-webkit-keyframes nome{

 }
 @-moz-keyframes nome{

 }
 @-o-keyframes nome{

 }
 @keyframes nome{

 }

PROPRIEDADES DO KEYFRAMES:
(DEVEM SER POSTAS NO ELEMENTO QUE SERÁ ANIMADO)

NOME DA ANIMAÇÃO
 animation-name: nomedaAnimacao;

DURAÇÃO (AUMENTA OU DIMINUI A VELOCIDADE DO EFEITO)
 animation-duration: SEGUNDOSs;

DELAY(EM QUANTO TEMPO DEPOIS DO CARREGAMENTO A ANIMAÇÃO COMEÇA)
 animation-delay: SEGUNDOSs;

QUANTIDADE DE VEZES QUE O ELEMENTO REPETIRÁ A ANIMAÇÃO: PARAMETROS-> VALOR, INFINITE
 animation-iteration-count: NUMERO;

ORDEM NA QUAL A ANIMAÇÃO VAI ACONTECER : PARAMETROS -> NORMAL(SEGUE A SEQUENCIA DESCRITA), REVERSE(FAZ A ANIMAÇÃO DO TO,
	 PARA O FROM), ALTERNATE(FAZ A ANIMAÇÃO DO FROM AO TO, DEPOIS DO TO AO FROM, E REPETE ISSO ATÉ O FIM[FRENTE PRA TRAS, TRAS PRA FRENTE]),
	 ALTERNATE-REVERSE(FAZ A ANIMAÇÃO DO TO AO FROM, DEPOIS DO FROM AO TO [TRAS PRA FRENTE, FRENTE PRA TRAS]), INITIAL(SETA PROVALOR PADRAO)
	 INHERIT(SEGUE A ANIMAÇÃO DO SEU CONTEINER PAI)
 animation-direction: PARAMETRO;

TEMPORIZAÇÃO DA ANIMAÇÃO: EFEITO DE VELOCIDADE DA ANIMAÇÃO: PARAM-> ease(COMEÇA DEVAGAR, VAI RAPIDO, E ACABA DEVAGAR)ease-in
(SOMENTE MOVIMENTO INICIAL LENTO) ease-out(SOMENTE MOVIMENTO FINAL LENTO)ease-in-out(COMEÇO LENTO E FINAL LENTO), initial
(DEFAULT) linear(MOVIMENTO CONSTANTE) inherit(PEGA A PROPRIEDADE DO PAI)
animation-timing-function: PARAMETRO;


ESTADO DE EXECUÇÃO DA ANIMAÇÃO: PARAM-> RUNNING, PAUSED, INHERIT, INITIAL.
 animation-play-state: PARAMETRO;


EXECUÇÃO DA ANIMAÇÃO: PARAM-> none(DEFAULT), forwards (MANTERÁ OS VALORES DEFINIDOS NO PRIMEIRO), backwards(MANTERÁ OS VALORES
	DEFINIDOS PELO PELO ULTIMO QUADRO) both(SEGUIRÁ A ANIMAÇAO DO PRIMEIRO E SEGUNDO QUADROS) initial(SETA PRO VALOR DEFAULT)
	 inherit(PEGA O PARAMETRO DO ELEMENTO PAI) *EM RESUMO ESSA PROPRIEDADE FAZ O ESTADO DEFINIDO FICAR NA TELA*. (USE BOTH 
	 	PARA SEGURAR O ESTADO FINAL NA TELA)
fill-mode: PARAMETRO;


TODAS AS PROPRIEDADES ANINHADAS: (*NÃO, NÃO USA VIRGULA PRA SEPARAR ELAS*)

 animation: nomeAnimacao duracao delay qtdExecuções direcaoDaAnimacao;
 animation: name duration timing delay qtd direcao;
 animation: name duration timing-function delay iteration-count direction fill-mode play-state;
 ASSIM: 	animation: rotate 5s linear infinite normal none running;


 ******* [NO CASO DE UMA ANIMAÇÃO PERSONALIZADA, VOCE COLOCA O NOME DA ANIMAÇÃO QUE FEZ, NO CASO DE UMA PRE DEFINIDA, O PARAMETRO
 ONDE IRIA O NOME DA ANIMAÇÃO, LEVA O NOME DA ANIMAÇÃO PRE DEFINIDA]************

 PARA "ANIMAR" OU, MOVER A DIV, NO ESTILO DO ELEMENTO QUE SE QUER ANIMAR, COLOCA:
 position:relative

 E NO GERADOR DA ANIMAÇÃO SE COLOCA AS MANIPULAÇÕES DE POSIÇÃO [TOP, LEFT, BOTTOM, RIGHT] ASSIM:

 @-webkit-keyframes animacao{
	from{
		background: red;
		-webkit-border-radius:0;
		left: 0;
		top: 0;
	}
	to{
		background: pink;
		-webkit-border-radius:300px;
		left:150px;
		top: 200px;
	}
}

OBSERVAÇÃO: 
PARA SER COMPATÍVEL EM TODOS OS BROWSERS, É NECESSARIO USAR O PREFIXO DE COMPATIBILIDADE DE NAVEGADORES EM *TODOS*
OS ATRIBUTOS, SEJA NO GERADOR DA ANIMAÇÃO(KEYFRAME) SEJA NO ESTILO DO ELEMENTO QUE SERÁ ANIMADO, ASSIM:

@-webkit-keyframes animacao{
	from{
		background: red;
		-webkit-border-radius:0;
		left: 0;
		top: 0;
	}
	to{
		background: pink;
		-webkit-border-radius:300px;
		left:150px;
		top: 200px;
	}
}
@-moz-keyframes animacao{
	from{
		background: red;
		-moz-border-radius:0;
		left: 0;
		top: 0;
	}
	to{
		background: pink;
		-moz-border-radius:300px;
		left:150px;
		top: 200px;
	}
}
@-o-keyframes animacao{
	from{
		left: 0;
		top: 0;
		background: red;
		-o-border-radius:0;
	}
	to{
		background: pink;
		-o-border-radius:300px;
		left:150px;
		top: 200px;
	}
}
@keyframes animacao{
	from{
		left: 0;
		top: 0;
		background: red;
		border-radius: 0;
	}
	to{
		background: pink;
		border-radius: 300px;
		left:150px;
		top: 200px;
	}
}

NO ESTILO:

#caixa{
	width: 300px;
	height: 300px;
	-webkit-animation: animacao 5s 1s infinite alternate-reverse;
	-moz-animation: animacao 5s 1s infinite alternate-reverse;
	-o-animation: animacao 5s 1s infinite alternate-reverse;
	animation: animacao 5s 1s infinite alternate-reverse;
	position: relative;
}
NOS ATRIBUTOS(QUANDO NÃO COLOCADO O ATRIBUTO MAIS RESUMIDO)
-webkit-animation-duration: 5s;
-moz-animation-duration:5s;
-o-animation-duration:5s;
animation-duration:5s;




TAMBÉM SE PODE USAR % PARA DEFINIR O QUE ACONTECE NA ANIMAÇÃO EM DETERMINADOS PERIODOS DO TEMPO DA ANIMAÇÃO:

@keyframes fill {
	0% {
		width: 0%;
	}

	50% {
		width: 100%;
	}

	100% {
		width: 1%;
	}
}

TRANSFORM: UTILIZADO DENTRO DO GERADOR DE ANIMAÇÃO PARA GERAR ALGUM EFEITO, EXEMPLO:
@-webkit-keyframes rotate{
	from{
		transform: rotate(0deg);
	}
	to{
		transform: rotate(359deg);
	}
}

TRANSFORM TAMBEM DEVE TER PREFIXO DE COMPATIBILIDADE:
-webkit-transform
-ms-transform
-moz-transform
-o-transform



PARA INVERTER UMA IMAGEM COM TRANSFORM:

transform: scaleX(1)// estado normal
transform: scaleZ(-1) // virado horizontalmente



---------------------------------------------------------------------------------------------------------
TRANSIÇÕES

TRANSIÇÃO ENTRE UM ESTADO E OUTRO DE UM ELEMENTO : PARAM-> |property| |duration| |timing-function| |delay|
ONDE: 
transition: |property| |duration| |timing-function| |delay|;


PROPERTY, ELEMENTO ONDE VAI SER APLICADA A TRANSIÇÃO, ex: PARAM-> *[border, width, etc.., all]*

transition-property: border-color;

DURAÇÃO DO EFEITO [PARAM-> TEMPO, infinite.]
transition-duration: duração; 

MODO COMO OCORRE O EFEITO : [PARAM-> linear, ease, ease-in, ease-out, cubic-bezier(cubic-bezier(0.005, 0.625, 0.365, 0.0840))
 e ease-in-out;]

transition-timing-function: ease-in;


TEMPO ENTRE CARREGAMENTO DA PAGINA E INICIO DA TRANSIÇÃO
transition-delay: tempo;

DÁ PRA POR MAIS DE UMA PROPRIEDADE

div {
	 transition: opacity 0.5s, padding 0.25s; 
}
(ACIMA, ONDE VOCE QUER APLICAR, O TEMPO, E PODERIA TER TAMBÉM AS OUTRAS PROPRIEDADES, A CADA ELEMENTO NO QUAL VOCE QUER 
	APLICAR, UMA VIRGULA) EX: 

transform: naBorda tempoEmSegundo ease-in, noTamanho tempoEmSegundo linear;

 E APLICAR A TRANSIÇÃO A TODAS AS PROPRIEDADES DO ELEMENTO USANDO ALL

 div { 
 	transition: all 1s linear; 
 }

 TRANSITION TAMBEM TEM PREFIXO DE COMPATIBILIDADE:
  -webkit-transition
  -moz-transition
   -o-transition

=====================================================================================
Webkits


-webkit-appearance:none;- Tira a aparencia normal de um elemento(usado em checkbox): 
-webkit-align-content
-webkit-align-items
-webkit-align-self
-webkit-animation
-webkit-animation-delay
-webkit-animation-direction
-webkit-animation-duration
-webkit-animation-fill-mode
-webkit-animation-iteration-count
-webkit-animation-name
-webkit-animation-play-state
-webkit-animation-timing-function
-webkit-background-clip
-webkit-background-origin
-webkit-background-size
-webkit-border-bottom-left-radius - arredonda a borda inferior esquerda de um elemento  - parametro: N% ou Npx Npx;
-webkit-border-bottom-right-radius - arredonda a borda inferior direita de um elemento  - parametro: N% ou Npx Npx;
-webkit-border-image
-webkit-border-radius
-webkit-border-top-left-radius
-webkit-border-top-right-radius
-webkit-box-decoration-break
-webkit-box-shadow
-webkit-box-sizing
-webkit-clip-path
-webkit-user-select - CARA Q DAORA- Define o que acontece com o texto quando vc tenta selecionar o texto ali:
Parâmetros:
auto | text | none | contain | all
auto: normal
none: não pode selecionar o texto ali
all: seleciona todo o texto ali em um unico clique

 
--------------------------------------------------------------------------------------------------------------
TRANSFORM (USADO GERALMENTE DENTRO DE ANIMAÇÕES KEYFRAME, NO GERADOR, MAS TAMBÉM PODE SER FORA, NUMA CLASSE, ID OU TAG)


[translate()]*
O método translate permite deslocar um elemento de sua posição atual até certa quantidade de unidades definidas para os eixos X e Y. Este método possui trÊs variantes:

translate(x, y): move o elemento nas duas dimensões.
translateX(x): move o elemento horizontalmente.
translateY(y): move o elemento verticalmente.

[rotate()]*
O método rotate, como se pode imaginar, permite rotacionar um objeto, de um ângulo informado como parâmetrotransform: 
rotate(30deg); (USE DEG DEPOIS DO VALOR PARA INDICAR A ROTAÇÃO)

[scale()]*
O scale, por sua vez, altera a escala do elemento, ou seja, aumenta ou diminui suas dimensões. Para aumentar as dimensões (nos eixos X, Y ou ambos) deve-se informar valores positivos, já para reduzir as dimensões, os valores devem ser negativos.

Este método possui também três variantes, que são:

scale(x, y): redimensiona o objeto nas duas dimensões.
scaleX(x): redimensiona o objeto horizontalmente.
scaleY(y): redimensiona o objeto verticalmente.


[skew()]*
O skew inclina o elemento de forma que suas laterais e bases formem um determinado ângulo com os eixos X e Y. Assim como o translate e o scale, o skew possui variantes:

skew(x,y): inclina o objeto nas duas dimensões.
skewX(x): inclina o objeto apenas horizontalmente.
skewY(y): inclina o objeto apenas verticalmente.

[matriz()]*
Matriz recebe como parametros todas as transformações anteriores para transformar o elemento em algo com varios efeitos
ao mesmo tempo
div {
  transform: matrix(1, -0.3, 0, 1, 0, 0);
}
OS PARÂMETROS SÃO
matrix(scaleX(),skewY(),skewX(),scaleY(),translateX(),translateY())
matrix(1, -0.3, 0, 1, 0, 0);

AQUI UM LINK PARA FAZER AS ANIMAÇÕES MAIS FACILMENTE:

https://html-css-js.com/css/generator/transform/


TRANSFORM STYLE:

A propriedade CSS do estilo de transformação define se os filhos de um elemento são posicionados
no espaço 3D ou achatados no plano do elemento. (define que o elemento ao ser mexido(a depender do que acotneceu
) pode ser representado também no eixo das cotas ao inves de ser distorcido).

transform-style: preserve-3d;
transform-style: flat;

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

FILTER

filter:
 none 
 blur(px) 
 brightness(%)
 contrast(%) 
 drop-shadow(xpx xpx xpx color) 
 grayscale(%) 
 hue-rotate(deg) 
 invert(%) 
 opacity(%)
 saturate(%)
 sepia(%) 
 url(urlxml);

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 PERSPECTIVE

 Dá uma perspectiva em 3d do elemento em relação a tela. Funciona como se rotacionasse o elemento para tras ou
 para frente na tela, só que em 3d. Considerando uma div em forma de quadrado uma perspectiva de 15 px o deixa
 parecido com um trapezio cujas pontas superiores estão para trás, como se fosse um trapézio deitado no chão.

 Quanto menor o valor, maior o efeito. Quanto maior, mais parecido com o tamanho original do elemento.

 perspective: Xpx;

=================================================================================================================

BLEND MODE

A propriedade mix-blend-mode descreve como um elemento de conteúdo deve ser mesclado com os elementos 
abaixo dele no background.

valores:

mix-blend-mode: normal;
mix-blend-mode: multiply;
mix-blend-mode: screen;
mix-blend-mode: overlay;
mix-blend-mode: darken;
mix-blend-mode: lighten;
mix-blend-mode: color-dodge;
mix-blend-mode: color-burn;
mix-blend-mode: hard-light;
mix-blend-mode: soft-light;
mix-blend-mode: difference;
mix-blend-mode: exclusion;
mix-blend-mode: hue;
mix-blend-mode: saturation;
mix-blend-mode: color;
mix-blend-mode: luminosity;

/* Valores globais */
mix-blend-mode: initial;
mix-blend-mode: inherit;
mix-blend-mode: unset;

Um truque bacana é colocar uma imagem por baixo de uma div, e um texto com fundo branco cujo texto se mistura 
com o fundo(imagem).
Pra isso criamos um conteiner relativo, e dentro uma imagem que será absoluta em relação a esse conteiner relativo
além de um span de tamanho total do conteiner, que também será relativo. Para fazer o texto se misturar basta usar
o comando: mix-blend-mode: screen;
(se os dois elementos do conteiner forem absolutos não funciona, o que leva o texto deve ser relativo)
==============================================================================================================
OBSERVAÇÕES

EM ELEMENTOS QUE VOCE TENTA POSICIONAR QUE TERIAM QUE TER UM TEXTO DENTRO E SEM ISSO NÃO APARECEM PONHA:

<div class="classe"></div> E NA CLASSE:

WIDTH: O TAMANHO DA IMAGEM DO BACKGROUND
HEIGHT: O TAMANHO DA IMAGEM DO BACK
[TEM QUE TER OS DOIS]
--------------------------------------------------------------
*PARA MENUS HORIZONTAIS*:
PARA ALINHAR OS ELEMENTOS DA LISTA LADO A LADO PODE USAR:
OU float:left OU display:inline-block(NO LIST ITEM<li>)
NO CASO DO FLOAT NO <li> TEM QUE POR FLOAT NO <ul> TAMBÉM
EM LINKS DE MENUS TRANSFORME OS LINKS EM BLOCK
PERSONALIZE O ESPAÇAMENTO ENTRE AS LETRAS DO MENU NOS LINKS
--------------------------------------------------------------

É NECESSÁRIO MANTER A ORDEM DE:
NOME DO SITE
MENU DE NAVEGAÇÃO
CONTEUDO PRIMÁRIO
SECUNDÁRIO
LATERAL

POR CONTA DOS LEITORES DE TELA PARA PESSOAS COM DEFICIÊNCIA
--------------------------------------------------------------

SE HÁ UMA DIV DENTRO DE OUTRA, E A DE DENTRO É FLUTUANTE, A MAIS EXTERNA TAMBEM DEVE SER, OU O FLUXO QUEBRARÁ. 
DEPOIS DAS DIVS FLUTUANTES, CONSERTE O FLUXO USANDO A FUNÇÃO: clear:both;
--------------------------------------------------------------------------------------------------------------
CHECA A FLUTUAÇÃO DOS ELEMENTOS INTERNOS SE ELAS ESTIVEREM DESALINHADAS
CHECAR OS MARGINS
-----------------------------------------------------------------------------------------------------------------
PRA ALINHAR ELEMENTOS DENTRO DE UM CONTEINER VOCE PODE FLUTUAR TODOS OS ELEMENTOS E USAR MARGIN, OU PODE USAR POSITION RELATIVE 
NO CONTEINER PAI(MAIS EXTERNO) E POSITION ABSOLUTE NOS CONTEINERS FILHOS, DEPOIS USAR OS ATRIBUTOS TOP LEFT BOTTOM RIGHT
NO CASO DE USAR O FLOAT, O CONTEINER MAIS EXTERNO SE NÃO FOR FLUTUADO TAMBEM QUEBRARA O FLUXO, ENTÃO OU VOCE FLUTUA ELE TAMBEM
OU DÁ CLEAR BOTH.
ALÉM DISSO TAMBÉM HÁ A FLEX BOX
-----------------------------------------------------------------------------------------------------------------------------
SEMPRE COLOCAR margin: 0 auto; NO CONTEINER QUE ENGLOBA O SITE
---------------------------------------------------------------------------------------------------------------------------
A ORDEM DO Z-INDEX É DO MAIOR PRO MENOR MAIOR TEM PREFERENCIA SOBRE MENOR (PRIMEIRO EXIBE 1, DEPOIS EXIBE 2 E ASSIM O 2 
	FICA POR CIMA)
--------------------------------------------------------------------------------------------------------------------------------
PARA PROGRAMAR CORRETAMENTE AJUDANDO PESSOAS DEFICIENTES, O SITE DEVE TER UM H1, MAS PRA DEIXAR ELE INVISIVEL PRA
USUARIOS COMUNS USE: text-indent: -90000; 
E UM NUMERO MUITO ALTO, ASSIM O H1 SE AFASTARÁ DA VISUALIZAÇÃO NORMAL NO CASO DE O CSS NÃO CARREGAR, 
O H1 AINDA APARECERÁ
------------------------------------------------------------------------------------------------------------------------------
PARA FAZER UM HEADER DESLIZANTE COMO NO PROJETO LIQUIDO, A PARTE DEBAIXO DO HEADER DEVE TER WIDTH DE  100% DO CONTEINER PAI, 
ENQUANTO QUE A PARTE QUE VEM POR CIMA TAMBEM PODE TER O MESMO, MAS PARA UM EFEITO MAIS BONITO DEFINA EM PX. DEPOIS DEFINA QUE 
A QUE VIRÁ EMBAIXO E A QUE VIRÁ ENCIMA COM O Z-INDEX
-------------------------------------------------------------------------------------------------------------------------------
NO FIM DA ULTIMA DIV FLUTUANTE VOCE COLOCA CLEAR PRA O FLUXO VOLTAR AO NORMAL, NO CASO DE UM PAI FLUTUANTE QUE TEM UM FILHO
FLUTUANTE, PONHA O CLEAR DEPOIS DO PAI, ASSIM O RESTANTE SEGUIRÁ, DEPOIS DO PAI, UM FLUXO NORMAL
--------------------------------------------------------------------------------------------------------------------------------
PARA LISTAS DE DESTAQUES COM LINKS E IMAGENS, NA IMAGEM USE: FLOAT, PARA DEIXAR A IMAGEM AO LADO DO TEXTO(A IMAGEM FICA FLUIDA
	DENTRO DO TEXTO, SE ADAPTANDO AO ESPAÇO AO LADO)
---------------------------------------------------------------------------------------------------------------------=----------
NAS DIVS ONDE VOCE TEM UMA FOTO, COM UM LINK OU NAO DENTRO, QUE QUISER APLICAR UM FUNDO A ELA(COMO SE FOSSE UMA BORDA)
PONHA O BACKGROUND NORMALMENTE, MAS PARA A IMAGEM APARECER POR TRÁS, DÊ PADDING


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

VALORES PERSONALIZÁVEIS EM CSS

Usamos a classe ::root{} que é uma pseudo classe fazendo referência ao nó raiz da árvore do DOM.
Colocando nossas variáveis personalizadas lá, podemos usá-las em todo o resto do documento, pois tudo no root é
reconhecido pelos outros elementos, uma vez que ele é o pai de todos os outros, e herdam suas características.

Atributos personalizados sempre devem começar com -- .

assim:
  --pink-bg: pink;

E colocar isso no root:

:root{
	--bg-pink: deeppink;
	--border-black: 1px solid black;
}

Para usar em qualquer classe, id, ou tag, chamamos ela assim:

atributo: var(--nome-att-personalizado);


body{
	background-color: var(--bg-pink);
	border: var(--border-black);
}

Podemos fazer isso não só para background mas para outros atributos.

Podemos concatenar uma variável com valores estáticos também, observe o body:

:root{
	--bg-pink: deeppink;
	--border-black: black;
}

body{
	background-color: var(--bg-pink);
	border: 1px solid var(--border-black);
}

Isso é bacana para definir cores padrão a serem usadas no projeto, sem precisar ficar pegando o código hex o 
tempo inteiro.

*****************************************************************************************************************************

PARA ADAPTAR O SITE TOTALMENTE A DEFICIENTES NUNCA SE ESUQEÇA DE COLOCAR OS ELEMENTOS IMPORTANTES ENTRE AS SEGUINTES TAGS


<header></header> /*ESSA TAG COM O NORMALIZE FICA COLADA NO TOPO, SEM ELE, PRECISA POR MARGIN */
<nav></nav> /*TODO MENU QUE FOR FEITO AGORA TEM QUE SER POSTO AI, AO INVES DE UMA DIV*/
<footer></footer> /*RECONHECE QUE ALI É O RODAPÉ*/
<article></article> /*PARA ARTIGOS, TEXTOS, BIOGRAFIAS, VIDEOS ETC*/
<section></section> /*  define uma area ou sessão*/
<time></time> /* FEITO PARA OS BUSCADORES ENTENDEREM MELHOR QUE O QUE ESTÁ ALI SE TRATA DE UMA DATA*/
<aside></aside> /*FEITO PARA OS BUSCADORES ENTENDEREM QUE O QUE ESTÁ ALI SE TRATA DE UM CONTEUDO QUE ESTÁ NA LATERAL*/
<pre></pre> /*Faz com que o tamanho da fonte seja fixo, os espaços e as quebras de linhas sejam preservadas do texto original*/
DESSE MODO O BROWSER IRÁ LER E INTERPRETAR, DIZENDO A PESSOA O QUE É E ONDE ESTÁ CADA COISA
******************************************************************************************************************************

[NAO PRECISA MAIS USAR O NORMALIZE SE TIVER O BOOTSTRAP]

===============================================================================================================================

PARALLAX:

PRIMEIRAMENTE, APLICAR EM:

body, html{
	margin:0;
	height: 100%;
}

O HEIGHT, É O SEGREDO DO PARALLAX, É A PARTE ESSENCIAL, NUNCA ESQUEÇA DE APLICAR ELA TANTO NO BODY QUANTO NO HTML

-ISSO É NECESSÁRIO POIS, AO ADCIONARMOS NOSSA DIV, CUJA IMAGEM TEM QUE TOMAR A TELA TODA, SE O BODY NAO TIVESSE 100%
ELE SERIA CURTO, E A IMAGEM IRIA OCUPAR 100% DESSE ESPAÇO, MAS 100% DE UM ESPAÇO PEQUENO.

TAMBEM É NECESSARIO COLOCAR 100% DE HEIGHT EM TODOS OS ELEMENTOS PARALLAX


CONFIGURADO O BODY E O HTML, CONFIGURE AS DIVS QUE TERÃO ELEMENTOS PARALLAX
ELES DEVEM CONTER: 

height:100% e
background-attachement:fixed; 
*OBRIGATORIAMENTE*

PARA MELHORES RESULTADOS NO CASO DE IMAGENS
USE:

PARA NAO DEIXAR A IMAGEM REPETIR QUANDO REDIMENSIONAR A TELA:
background-repeat:no-repeat

PARA COBRIR TODA O CONTEINER COM A IMAGEM:
background-size: cover; 

PARA CENTRALIZAR A IMAGEM NA DIV:

background-position: center;
===========================================================================================================================

*DIVERSOS*


opacity: 0.3; (QUANTO MAIS PROXIMO DE 0 MAIS OPACO, QUANTO MAIOR QUE ZERO MENOS APAGADO)

CASO VOCE ESTEJA DENTRO DE UMA PASTA, E DESEJA SAIR DELA PRA IR OUTRA QUE ESTÁ FORA, É OBRIGADO A USAR "../" ANTES DO
RESTANTE DO DIRETÓRIO PARA SUBIR UM NIVEL, E AI SIM ACESSAR O ARQUIVO

***************************************************************************************************************************

O NORMALIZE.CSS SERVE PRA DEIXAR A EXIBIÇÃO DO SITE CONSISTENTE(O MAIS IGUAL POSSIVEL) EM TODOS OS BROWSERS ***USE ISSO****

<link rel="stylesheet" type="text/css" href="css/normalize.css"> /*coloque o arquivo que ja esta no pc dentro da pasta CSS 
no projeto e linke no link rel*/

O HTML5SHIV SERVE PARA FAZER COM QUE AS NOVAS TAGS NÃO GEREM ERRO DE RENDERIZAÇÃO NO INTERNET EXPLORER QUE NÃO AS SUPORTA
SEMPRE USE ISSO DENTRO DO HEAD:
	<!--[if lt IE 9]><script src="js/html5shiv.js"></script>
	<![endif]--> /*coloque o arquivo que ja esta no pc dentro da pasta JS no projeto e linke no script <script src="">
	</script>*/

***************************************************************************************************************************
========================================================================================================================

OBSERVAÇÕES
[
 i    elementos flutuantes não empurram elementos ao seu redor, só flutuam sobre eles
 num conteiner pai por exemplo, se o comando clear não for utilizado, as caixas flutuantes
 flutuarão sobre ele ao inves de ficar dentro.
 Ps: Utilizar no final de um elemento flutuante, quando não quiser que as coisas
 a seguir sigam o fluxo flutuante e sim normal

 i Display:
Elementos inline-block, ocupam o tamanho do conteudo mas um abaixo do outro
Esses elementos tem seus blocos nativos, mas podemos alterálos usando 
display: inline, inline-block, block 
inline-block pode ser usado em uma situacao com por exemplo dois elementos
os dois permanecem na mesma linha se tiver espaço pros dois, se o primeiro for
maior, o segundo cai pra proxima linha

 i dá pra usar uma imagem no background de uma classe e uma div ao inves de usar <img src
e definir a posição dela. Alem de a imagem nao ser copiavel centraliza rapido dentro das divs

 i Laterais <aside> ainda precisam de valores de float ou posicionamento, elas so servem pra identificar que
 aquilo é uma lateral.




*PADRÃO DO CORPO HTML A SEGUIR*

<html lang="pt-br">
<title></title>
<link rel="stylesheet" type="text/css" href="css/style.css">
<link rel="stylesheet" type="text/css" href="css/normalize.css"> // O ARQUIVO VAI ESTAR HOSPEDADO
<meta charset="utf-8">

-------------------------------------------------------------------------------------------
*PARA CENTRALIZAR UM SPAN(BLOCO DE TEXTO COMO UM TITULO NA TELA):*


		.title{
			width: 100%;
			position: relative;
			left: 0;
			top: 50%;
			text-align: center;
		}
		.title span{
			color: #fff;
			background: #111;
			padding: 18px;
			letter-spacing: 5px;
			text-transform: uppercase;
		}

		O .title É QUE IMPORTA. 
		POSIÇÃO RELATIVA EM RELAÇÃO AO ELEMENTO MAIS
		PROXIMO, DISTANCIA DA ESQUERDA 0, E A 50% DO TOPO, DENTRO DELE TODOS OS TEXTOS
		SÃO ALINHADOS AO CENTRO. PORTANTO AS SPANS DENTRO DELE FICARÃO NO CENTRO

--------------------------------------------------------------------------------------------

______________________________[PERSONALIZAR ATRIBUTOS DO HTML]_________________________________


SELECIONADOR DE ATRIBUTOS

The [attribute] selector is used to select elements with a specified attribute.

The following example selects all <a> elements with a target attribute:
Example

a[target] {
  background-color: yellow;
}

The [attribute="value"] selector is used to select elements with a specified attribute and value.

a[target="_blank"] {
  background-color: yellow;
}


===========================================================================================================================
ELEMENTOS QUE PRECISAM DE PREFIXO:
-transition-
-transform-
-transition-
-animation-
-border-radius-
-box-shadow-
-box-sizing-
-elementos flex seja propriedade do pai ou do filho-
-background: linear-gradient;

[PARA FACILITAR, USE]: https://autoprefixer.github.io
===========================================================================================================================
TAGS HTML
<!DOCTYPE html>
<html></html>
<head></head>
<body></body>
<div></div>
NOVAS 
-> UTIL PARA OS BUSCADORES IDENTIFICAREM O QUE É O QUE DENTRO DO SEU SITE, E TAMBÉM PARA LEITORES DEFICIENTES
NÃO TEM DIFERENÇA ENTRE USAR ELAS E CONTINUAR FAZENDO USANDO DIV, MAS POR CONVENÇÃO, É MELHOR, PARA OS LEITORES DE HTML
IDENTIFICAREM O QUE É CADA ELEMENTO NO HTML

<header></header> /*ESSA TAG COM O NORMALIZE FICA COLADA NO TOPO, SEM ELE, PRECISA POR MARGIN */
<nav></nav> /*TODO MENU QUE FOR FEITO AGORA TEM QUE SER POSTO AI, AO INVES DE UMA DIV*/
<footer></footer> /*RECONHECE QUE ALI É O RODAPÉ*/
<article></article> /*PARA ARTIGOS, TEXTOS, BIOGRAFIAS ETC*/
<section></section> /* VAI DENTRO DO ARTICLE, DIVIDE O TEXTO EM SESSÕES, VE SE USA*/
<time></time> /* FEITO PARA OS BUSCADORES ENTENDEREM MELHOR QUE O QUE ESTÁ ALI SE TRATA DE UMA DATA*/
<aside></aside> /*FEITO PARA OS BUSCADORES ENTENDEREM QUE O QUE ESTÁ ALI SE TRATA DE UM CONTEUDO QUE ESTÁ NA LATERAL*/
===============================================================================================================================

*[LINKS UTEIS]*

*NORMALIZE.CSS*
https://necolas.github.io/normalize.css/8.0.1/normalize.css

*EX -> RGB*
https://www.webfx.com/web-design/hex-to-rgb/

*CORES HEX*
https://www.w3schools.com/cssref/css_colors.asp

*CORES RGB*
https://www.w3schools.com/css/css_colors.asp

*GERADOR DE TRANSFORM*
https://html-css-js.com/css/generator/transform/

*AUTO PREFIXO DE COMPATIBILIDADE COM BROWSERS*
https://autoprefixer.github.io

*TABELA DE ENTIDADES HTML*
http://arquivo.devmedia.com.br/artigos/devmedia/html-entities.html

*GERADOR DE IMAGENS ALEATÓRIAS*
https://source.unsplash.com

*NOMES DOS ICONES QUE USO*
https://fontawesome.com/icons
https://useiconic.com/open(TIRE A VPN PRA ENTRAR)
https://www.w3schools.com/bootstrap/bootstrap_ref_comp_glyphs.asp

*GERADOR DE PALETA DE CORES*
color.adobe.com/pt/create

*CONVERTER PX PARA EM*
https://www.w3schools.com/tags/ref_pxtoemconversion.asp

*COMPARADOR DE SEMELHANÇA DE TEXTOS*
https://www.invertexto.com/comparar-textos

*ATRIBUTOS DE TAGS HTML*
https://developer.mozilla.org/pt-BR/docs/HTML/Attributes

*MIX BLEND MODE DE TEXTOS*
https://developer.mozilla.org/pt-BR/docs/Web/CSS/mix-blend-mode

*SVG TUTORIAL*
https://www.w3schools.com/graphics/svg_intro.asp

*TRANSFORM*
https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style,
https://www.w3schools.com/cssref/css3_pr_transform.asp


*TRANSFORM PERSPECTIVE - NO ESPAÇO 2 OU 3D*
https://developer.mozilla.org/pt-BR/docs/Web/CSS/transform-function/perspective

*ATRIBUTOS HTML DATA - PERSONALIZADOS*
https://www.w3schools.com/tags/att_global_data.asp

*CSS FILTER*
https://www.w3schools.com/cssref/css3_pr_filter.asp

===========================================================================================================================
PROCESSO CRIATIVO: 

DESENHE PRIMEIRO O LAYOUT
ESCREVA OS ELEMENTOS QUE ELE TERÁ
FAÇA NO PHOTOSHOP


=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*



UTILIDADES

[PARA PROIBIR O USUARIO DE ARRASTAR UMA IMAGEM:]
pointer-events: none;
------------------------------------------------------------------------
[PARA COLOCAR O TAMANHO DA IMAGEM DIRETO NO LINK PARA A IMAGEM:]
width:NUMpx;
height:NUMpx;

ex:
<img src="img/logo.png" width="142px">
------------------------------------------------------------------------

[EFEITO DE BACKGROUND EM SOBREPOSIÇÃO A OUTRO NOS ELEMENTOS.]

BASTA CRIAR IMAGENS QUE TENHAM OPACIDADE, COLOCÁ-LA COMO
O PRIMEIRO BACKGROUND, A IMAGEM QUE QUER QUE SOBREPONHA A
ANTERIOR VOCE COLOCA DE NOVO, DANDO UMA VIRGULA DEPOIS DO PRIMEIRO
, E ASSIM POR DIANTE.

ASSIM:
body{
	background: url(../imagens/capa.png),
				 url(../imagens/ruido.png),
				 linear-gradient(50deg, #ff4169,#7c26f8);
}

SO FUNCIONA COM IMAGENS QUE TEM OPACIDADE, OU NAO DÁ PRA VER
A QUE ESTÁ POR BAIXO.
-----------------------------------------------------------------------------


[CRIAR UM DIVISOR (BARRINHA) DENTRO DA NAVBAR]

BASTA COLOCAR UMA CLASSE COM AS ESPECIFICAÇÕES QUE SÃO
A COR(background), A ESPESSURA(width, GERALMENTE 1PX), E A MARGEM DAS BORDAS
DEPOIS APLICAR ESSA CLASSE NA UL, JUNTAMENTE COM A CLASSE NAV-ITEM

ASSIM:
<li class="nav-item divider"></li>

--------------------------------------------------------------------------------------------
[AREA DE BAIXO DE UM MENU FIXO]*********** importante

GERALMENTE ESSA AREA FICA POR BAIXO DO MENU, PQ O MENU TÁ ABSOLUTO, E NÃO É O QUE QUEREMOS.
PARA RESOLVER E TIRAR O TEXTO DE BAIXO, APLIQUE NA DIV MAIS EXTERNA QUE ABRIGA O CONTEUDO
QUE ESTÁ POR BAIXO DO MENU, UMA CLASSE, E ESTILIZE ELA NO CSS, JUNTO COM O BODY E O HTML
FAÇA ESSAS TAGS TEREM WIDTH 100%(BODY, HTML, E SUA DIV MAIS EXTERNA), DEPOIS, NESSA DIV
EXTERNA APLIQUE A CLASSE D-FLEX, E NA DIV SEGUINTE A CLASSE ALIGN-SELF-SEUPARAMETRO(é legal
	usar center, mas pode ser end tambem, start volta pro topo) 

----------------------------------------------------------------------------------------------

[ELEMENTO SAINDO DA ÁREA DO HTML PELA HORIZONTAL]
BOM USAR ISSO QUANDO ALGUM ELEMENTO ESCAPA DE UMA DIV, ESTOURANDO O LAYOUT, E FAZENDO O SITE
GERAR UMA BARRA DE ROLAGEM HORIZONTAL, PARA ACABAR COM ISSO, APLIQUE NO HTML, BODY:


overflow-x:hidden;


TAMBEM TEM O overflow-y MAS ELA BLOQUEIA A ROLAGEM VERTICAL, ISSO É BOM PRA CRIAR UMA PAGINA FIXA, 
COM UMA TELA SÓ.
-----------------------------------------------------------------------------------------------------------------------

[IMAGEM QUE SAI DE UMA DIV POR BAIXO DA PROXIMA DIV]

COMO NO EXEMPLO DO SPOTIFY,A IMAGEM DO CELULAR QUE SOFREU ROTAÇÃO ESCAPOU DE SUA DIV, E LOGO ABAIXO, TEM UMA DIV DE
RODAPÉ QUE A PONTINHA DO CELULAR ESTÁ ENCIMA DELE, MAS EU QUERO QUE FIQUE POR BAIXO, PARA DEIXAR A PONTA DO CELULAR POR
BAIXO DO RODAPÉ É SÓ COLOCAR NA CLASSE DO RODAPÉ:

position:relative;


=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*


RESPONSIVIDADE

[PRA ALINHAR OS ITeNS NO CeNTRO DeNTRO De UM GRID, PODeMOS TRANSFORMAR A DIV
DeNTRO DeLe NUM FLeX USANDO: d-flex numa div, e dentro dela coloque outra div
com a classe: align-self-center.]

ASSIM:

 <div class="row">
          <div class="col-md-6 d-flex">
            <div class="align-self-center">
               <h1 class="display-4">Suas contas, descomplicadas</h1>
               <p class="font-weight-bold">Usado por mais de um milhão de pessoas, o Finans e uma ferramenta online que vai facilitar a sua vida financeira.</p>
            </div>

            OU:


         <div class="row">
         	<div class="col">
         	<div class="d-flex justify-content-center">
         	<div><img src="skasas"></div>


[para apagar um elemento da exibição quando a tela atingir um certo tamanho de dispositivo]

coloque na div que quer esconder, a classe:

class="d-none"
ESCONDE O ITEM PARA TODOS OS TAMANHOS, COMO ESCONDERÁ O 
ELEMENTO PARA TODOS OS TAMANHOS, COLOQUE TAMBEM A CLASSE:
class="d-TAMANHO-block"
REDEFINE O DISPLAY DAQUELE ELEMENTO COMO BLOCK A PARTIR 
DESSA DETERMINADA LARGURA, ENTÃO O ELEMENTO VOLTA.

=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*==*=*=*=*=*=*=*=*=*=*=*=*=*=*=*==*=*=*=*=*=*=*=*=*=*=*=*=*=*=*==*=*=*=*=*=*=*=*=*=*=*=*=*=*=*==*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=


ACESSIBILIDADE


i SEMPRE COLOQUE NAS IMAGENS UM : alt="Texto que explica do que se trata a imagem"


i SETINHAS DE PROXIMO, OU ANTERIOR E DERIVADOS NÃO SÃO LEGIVEIS PARA LEITORES DE TELA, MAS SE VOCE QUISER EXIBIR A SETA, E AINDA
ASSIM MANTER A ACESSIBILIDADE, PODE DEIXAR VISIVEL QUE AQUELE LINK TEM O NOME PROXIMO ANTERIOR, ETC SOMENTE PARA LEITORES
DE TELA, E PARA TELAS NORMAIS MANTER A SETA. PARA ISSO, BASTA COLOCAR JUNTO COM A SETINHA, 
COM O ELEMENTO NÃO LEGIVEL PARA LEITORES DE TELA, UMA SPAN COM A CLASSE:
|
|=>	sr-only(falo disso em paginação) [ESSA CLASSE FUNCIONA FORA DA PAGINAÇÃO TAMBEM, USE SEMPRE QUE PRECISAR EXIBIR ALGO
									  QUE QUER QUE SÓ FIQUE VISIVEL PARA DEFICIENTES]

i COLOQUE OS CONTEUDOS SEMPRE DENTRO DAS TAGS ESPECIFICAS PARA AS FINALIDADES CRIADAS, COMO NAVEGAÇÃO DENTRO DE <nav> 
TEXTOS DENTRO DE <article> OU <section>, NOME DO SITE NO HEADER.

i INDEPENDENTE DE TER UMA LOGO OU NAO, O NOME DO SITE DEVE ESTAR DENTRO DE UM H1 QUE TEM QUE ESTAR NO HEADER, SÓ QUE
PARA NÃO ESTRAGAR O VISUAL E MANTER A ACESSIBILIDADE, VOCÉ PODE OU DAR UM TEXT-INDENT NO H1 COM UM VALOR MUITO ALTO, OU
COLOCAR NO H1 A CLASSE: sr-only, para esconder o texto ali, deixando visivel so pra deficiente.

=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*

EFEITOS LEGAIS


=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
OBSERVAÇÕES

PARA ANIMAR UM ELEMENTO(POR DETERMINADO TEMPO), VOCÊ USA ANIMATION, E PARA TRANSFORMAR O ELEMENTO(DEIXAR ELE ROTACIONADO
	PRA SEMPRE, VIRADO NUM ANGULO DE 90 GRAUS, FIXO, POR EXEMPLO), VOCE USA TRANSFORM.

EXEMPLO:

FAZER O ELEMENTO FICAR SE MEXENDO: ANIMATION
FAZER O ELEMENTO SE TRANSFORMAR EM UMA VERSÃO DELE ROTACIONADA: TRANSFORM

=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
BOOTSTRAP


CONCEITOS:
diferença de responsividade pra fluidez de layout

[FLUIDO]: OS ELEMENTOS DIMINUEM PRA SE ADAPTAR A TELA, MAS CONTINUAM NA MESMA POSIÇÃO E ESTRUTURA, ISSO NO LAYOUT FLUIDO, E SEMPRE TEM UMA
LARGURA MAXIMA E MINIMA
[RESPONSIVO]: SE ADAPTA AO DISPOSITIVO QUE ESTÁ EXIBINDO O SITE, OS ELEMENTOS MUDAM DE LUGAR CONFORME A LARGURA
QUANDO A LARGURA CHEGA A UM LIMITE, OS ELEMENTOS MUDAM, QUANDO CHEGA EM OUTRO LIMITE, MUDAM DE NOVO, OU SEJA, É POSSIVEL
CONTROLAR O QUE O USUARIO VÊ EM DETERMINADOS DISPOSITIVOS E COMO VÊ.
 
 MOBILE FIRST: você começa desenvolvendo o site para o menor dispositivo no qual o site será visto, e vai expandindo até
 o maior dispositivo.


DESCRIÇÃO DAS PARTES:
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<meta name="viewport"
VIEWPORT: TODA A AREA DISPONIVEL NO BROWSER PARA VISUALIZAÇÃO.

CONTENT: 
width=device-width; DIZ QUE A VIEWPORT SERÁ A LARGURA TOTAL DO DISPOSITIVO
INITIAL-SCALE=1; DEFINE A ESCALA INICIAL 1, TAMANHO NO QUAL O SITE VIRÁ ZOOM PADRÃO. SE O USUÁRIO ROTACIONA A TELA,
 O BOOTSTRAP ADAPTA A TELA A ESSE TAMANHO. AUMENTANDO ESSE VALOR, APROXIMAMOS O ZOOM NA VISUALIZAÇÃO DESSE SITE.
shrink-to-fit=no; 'tradução: encolher para caber' DEIXA EM [NO], SE REMOVER FICA NO PADRÃO, QUE É YES, O MODO ATIVADO
FAZ COM QUE NÃO POSSAMOS ALGUNS CONTEUDOS QD NECESSARIO

A DIFERENÇA ENTRE O ARQUIVO bootstrap.css e o bootstrap.min.css é que o bootstrap.min.css é uma versão "minified" 
ela não contém espaçamentos, então a leitura pelo browser é mais rápida



CASO O BOOTSTRAP ATUALIZE É SÓ MUDAR O NUMERO DA VERSÃO PRESENTE NO LINK QUE FICA NO HEADER(se usar o link direto):

 Bootstrap CSS -->                                                           _______
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" 
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

EXPLICANDO ESSE LINK REL

integrity:
CHAVE CRIPTOGRAFICA QUE APLICAMEDIDAS DE SEGURANÇA PRA GARANTIR QUE NAO HOUVERAM ALTERAÇÕES NO ARQUIVO CSS, 
IMPORTANTE QUANDO SE CARREGA UM ARQUIVO DA INTERNET, SERVE PRO BROWSER SABER DE ONDE ESTÁ SENDO CARREGADO ESSE ARQUIVO
FAZ COM QUE ALGUEM NÃO POSSA ALTERAR O ARQUIVO MIN.CSS, POIS A CHAVE DE INTEGRIDADE VAI MUDAR.
[SE VOCE ESTIVER CARREGANDO O ARQUIVO DE DENTRO DO SEU PROPRIO SITE, NÃO PRECISA DESSA LINHA NEM DO CROSSORIGIN]
[SE VOCE ESTIVER USANDO O ARQUIVO DE DENTRO DO SEU PROPRIO SITE E USAR A INTEGRITY, O BOOTSTRAP NÃO FUNCIONA]

**********************************************************************************************************************
<LINK REL="SHORTCUT ICON" href="images/favico.png"/>
    <link rel="apple-touch-icon" href="images/favico.png"/>


							******************** PARTE SOBRE TEXTO **************************

OBSERVAÇÕES:
*[ i PODE APLICAR ESSAS CLASSES EM TODOS ELEMENTOS DE TEXTO, SPAN, H1, PARAGRAFO, ATÉ EM DIVS
	i PODE COMBINAR ESSAS CLASSES COM ELAS MESMAS, E COM OUTRAS
	i AS VEZES, PODE TER UMA CLASSE QUE DEPENDE DE OUTRA[A CLASSE [list-inline-items] tem que estar nas <li> dentro da ul
	 que tem a classe [list-inline] ]


 ]
ELEMENTOS NA APLICAÇÃO 
																				

GERALMENTE CLASSES QUE APLICAM FORMATAÇÃO EM TEXTO, TEM text- NA FRENTE, DEPOIS A PROPRIEDADE,  E FORMATAÇÃO DE FONTE
TEM font-                                                             


----* VARIADO *----

[DESTAQUE DE TAG]																			 
APLICANDO EM POR EXEMPLO: H1 A CLASS H6, 
ELE TOMA O ESTILO DO H6

<h1 class="h6">Titulo</h3>														
					

[DISPLAY]
PARA DAR DESTAQUE A UM TITULO, NOME, ANUNCIO, 
TAG, ALGO ASSIM(UM TITULO DE DESTAQUE CURTO),
 SE USA A CLASS: display-N onde n 
é um número que define o nivel de DESTAQUES                                     
define-se destaque: tamanho da letra.                                           
*** É UM EFEITO MT BONITO, USE PRA TITULOS INICIAIS ETC ***  

class="display-N"

<h1 class="display-1"></h1>  

[LEAD, DESTAQUE]
class="lead"
BOM PARA DESTACAR UM TEXTO, UMA FRASE QUE DEVE CHAMAR ATENÇÃO,
 MAS QUE NÃO PODE TER UM TAMANHO DE TITULO AUMENTA A
 FONTE DO PARAGRAFO. (afina um pouco a letra)    

<p class="lead">Lorem ipsum dolor sit amet</p>


----* FONTE *----
class="font-weight-bold"
DEFINE A FONTE NAQUELE LOCAL COMO NEGRITO
class="font-italic" (sim, não tem weight nesse)
DEFINE A FONTE NAQUELE LOCAL COMO ITALICO
class="font-weight-normal"
DEFINE A FONTE NAQUELE LOCAL COMO NORMAL, É A DEFAULT, 
LEGAL PRA USAR ONDE O ESTILO DE TEXTO POR PADRÃO É BOLD,
 ITALIC, E VOCE QUER TIRAR.

----* TEXTO *----
class="text-monospace"                                              
DEFINE A FONTE NAQUELE LOCAL COMO MONOESPAÇADA, 
A LETRA DA EPOCA DAS MAQUINAS DE ESCREVER, 
NA QUAL TODAS AS LETRAS TEM UM
TAMANHO IGUAL, MESMO QUE MINUSCULAS OU MAIUSCULAS,
 EM RESUMO, LETRA DE MAQUINA DE ESCREVER
class="text-uppercase"
DEFINE A FONTE NAQUELE LOCAL COMO MAIUSCULA
class="text-lowercase"
DEFINE A FONTE NAQUELE LOCAL COMO MINUSCULA
class="text-capitalize"
DEFINE A FONTE NAQUELE LOCAL COMO A PRIMEIRA SOMENTE, MAIUSCULA

----* ALINHAMENTO DE TEXTO *----
class="text-right"
ALINHAR TEXTO A DIREITA
class="text-left"
ALINHAR TEXTO A ESQUERDA
class="text-center"
ALINHA AO CENTRO
class="text-justify"
JUSTIFICA O TEXTO PREENCHENDO TODOS
OS ESPAÇOS DISPONIVEIS NA HORIZONTAL(lindo)

----* CORTAR TEXTO *----
class="text-truncate"
CORTA O TEXTO, FAZ APARECER 3 PONTINHOS QUANDO ATINGE
O FIM DA TELA, AO INVES DE IR PRA OUTRA LINHA, ELE QUEBRA
E POE OS PONTOS, DIZENDO QUE TEM CONTINUAÇÃO.
QUANDO VOCÊ AUMENTA A TELA, ELE MOSTRA MAIS TEXTO, DIMINUI
E ELE MOSTRA MENOS TEXTO. QUANDO PASSA O MOUSE ENCIMA DO
TEXTO, APARECE O TEXTO COMPLETO(MAS SÓ NO SAFARI[tooltip]).


								-----------------------------------------


----*[TAGS]*----
(E ESTILIZAÇÃO PARA TAGS)



[bloco de citação]
Tag: <blockquote></blockquote>
class: blockquote
forma de usar:

<blockquote class="blockquote">
<p>Oi, eu sou um blockquote</p>
</blockquote>

DEIXA O TEXTO ALI UM POUQUINHO DESTACADO(MT FOFO)

(DA PRA FAZER UM FOOTER NESSE BLOCKQUOTE USANDO <footer></footer>)
			
			---------------------
[CITE, OU CITAÇÃO, OU, PESSOA QUE FEZ A CITAÇÃO, DATA DA CITAÇÃO]
<cite>
GERALMENTE USADO PRA DIZER A PESSOA QUE FEZ A CITAÇÃO, MUITO USADO
NO RODAPÉ DO BLOCKQUOTE
EM BLOCKQUOTE.(fica italico)

EX: 

<blockquote>
	<p>
		Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
    	tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
    	quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
    	consequat.
	</p>
	<footer>por
	<cite>Mrs. Solaris</cite>
	</footer>
</blockquote>
			---------------------

class="blockquote-footer"
<footer class="blockquote-footer"><cite>Mrs. Solaris</cite></footer>

ESTILIZA O FIM DO BLOCKQUOTE, (BOM PRA MOSTRAR QUEM ESCREVEU, APARECE ATÉ UM TRACINHO, FOFO)





								 ----*[LISTAS]*----

								class="list-unstyled"
								TIRA O ESTILO DE UMA UL,OL

								class="list-inline"
								DEIXA A UL,OL, NUMA LINHA,
								 DEVE SER USADO EM CONJUNTO COM:
								|___>class="list-inline-item"
										assim:

								  <ul class="list-inline">
								    <li class="list-inline-item">Item 1</li>
								    <li class="list-inline-item">Item 2</li>
								    <li class="list-inline-item">Item 3</li>
								  </ul>





                             -------- *[SUFIXOS]* --------

        DEFINE O ALINHAMENTO DE UM ELEMENTO QUANDO EM DETERMINADO DISPOSITIVO DE CERTO TAMANHO
		       sm = DE SMALL, USAMOS PARA TELAS MAIORES OU IGUAIS A *576px* 
		       md= DE MEDIUM, USAMOS PARA TELAS MAIORES OU IGUAIS A *768px*
		       lg = DE LARGE, USAMOS PARA TELAS MAIORES OU IGUAIS A *992px*
		       xl= DE EXTRA LARGE, USAMOS PARA TELAS MAIORES OU IGUAIS A *1200px*

		       O SEGREDO PARA ENTENDER ISSO, É PENSAR NA LOGICA DO xl pra o sm, 
		       ex:
		       SE A TELA FOR MAIOR QUE 992, O ELEMENTO FICA DO LADO ORDENADO, SE NÃO, NADA ACONTECE 
		       A LOGICA QUE SE SEGUE É QUASE QUE COMO UMA RÉGUA, OU BINARIO, SUPONDO QUE UM ELEMENTO 
		       TENHA TODAS ESSAS PROPRIEDADES, A PROPRIEDADE QUE ELE ATINGIR POR ULTIMO, É A QUE ELE 
		       ASSUMIRÁ.




SOBRE A RESPONSIVIDADE:
ENQUANTO O TAMANHO DA TELA NÃO ATINGIR PELO MENOS O SMALL, O SITE NÃO AUMENTA, É ASSIM QUE OS CELULARES EXIBEM SITES PEQUENOS
PORQUE NA VERDADE, O DEFAULT É O PADRÃO PRA CELULAR. QUANDO UMA TELA MAIOR APARECE, É DETECTADO, SE FOR MAIOR QUE O SMALL
FICA NO SMALL, SE FOR MAIOR QUE O MEDIUM, FICA NO MEDIUM, MAIOR QUE O LARGE, NO LARGE, E MAIOR QUE O EXTRA LARGE, NO EXTRA
LARGE
**** portanto o padrão é o menor valor **** POIS SE NÃO FOR NENHUM DELES, QUER DIZER QUE A TELA É PEQUENA,OU GIGANTESTICAMENTE
GRANDE, O QUE EXIGE TRATAMENTO, ENTÃO A TELA FICA NORMAL








					       ----- *[SUBSTITUTOS DE CARACTERES]* -----
							       &gt; simbolo de maior (>)
							       &copy; simbolo de copyright


        					----- *[RESPONSIVIDADE EM TEXTOS]* -----

        				    	alinhamento: left, right, center
        		O MODO DE ESCREVER É ASSIM: class="text-<tamanhoDaTela>-<alinhamento>">
        		<p class="text-sm-right text-md-center text-lg-right">Tela &gt;= 576px</p>

        					class="text-sm-right" : EXIBIÇÃO DO TEXTO EM TELAS SMALL
        					class="text-md-center" : EXIBIÇÃO DO TEXTO EM TELAS MEDIUM
        					class="text-lg-right" : EXIBIÇÃO DO TEXTO EM TELAS LARGE
        					class="text-xl-center" : EXIBIÇÃO DO TEXTO EM TELAS EXTRA LARGE


        							tamanhos: sm, md, lg, xl
		       						posições: right, left, center
      

					       SE A TELA FOR SMALL, O TEXTO SE ALINHA A DIREITA
					       SE A TELA FOR MEDIUM, O TEXTO SE ALINHA NO CENTRO
					       SE A TELA FOR LARGE, O TEXTO SE ALINHA A DIREITA
					       SE NAO FOR NENHUM DELES, O TEXTO FICA NO LUGAR PADRÃO



        -----*[CONVERTER ELEMENTO PARA INLINE / PARA BLOCK / PARA INLINE-BLOCK/ NAO MOSTRAR]* -----
	        			   		class="d-inline" / converter para inline
	        			   		class="d-block" /converter para block
	        			   		class="d-inline-block" / converter para inline block
	        			   		class="d-none" /OCULTAR eLeMeNTO



						[DEFINIR DISPLAY DO ELEMENTO BASEADO NO TAMANHO DA TELA:]
	        			   				d-tamanhoTela-block

	        			   					TAMANHO TeLA:

	        			   					sm, md, lg, xl
					<div class="col-md-6 d-none d-md-block">
           							 <img src="img/capa-mulher.png" style="pointer-events: none;"alt="Mulher sorridente, segurando moeda de 1 real">
         			 </div>


 				

 					         ----*[FIXAÇÃO DE ELEMENTOS, TOP/BOTTOM]*----
 					   		 modo de escrita: class="fixed-PARAM"
 					    			PARAM: top, bottom



 					    	   ----*[FIXAMENTO PEGAJOSO, STICKY]*----
 				     STICKY SÓ TEM O PARAMETRO TOPO, ELE NÃO GRUDA EMBAIXO SE VOCÊ ROLAR PRA CIMA
 			    COMPORTAMENTO: VOCE COLOCA class="sticky-top" NA DIV, E ELA FICARÁ FIXA NO ELEMENTO PAI
 				MAS SOMENTE ATÉ O MOMENTO QUE VOCE ROLA A PAGINA PRA BAIXO, QUANDO ELE IRÁ GRUDAR NO TOPO
					 				modo de escrita: class="sticky-top"
					 						  PARAM: top;



 					    	        ----*[FLOAT RESPONSIVO]*----
 					    	        	  MODO DE ESCRITA:
 					    	       	float-<tamanhoTela>-<tipoFloat>
 					    	       	   tamanhoTela: sm,md,lg,xl
 					    	       	   tipoFloat: left, right
 					    	       	     assim: float-sm-right



        				     ----*[FLOAT(ELEMENTOS FLUTUANTES)]*----

        				     
        						 class="float-left" /flutuação a esquerda
        						 class="float-right" /flutuação a direita
        						 class="float-none"/ tira a flutuação
        				**** ATENÇÃO AQUI, DO MESMO MODO QUE FORA DO BOOTSTRAP
        				ESSAS CAIXAS SAEM DO FLUXO NORMAL, NO BOOTSTRAP TAMBÉM, 
        				ENTÃO A CAIXA QUE CONTÉM AS DIVS FLUTUANTES, NÃO TEM ALTURA
        				TEM QUE ARRUMAR O FLUXO DE NOVO, PRA ISSO, [COLOQUE NO ELEMENTO PAI:]

					        				class="clearfix"  
					        				assim: 

					 				<div class="elemento-pai clearfix">
					   					<div class="float-left">Float left</div>
					  					<div class="float-right">Float right</div>
					 				</div>

				[SEMPRE QUE TIVER UM ELEMENTO PAI QUE TIVER FILHOS FLUTUANTES, APLIQUE ISSO NO PAI]
									      class="clearfix"  

 					       --------------- [CORES E BACKGROUND] ----------------

 					     OBVIAMENTE SE PODE COMBINAR A CLASSE DAS CORES COM A BACKGROUNDS
 					       				     ---*[cores]*---

 						SERVE PRA TODOS OS TIPOS DE TEXTO, LINK, TAG, DIV QUE CONTEM TEXTO ETC
 					       			text-primary: COR AZUL CELESTE
 					       		    text-secondary: COR CINZA
 					       		    text-success: COR VERDE 
 					       		    text-info:  COR AZUL MESCLADO COM VERDE
 					       		    text-warning: COR AMAREÇA
 					       		    text-danger: COR VERMELHA
 					       		    text-light: BRANCO GELO
 					       		    text-dark: QUASE PRETO, DEFAULT
 					       		    text-white: BRANCO
 					       		    text-black-50: PRETO COM 50% DE OPACIDADE <!--texto com opacidade de 50% UTIL PRA POR EM IMAGEM-->
 					       		    text-white-50: BRANCO COM 50% DE OPACIDADE <!-- TEXTO COM OPACIDADE DE 50%, UTIL PRA POR EM IMAGEM-->

 					       		    assim:

							 	<h1 class="text-primary">Texto primary</h1>
							    <h1 class="text-secondary">Texto secondary</h1>
							    <h1 class="text-success">Texto Success</h1>
							    <h1 class="text-info">Texto Info</h1>
							    <h1 class="text-warning">Texto Warning</h1>
							    <h1 class="text-danger">Texto Danger</h1>
							    <h1 class="text-light">Texto Light</h1> <!--cinza mt claro-->
							    <h1 class="text-dark">Texto Dark</h1><!--default-->
							    <h1 class="text-white">Texto White</h1>
							    <h1 class="text-black-50">Texto Black 50</h1>
							    <h1 class="text-white-50">Texto White 50</h1>

							    <a href="" class="text-primary">Texto primary</a>
							    <br>
							    <a href="" class="text-secondary">Texto secondary</a>
							    <br>
							    <a href="" class="text-success">Texto Success</a>
							    <br>
							    <a href="" class="text-info">Texto Info</a>
							    <br>
							    <a href="" class="text-warning">Texto Warning</a>
							    <br>
							    <a href="" class="text-danger">Texto Danger</a>
							    <br>
							    <a href="" class="text-light">Texto Light</a> <!--cinza mt claro-->
							    <br>
							    <a href="" class="text-dark">Texto Dark</a><!--default-->
							    <br>
							    <a href="" class="text-white">Texto White</a>
							    <br>
							    <a href="" class="text-black-50">Texto Black 50</a><!--texto com opacidade de 50% UTIL PRA POR EM IMAGEM-->
							    <br>
							    <a href="" class="text-white-50">Texto White 50</a><!-- TEXTO COM OPACIDADE DE 50%, UTIL PRA POR EM IMAGEM-->


							    			---*[background]*---


								  		bg-primary: COR AZUL CELESTE
	 					       		    bg-secondary: COR CINZA
	 					       		    bg-success: COR VERDE 
	 					       		    bg-info:  COR AZUL MESCLADO COM VERDE
	 					       		    bg-warning: COR AMAREÇA
	 					       		    bg-danger: COR VERMELHA
	 					       		    bg-light: BRANCO GELO
	 					       		    bg-dark: QUASE PRETO, DEFAULT
	 					       		    bg-white: BRANCO
	 					       		    bg-transparent: TRANSPARENTE

	 					       		          ----*[MARGIN]*----
	 					       		     		 medida-N
	 					       	   	onde n é um valor em REM de 0 a 5
	 					       	   				 0 É DEFAULT
	 					       	   				NÃO É EM PIXELS


	 					       	   			   modo de escrita:
	 					       	   			   	class="mt-2"
	 					       		          
	 					       		          mt: MARGIN-TOP
	 					       		          mb: MARGIN-BOTTOM
	 					       		          ml: MARGIN-LEFT
	 					       		          mr: MARGIN-RIGHT
	 					       mx: MARGIN NO EIXO X | margem horizontal - esquerda e direita
	 					       			 [QUASE QUE COMO UM MARGIN AUTO]
	 					      	 my: MARGIN NO EIXO Y | margem vertical - TOP E BOTTOM
	 					      	         [QUASE QUE COMO UM MARGIN AUTO]
	 					      	         (legal combinar mx-valor com my-0)
	 					      	          m :MARGEM PRA TODOS OS LADOS
	 					       		     
	 					       		          ----*[PADDING]*----

	 					       		         MEDIDA-n

	 					       		         MEDIDAS:
	 					       		          pt: PADDING-TOP
	 					       		          pb: PADDING-BOTTOM
	 					       		          pr: PADDING-RIGHT
	 					       		          pl: PADDING-LEFT
	 					       		          px: PADDING NA HORIZONTAL - ESQUERDA E DIREITA
	 					       		          py: PADDING NA VERTICAL - TOP E BOTTOM
	 					       		          p: PADDING EM TODAS AS DIREÇÕES

	 					       		         se escreve:

	 					       		          class="p-N"
	 					       		          class="pt-N"

	 					       		        onde n é um valor em REM de 0 a 5
	 					       	   				 0 É DEFAULT
	 					       	   				NÃO É EM PIXELS

	 					       		     ----*[WIDTH]*----
	 					       		     	  ALTURA

	 					       		    	modo de escrita:
	 					       		    	  class="w-N"

	 					       		    ONDE N PODE VARIAR ENTRE:
	 					       		    [25, 50, 75, 100, auto]

	 					       		    auto: pega o espaço disponivel

	 					       		    	ex: 
	 					       		<div class="bg-primary w-25">width 25%</div>

	 					       			----*[HEIGHT]*----

	 					       		    modo de escrita:
	 					       		     class="h-N"


									   ONDE N PODE VARIAR ENTRE:
	 					       		    [25, 50, 75, 100, auto]
									auto: pega o espaço disponivel

	 					       		    	ex: 
	 					       		<div class="bg-primary h-25">height 25%</div>

	 					       			----*[BORDAS]*----

	 					       			border ou border-PARAM
	 					       	  SEM PARAMETRO APLICA EM TODOS OS LADOS


	 					       			modo de escrita:

	 					       		class="border" ou class="border-PARAM"

	 					       		PARAM: LEFT, RIGHT, TOP, BOTTOM

	 					       		*** PARA APLICAR COR NESSAS BORDAS
	 					       		É NECESSARIO ESCREVER ESSA CLASSE
	 					       		E MAIS UMA OUTRA: ******

	 					       		class="border-cor"

	 					       		onde cor: primary, secondary, success,
	 					       		info, warning, danger, light, dark, 
	 					       		white, transparent.


	 					       		ASSIM: 

	 					    <div class="bg-white mb-2 border-top border-danger">todas as bordas</div>


	 					    [TEM QUE COLOCAR NA CLASSE: border-PARAM e depois border-COR]

	 					    			----*[ARREDONDAMENTO]*----
	 					    				ARREDONDAMENTO
	 					    			rounded-PARAM ou rounded

	 					    		ONDE PARAM: top,right, left, bottom, circle

	 					    		circle= vira circulo(tem q por width, n fica mt bom)


	 						--------------*[MEDIA-QUERIES]*----------------

								Media queries (Links úteis)
								Tipos de mídias:

								all – todos os dispositivos

								aural – sintetizadores de voz

								braille – leitores de Braille

								embossed – impressoras de Braille

								handheld – dispositivos de mão. Por exemplo: celulares com telas pequenas.

								print – impressoras convencionais

								projection – apresentações de slides

								screen – monitores coloridas

								tty – teleimpressores e terminais

								tv – televisores



								Exemplo de utilização:

								<link rel="stylesheet" media="print" href="print.css" /> 

								Exemplos de resoluções de telas:

								￼320 pixels – Smartphones no modo retrato.

								480 pixels – Smartphones no modo paisagem.

								600 pixels – Tablets pequenos. Ex: Amazon Kindle (600×800)

								￼768 pixels – Tablets maiores em modo retrato. Ex: iPad (768×1024)

								1024 pixels – Tablets maiores em modo paisagem, monitores antigos.

								￼1200 pixels – Monitores wide.

								Links de media queries no Bootstrap:

								https://getbootstrap.com/docs/4.1/layout/overview/

								Exemplos de utilização media queries:

								@media (min-width: 576px) { ... }


------ DE CERTA FORMA, O SMALL, MEDIUM, LARGE E EXTRA LARGE SÃO MEDIA QUERIES, MAS DO MODO @media, nós criamos a nossa -----
		

								@ (min-width: PARAM){
									CODIGO
								}

			@media é o media query, min-width define a largura na qual aquele codigo dentro do query será executado


												ASSIM:
												@media(min-width: 576px;){
													body{
														background: pink;
													}
      											}
      			BASICAMENTE VOCE DECIDE O QUE ACONTECE QUANDO A LARGURA ATINGE UM DETERMINADO TAMANHO;
      										ISSO SE CHAMA BREAKPOINT.
      							BASICAMENTE ESTAMOS USANDO MEDIA QUERY PARA CRIAR BREAKPOINTS
      							BREAKPOINTS SÃO OS PONTOS ONDE, EM DETERMINADA LARGURA, 
      									O LAYOUT MUDA DE FORMATO, COR ETC.

      		MAX WIDTH DEFINE O QUE ACONTECE ABAIXO, OU QUANDO AQUELE TAMANHO É IGUAL AO QUE ESTÁ NOS PARENTESES
      		AO CONTRARIO DE MIN QUE DEFINE O QUE ACONTECE QUANDO ELE É MAIOR OU IGUAL.
      		EX:

      		@media(max-width: 575px){
       			 body{
         			 background: purple;
       			}	
      		}


      		OU SEJA, NO EXEMPLO ACIMA, DISPOSITIVOS QUE TIVEREM 575px DE LARGURA OU MENOS, IRÃO VER UM FUNDO
      		ROXO.



      		COMBINANDO OS VALORES, PARA MAIOR OTIMIZAÇÃO, É BOM USAR O PADRÃO:
      			[ESSE AQUI É O PADRÃO, PODE ATÉ COPIAR]

 							/*Extra small devices (portrait phones, less than 576px)*/
						     @media (max-width: 575.98px) {
						     O QUE ACONTECE PARA DISPOSITIVOS MENORES OU IGUAIS A 575.98PX DE LARGURA
						     }

						    /*Small devices (landscape phones, 576px and up)*/
						    @media (min-width: 576px) and (max-width: 767.98px) { 
						      
						      O QUE ACONTECE PARA DISPOSITIVOS MAIORES QUE 576 E MENORES QUE 767.98PX
						       }

						    /* Medium devices (tablets, 768px and up)*/
						    @media (min-width: 768px) and (max-width: 991.98px) { 
						      O QUE ACONTECE PARA DISPOSITIVOS MAIORES QUE 768 E MENORES QUE 991.98PX
						       }

						    /* Large devices (desktops, 992px and up)*/
						    @media (min-width: 992px) and (max-width: 1199.98px) {
						     O QUE ACONTECE PARA DISPOSITIVOS MAIORES QUE 992 E MENORES QUE 1199.98PX
						      } [É OBRIGATORIO TER ESPAÇO ENTRE O PARENTESE E O AND]

						    /* Extra large devices (large desktops, 1200px and up)*/
						    @media (min-width: 1200px) { 
						      O QUE ACONTECE PARA DISPOSITIVOS MAIORES OU IGUAIS QUE 1200PX
						      (MAIORES QUE ISSO TERÃO ESSA VISUALIZAÇÃO, UM PC COM TELA GRANDE VAI VER O MESMO SITE,
						      	QUE UMA TV)
						       }

					-----------------------------------------------------------
						     SE QUISER FAZER NA MÃO:

						     PROGRAME DE BAIXO PRA CIMA, MAX WIDTH PARA MENORES OU IGUAIS A SMALL(576) DESCE UMA CASA
						     E ADCIONA .98 NO FIM. ASSIM :

						     576-1 = 575.

						     575+0.98 = 575.98

						     SEMPRE QUE TIVER QUE USAR MAX WIDTH, DESÇA UMA CASA NO VALOR PADRÃO, E ADCIONE .98 NO FIM


						     PARA VALORES QUE NÃO SEJAM SMALL OU EXTRA LARGE, VOCE PRECISA
						     COMBINAR VALORES, MAIOR A IGUAL A UM, E MENOR OU IGUAL A OUTRO.
						      EX:


			  @media(min-width: umDosTamanhosPadrão) and (max-width: umDosTamanhosPadraoMenosUmMaisZeroPontoNoventaEOito)

			  ASSIM:

			  	MAIOR OU IGUAL A LARGE   E    MENOR OU IGUAL A EXTRA LARGE
			   @media (min-width: 992px) and (max-width: 1199.98px) {
			    O QUE ACONTECE PARA DISPOSITIVOS MAIORES QUE 992 E MENORES QUE 1199.98PX
			   }


			   E PARA EXTRA LARGE OU MAIOR USE: min-width:1200px(NÃO COMBINA COM NADA, ELE É SOZINHO)

			   [A ORDEM PARA PROGRAMAR TODOS OS DISPOSITIVOS: max-width, min and max(3x) min-width]

			   BASICAMENTE:

			   [@media(min-width: 992px) and (max-width: 1199.98px){
			   	CODIGO
			   }
			   	MIN-WIDTH NESSE CASO SIGNIFICA: IGUAL Á AQUELE OU MAIOR QUE AQUELE VALOR.
			   	SE A LARGURA FOR IGUAL OU MAIOR A AQUELE VALOR, O CODIGO
			   	NAQUELA ÁREA É APLICADO : O VALOR MINIMO QUE A TELA DEVE ATINGIR, PARA ENTRAR ALI

			   	MAX-WIDTH NESSE CASO SIGNIFICA IGUAL OU MENOR DO QUE AQUELE VALOR. SE A LARGURA FOR IGUAL OU MAIOR A
			   	AQUELE VALOR, O CODIGO NAQUELA AREA É APLICADO.

			   	OU SEJA, TEM QUE SER IGUAL OU MAIOR DO QUE O MIN WIDTH, E MENOR OU IGUAL A MAX WIDTH, FAZENDO
			   	COM QUE O CODIGO NAQUELA AREA, SO SEJA APLICADO, PARA QUALQUER VALOR, ENTRE ESSES DOIS, VALORES


			    ]

			 ----------------------------*[BOTÕES]*--------------------------------------
			 [ESTRUTURA E COR]
			 FORMATAÇÃO/TAG PADRÃO: 
			 <button type="button" class="btn"></button>

			 CLASSE QUE VAI NA TAG:
			  class="btn"

			 PARA COLOCAR COR NO BOTÃO: 
			 class"btn btn-PARAM" 


			 [ASSIM : ]

			 [CORES:]

			   ** <button class="btn btn-primary" type="button">Clique</button>
			 		ONDE PARAM:	
			 		btn-primary: COR AZUL CELESTE
	 			    btn-secondary: COR CINZA
	 				btn-success: COR VERDE 
	 				btn-info:  COR AZUL MESCLADO COM VERDE
	 				btn-warning: COR AMAREÇA
	 				btn-danger: COR VERMELHA
	 				btn-light: BRANCO GELO
	 				btn-dark: QUASE PRETO, DEFAULT
	 				btn-white: BRANCO
	 				btn-link: DEIXA O BOTÃO SEM FUNDO, COM APARENCIA DE LINK
	 			**	

	 			[DÁ PRA APLICAR EM PRATICAMENTE TODOS OS ELEMENTOS, MAS É MELHOR USAR PRA ELEMENTOS, COMO
	 			SPAN, A, BUTTONS, DIVS]

	 			É NECESSARIO USAR A CLASS btn, E DEPOIS a btn-cor ASSIM PRIMEIRO O ELEMENTO
	 			FICA COM APARENCIA DE BOTÃO, E DEPOIS COM A COR 

	 			 SE NAO USA BTN O BOTÃO FICA NO FORMATO PADRÃO, QUADRADO

	 						** ja vem arredondado e com hover **

	 			PARA COLOCAR BORDA NO BOTÃO:


	 			[BORDA: ]


	 			class="btn btn-outline-COR" (CHEQUE AS CORES ACIMA, INFO, SUCCES..)

	 			[O BOTÃO FICA BRANCO COM A BORDA DA COR QUE VOCE DEFINIU, E NO HOVER, A COR DA BORDA VIRA A
	 			COR DO BOTÃO ]

	 			[TAMANHO: ]
	 			ESCRITA: btn-TAMANHO

	 			ONDE TAMANHO: lg (large), sm(small) GRANDE/PEQUENO
	 			*para tamanho normal basta não definir essa classe*

	 			assim:

	 			class="btn btn-lg"

	 			[BOTÃO BLOCO(OCUPA TODO ESPAÇO)]

	 			class="btn-block"


	 			[ESTADO DOS BOTÕES, ATIVO/INATIVO]

	 			class="active" ou class="disabled"

	 			[**** ATENÇÃO, ISSO NÃO É UMA CLASSE, MAS PODE USAR UMA CLASSE
	 			NESSE ATRIBUTO, ESSA CLASSE É : button 
	 			ASSIM:

	 			data-toggle="button" 

	 			ESSE ATRIBUTO ALTERNA ENTRE O ESTADO NORMAL DO BOTÃO, E O ATIVO,
	 			OU SEJA, ENTRE O BOTÃO NÃO CLICADO, E O BOTÃO PRESSIONADO,
	 			DANDO A IMPRESSÃO DE QUE APÓS CLICAR, ELE CONTINUA SELECIONADO.
	 			****]
                

                <button class="btn btn-dark" data-toggle="button" type="button">Alternar</button>

	 			[BTN GROUP(GRUPO DE BOTOES)]

	 			*** GRUPO DE BÕTÕES HORIZONTAL***

	 			CRIA UM GRUPO DE BOTÕES, PARA ISSO CRIE UMA DIV PARA ABRIGAR TODOS
	 			OS BOTÕES QUE FARÃO PARTE DO GRUPO, COLOQUE BOTOES DENTRO DESSA DIV,
	 			E NESSA DIV PAI, COLOQUE A CLASSE: class="btn-group"(NO ELEMENTO PAI,
	 				NAO PRECISA COLOCAR btn, SÓ btn-group. NOS FILHOS SIM, COLOQUE btn) 
	 			ASSIM:

	 			<h3>Grupos de botões - horizontal</h3>
			    <div class="btn-group">
			        <button class="btn btn-outline-danger" type="button">Esquerda</button>
			        <button class="btn btn-outline-danger" type="button">Centro</button>
			        <button class="btn btn-outline-danger" type="button">Direita</button>
			    </div>


			    ***GRUPO DE BOTÕES VERTICAL***
			    CRIA UM GRUPO DE BOTÕES VERTICAL, PARA ISSO CRIE UMA DIV PARA ABRIGAR TODOS
	 			OS BOTÕES QUE FARÃO PARTE DO GRUPO, COLOQUE BOTOES DENTRO DESSA DIV,
	 			E NESSA DIV PAI, COLOQUE A CLASSE: class="btn-group-vertical"(NO ELEMENTO PAI,
	 				NAO PRECISA COLOCAR btn, SÓ btn-group. NOS FILHOS SIM, COLOQUE btn) 
	 			ASSIM:

	 			[BTN TOOLBAR]

	 			AGRUPA UM GRUPO DE BOTÕES, USE:

	 			class="btn-toolbar"
	 			(não precisa de btn, só btn toolbar)

	 			ASSIM:
	 			<div class="btn-toolbar">
			        <div class="btn-group">
			           <button class="btn btn-warning" type="button">1</button>
			           <button class="btn btn-warning" type="button">2</button>
			           <button class="btn btn-warning" type="button">3</button>
			        </div>
			        <div class="btn-group">
			            <button class="btn btn-warning" type="button">4</button>
			            <button class="btn btn-warning  " type="button">5</button>
			        </div>
			    </div>


			    [BOTÕES DROPDOWN(clica e desce um menu)]

			    PRIMEIRO, A DIV MAIS EXTERNA DEVE ABRIGAR UM BOTÃO QUE SERÁ RESPONSÁVEL POR ABRIGAR
			    O MENU. ESSA CLASSE É: class="dropdown".

			    DEPOIS DA DIV COM ESSA CLASS PONHA UM BUTTON COM A SEGUINTE CLASS: class="dropdown-toggle" 
			    A CLASSE="btn btn-cor" E O ATRIBUTO: data-toggle="dropdown" E O type="button"

			    DEPOIS MAIS INTERNAMENTE, COLOQUE UMA OUTRA DIV E NESSA OUTRA DIV, OS LINKS QUE VOCE
			     QUER DENTRO DO MENU DO BOTÃO, NESTE DIV PONHA: class="dropdown-menu"

			     NOS LINKS, PONHA: class="dropdown-item"

			     PARA CRIAR UMA DIVISORIA ENTRE OS ITENS: class="dropdown-divider"

			     FICA ASSIM:


			     	<div class="dropdown">
				        <button class="dropdown-toggle btn btn-danger" data-toggle="dropdown" type="button">
				            Clique
				        </button>
				        <div class="dropdown-menu">
				            <a href="#" class="dropdown-item">Link 1</a>
				            <div class="dropdown-divider"></div>
				            <a href="#" class="dropdown-item">Link 2</a>
				            <div class="dropdown-divider"></div>
				            <a href="#" class="dropdown-item">Link 3</a>
				        </div>
			   		 </div>

			     EM SEQUENCIA: dropdown, dropdown-toggle, dropdown-menu, dropdown-item, dropdown-divider

			    				-------------*[NAVEGAÇÃO]*--------------	

			    					   PARA CRIAR UMA NAVEGAÇÃO:
			    					SE APLICA NA UL (<ul>): class="nav"
			    						NAS <li>: class="nav-item"
			    						E NOS LINKS DENTRO DAS LI:
			    						class="nav-link"

			    				AUTOMATICAMENTE ELE FICA HORIZONTAL, COM PADDING, E COR

			    			PARA MARCAR A PAGINA QUE ESTÁ ATIVA BASTA FAZER AQUELE ESQUEMA
			    			(TÁ ANOTADO AQUI, DE SELECIONAR UMA CLASSE DENTRO DE UMA ID,
			    				QUE SÓ EXISTE EM UMA DETERMINADA PAGINA DO SITE)
			    			AS CLASSE QUE VOCE DEVE COLOCAR NA <ul> PRA CUSTOMIZAR ISSO
			    			PODEM SER : nav-pills, ou nav-tabs.


			    			COLOQUE NA UL NAV-PILLS OU NAV-TABS E NO LINK COLOQUE A CLASS:

			    			[class="active"] PARA MARCAR A PAGINA


			    				TABS: CRIA UM MENUZINHO COM UMA LINHA EMBAIXO
			    					 ____
			    				nome|nome|nome
			    				____|    |____


			    				PILLS: CRIA UMA CAIXINHA NO ITEM SELECIONADO.

			    					  ______
			    				nome | nome | nome
			    					  ******

			    			[JUSTIFICAR MENU]:
			    			(COLOCAR NA UL)
			    			ALINHAR AO CENTRO:
			    			class="justify-content-center"

			    			ALINHAR A DIREITA:
			    			class="justify-content-end"

			    			PARA JUSTIFICAR A ESQUERDA É SÓ NAO POR NADA


			    			[MENU HORIZONTAL/VERTICAL]
			    			COLOCAR NA UL:

			    			class="flex-column" (fica estranho deixar assim com nav-tabs)
			    			<ul class="nav nav-pills justify-content-end flex-column">

			    			[DESABILITAR LINK DO MENU]:

			    			class="disabled"
			    			<li class="nav-item"><a href="" class="nav-link">Nome 1</a></li>


			    				UM MENU NAV SIMPLES:

			    				<nav>
							        <ul class="nav nav-pills justify-content-center">
							            <li class="nav-item">
							            	<a href="" class="nav-link">Nome 1</a>
							            </li>
							            <li class="nav-item">
							            	<a href="" class="nav-link active">Nome 2</a>
							            </li>
							            <li class="nav-item">
							            	<a href="" class="nav-link disabled">Nome 3</a>
							            </li>
							        </ul>
							    </nav>




			    							[NAVEGAÇÃO COM NAVBAR(barra)]
			    						   ABRE UMA BARRA QUE POSICIONA OS
			    							     ITENS DA NAVEGAÇÃO:

			    							       class="navbar"

			    							      o que vai dentro:

			    					   CRIA UM MENU QUE VAI DENTRO DESSA BARRA:

			    							<ul class="navbar-nav">

			    							DENTRO DA UL VAI O MESMO QUE A 
			    							NAVEGAÇÃO NORMAL:

			    							li class="nav-item", <a class="nav-link"

			    					ESSE MENU FICARÁ NA VERTICAL, PARA POR NA HORIZONTAL INSIRA EM <nav>:

			    									class="navbar-expand-TAMANHOTELA"

			    									onde o tamanho tela diz respeito a:

			    									sm= telas de 576px
			    									md= telas de 768px
			    									lg= telas de 992px
			    									xl= telas de 1200px ou mais

			    									EX: 

			    									navbar-expand-sm

			    						[tem que colocar o expand ou fica na horizontal]

			    						(PARA SETAR UM VALOR SÓ, PONHA SMALL, POIS, AQUELE MENU SO 
			    							VAI PARA A HORIZONTAL EM DISPOSITIVOS QUE NÃO FOREM UM 
			    							CELULAR. MAIORES QUE 576PX)


			    					[COR DE FUNDO E TEXTO DE UMA navbar]

			    							COR DO TEXTO :
			    							class="navbar-COR"

			    							  COR: light, dark

			    							PARA USAR COR: bg-COR

			    							primary, secondary...


			    						[LOGO EM TEXTO DE UMA NABBAR]

			    							class="navbar-brand"

			    							DENTRO DO LINK NA NAVBAR

			    				<a href="" class="text-secondary navbar-brand">Chalé Hotel</a>

			    						[ALINHAR ITENS DENTRO DA NAVBAR]
			    								COLOCAR NA <ul>
			    						class="ml-auto" PARA ALINHAR A DIREITA
			    					(ESTRANHO, MAS ISSO JOGA O MENU PRA A DIREITA)


			    						[DÁ PRA MARCAR O ATIVO DE UMA NAVBAR TAMBEM]
			    							<a class="active" href=""
			    							  UMA NAVBAR PADRÃO:

			    			<nav class="navbar navbar-expand-sm navbar-dark bg-dark">
           						<a href="" class="text-secondary navbar-brand text-light">Chalé Hotel</a>
						        <ul class="navbar-nav ml-auto">
						            <li class="nav-item"><a class="nav-link" href="">Home</a></li>
						            <li class="nav-item"><a class="nav-link" href="">Sobre</a></li>
						            <li class="nav-item"><a class="nav-link" href="">Contato</a></li>
						        </ul>
						    </nav>


						   --------- [MENU HAMBURGUER, (PRA CELULAR, RESPONSIVO)]-----------

						   *******[Se NAO DeFINIR A COR DO LINK DO NAVBAR, N FUNCIONA]********

						   DENTRO DA NAVBAR, COLOQUE UM BUTTON, E NESSE BUTTON, COLOQUE A CLASS:
						   class="navbar-toggler" E OS ATRIBUTOS: data-toggle="collapse", data-target="#target"

						   *(PARA MUDAR A FORMATAÇÃO DO BOTÃO, A BORDA POR FORA, A COR, ETC, SOBRESCREVA A CLASSE
						   	APLICADA PELO BOOTSTRAP, ASSIM:


						   	.navbar-light/dark .navbar-toggler{

						   	}

						   	)




						   E DENTRO DO BUTTON, UM SPAN COM A CLASS:

						   class="navbar-toggler-icon"
						   *(SE QUISER OUTRO ICONE, É SO ESCOLHER DO SITE DE ICONES, E COPIAR O CODIGO QUE ELES
						   DÃO, SÓ JOGAR ELE LÁ DENTRO NO LUGAR DESSE SPAN]


						   ASSIM: 
						   <button class="navbar-toggler" data-toggler="collapse" data-target="#targeti">
						   		<span class="navbar-toggler-icon">
						   		</span>
						   </button>


						   	DEPOIS É SÓ CRIAR A UL QUE VOCE CRIARIA NORMALMENTE, COLOCAR ELA DENTRO DE UMA DIV, 
						   	E APLICAR NESTA DIV As CLASSEs: 

						   	class="collapse"(ESSA CLASSE OCULTARÁ OS CONTEUDOS)
						   	class="navbar-collapse" (IDENTIFICA QUE ESSE É O MENU A SER ESCONDIDO)

						   	E UMA ID, EU VOU FAZER DISSO UM PADRÃO ENTÃO PONHA target

						   	id="targeti" (LA ENCIMA NO BUTTON COLOQUE O NOME COM #, AQUI PONHA SEM)
						   *(SE TIVER MAIS DE UM MENU ASSIM NO SITE, ELAS NAO PODEM TER O MESMO ID]





						   	E DENTRO DA UL NUNCA ESQUEÇA DE POR class="navbar-nav ml-auto" ml-auto pra deixar o menu
						   	do lado.






						   	OS <LI> VOCE JA SABE: nav-item, e <a> nav-link
						   	*(PARA MUDAR A COR DOS LINKS DA NAVBAR, SOBRESCREVA A CLASSE EXISTENTE COM OUTRA
						   	MAS TEM QUE SER TÃO ESPECIFICA QUANTO ELA, A CLASSE É FORMATADA ASSIM

						   	.navbar-light/dark .navbar-nav .nav-link{
						   	}

						   	É SO COLOCAR ISSO NO SEU ESTILO CSS E COLOCAR A COR, ETC.

						   	]

						   		SE QUISER COLOCAR ESSE MENU APARECENDO SÓ PRA SMALL OU MENORES COLOQUE SM NA NAVBAR
						   		(<nav>.
						   		SE QUISER COLOCAR DE DISPOSITIVOS MEDIOS OU MENORESO, COLOQUE MD.
						   		O MESMO PARA lg, e xl, 
						   			MAS COLOQUE MD, PRA TABLET ESSE MENU TAMBÉM É BOM.
											    	PORQUE?? 
									PQ SE NÃO DEIXAR ISSO,ELE VAI MOSTRAR ESSE ICONE PRA TODOS
									  OS TAMANHOS, E SÓ QUEREMOS QUE APAREÇA QUANDO ELE FOR SMALL
									  (SE QUISER USAR ESSE MENU ESCONDIDO EM TABLET TB, COLOCA MD
									  	PORQUE EU POSSO TER UM MENU GRANDE DEMAIS PRA TABLET)

									  [ALEM DISSO É NECESSARIO DEFINIR ESSA CLASSE PRA DISPOSITIVOS PEQUENOS
									  OU ELA EXIBIRÁ UM MENU NA VERTICAL ATÉ PRA PC]

									  <nav class="navbar navbar-expand-md"


										MODELO PADRÃO, FICA ASSIM: (PODE ATÉ COPIAR)


										<nav class="navbar navbar-expand-md bg-danger navbar-dark">
									        <!--logo -->
									        <a href="" class="navbar-brand">Mrs. Solaris</a>
									        <!--botão-->
									        <button class="navbar-toggler" data-toggle="collapse" data-target="#targeti">
									           <span class="navbar-toggler-icon"></span>
									        </button>
									        <!--navegação-->
									        <div class="collapse navbar-collapse" id="targeti">
									            <ul class="ml-auto navbar-nav justify-content-center">
									                <li class="nav-item"><a href="" class="nav-link">Home</a></li>
									                <li class="nav-item"><a href="" class="nav-link">Sobre</a></li>
									                <li class="nav-item"><a href="" class="nav-link">Contato</a></li>
									                <li class="nav-item"><a href="" class="nav-link">Fotos</a></li>
									            </ul>
									        </div>   
									    </nav>


						 ------------------- [BARRA DE NAVEGAÇÃO COM PESQUISA(navbar)]-----------------


						 USE A NAVBAR RESPONSIVA PARA ISSO, E DENTRO DA DIV COLLAPSE, DEPOIS DA NAVEGAÇÃO(<UL>)
						 COLOQUE UMA <form> QUE ABRIGARÁ A CAIXA DE BUSCA, NESSA <form> COLOQUE A CLASSE:

						 class="form-inline" PARA DEIXAR A LISTA COM ITENS LADO A LADO

						 E DENTRO DO FORM UMA IMPUT COM AS CLASSES E ATRIBUTOS ABAIXO:

						 <input type="text" class="form-control" placeholder="Pesquisar...>

						 E UM BOTÃO PARA PESQUISAR, COMO JA CONHECEMOS:

						 <button class="btn btn-COR">Ok</button>

						 -------------------- [BARRA DE NAVEGAÇÃO COM DROPDOWN (navbar)] -----------------------

						 USE A NAVBAR RESPONSIVA PRA ISSO. SERÃO COLOCADOS OS ITENS QUE CADA OPÇÃO DO MENU DEVE
						 EXIBIR, DENTRO DAS LIS CORRESPONDENTES. PORTANTO VÁ ATÉ A <li> QUE VOCE QUER QUE EXIBA
						 UM MENU DENTRO E COLOQUE UMA DIV QUE TENHA LINKS DENTRO. 

						1  DEPOIS APLIQUE NA <li> NA QUAL DESEJA O MENU: 

						 class="dropdown" ALEM DA CLASSE QUE JÁ DEVE ESTAR, A : class="nav-item"

						2  NO LINK DA LI COLOQUE(NOME NO QUAL SE CLICA):

						   class="dropdown-toggle" E data-toggle="dropdown" ALEM DA CLASSE QUE JA DEVE ESTAR, A :
						  class-"nav-link"

						3  NA DIV QUE CONTÉM OS LINKS, COLOQUE:

						  class="dropdown-menu"
						4 NOS LINKS DENTRO DA DIV PONHA:

						class="dropdown-item"

						ASSIM:

						 <nav class="navbar navbar-expand-md bg-secondary navbar-dark">
				        <!--logo -->
				        <a href="" class="navbar-brand">Mrs. Solaris</a>
				        <!--botão-->
				        <button class="navbar-toggler" data-toggle="collapse" data-target="#targeti">
				           <span class="navbar-toggler-icon"></span>
				        </button>
				        <!--navegação-->
				        <div class="collapse navbar-collapse" id="targeti">
				            <ul class="ml-auto navbar-nav justify-content-center">
				                <li class="nav-item dropdown">
				                    <a href="" class="nav-link dropdown-toggle" data-toggle="dropdown">Home</a>
				                    <div class="dropdown-menu">
				                        <a href="" class="dropdown-item">Nome</a>
				                        <a href="" class="dropdown-item">Nome</a>
				                        <a href="" class="dropdown-item">Nome</a>
				                        <a href="" class="dropdown-item">Nome</a>
				                    </div>
				                </li>
				              </ul>

				               <li class="nav-item dropdown">
			                    <a href="" class="nav-link dropdown-toggle" data-toggle="dropdown">Sobre</a>
			                    <div class="dropdown-menu">
			                        <a href="" class="dropdown-item">Nome</a>
			                        <a href="" class="dropdown-item">Nome</a>
			                        <a href="" class="dropdown-item">Nome</a>
			                        <a href="" class="dropdown-item">Nome</a>
			                    </div>
			                </li>

				         </div>
				         </nav>

						[A PROPRIEDADE DATA-TOGGLE DITA O QUE VAI ACONTECER QUANDO VOCE CLICAR:

						COLLAPSE: ESCONDE, CONTRAI E DESCONTRAI
						DROPDOWN: JOGA O CONTEUDO PRA BAIXO QUANDO CLICA
						]


						PARA COLOCAR O MENU FIXO NO TOPO, HÁ DUAS OPÇÕES:

						class="fixed-top" ou class="sticky-top"

						[USAR ESSA CLASSE NA NAVBAR AS VEZES FAZ COM QUE NAO MOSTRE O FUNDO DO BODY. ISSO
						É CORRIGIVEL APOS COLOCARMOS CONTEUDO NO BODY]
						FIXED TOP JÁ COMEÇA FIXA NO TOPO, STICKY FICA ONDE ESTÁ ATÉ ROLAR A PAGINA
						QUANDO ELA GRUDA NO TOPO. (gosto de fixed)



		-------------------- *[BARRA DE NAVEGAÇÃO QUE LINKA PARA PARTES DA PAGINA]* ------------------------


		/*


		SE CHAMA MENU SPY. APARECE NAQUELES SITES ONDE NAO SE PRECISA REDIRECIONAR VOCE PARA OUTRAS PAGINAS
		QUANDO VOCE CLICA NO MENU. QUANDO VOCE CLICA EM UM ITEM DO MENU, ELE TE LEVA PRA A PARTE DA PAGINA
		QUE AQUELE LINK REPRESENTA.

		A COISA TODA É BEM SIMPLES. BASTA COLOCAR POR EXEMPLO, SUA PARTE DE CONTATOS DENTRO DE UMA DIV COM
		UM ID PROPRIO, E ASSIM PARA TODAS AS OUTRAS PARTES QUE VOCE QUER QUE O MENU REDIRECIONE.
		DEPOIS, COLOCAR NO HREF DO LINK DO MENU, O ID DO ELEMENTO PRO QUAL AQUELE LINK DEVE REDIRECIONAR
		COM A CERQUILHA.


		*/

		ASSIM:

			<li class="nav-item"><a href="#text1" class="nav-link">Sessão 1</a></li>
            <li class="nav-item"><a href="#text2" class="nav-link">Sessão 2</a></li>
            <li class="nav-item"><a href="#text3" class="nav-link">Sessão 3</a></li>
            <li class="nav-item"><a href="#text4" class="nav-link">Sessão 4</a></li>

            <div id="text1">
            <section><p>lorem</p></section>
            </div>

            <div id="text2">
            <section><p>lorem</p></section>
            </div>


            <div id="text3">
            <section><p>lorem</p></section>
            </div>


            <div id="text4">
            <section><p>lorem</p></section>
            </div>

/*
            AO CLICAR NO LINK CORRESPONDENTE DO MENU, VOCÊ É AUTOMATICAMENTE LEVADO PARA A PARTE DA PAGINA
            EM QUE AQUELE ELEMENTO ESTÁ.
*/	

							------------------*[TOOLTIP]*-------------------



					PARA USAR O TOOLTIP DO BOOTSTRAP É NECESSÁRIO USAR NO LINK O ATRIBUTO :

							data-toggle="tooltip" E title="conteudo do tooltip"


							PARA POSICIONAR CONFORME O GOSTO, USE:

							data-placement="PARAM"

							ONDE PARAM:

							left, right, top, bottom


							ALÉM DISSO O SCRIPT, PARA ATIVÁ-LO:

							$(document).ready(function(){
						      $('[data-toggle="tooltip"]').tooltip(); 
						        });



				PARA MUDAR A COR DELE, TEM QUE SOBRESCREVER A CLASSE QUE DEIXA ELE PRETO, 
				SEGUE ELA:


							.bs-tooltip-top .arrow::before, .bs-tooltip-auto[x-placement^="top"] .arrow::before {
							  border-top-color: #d43065; /*muda a cor da seta quando o tooltip é no topo*/
							}
							.bs-tooltip-right .arrow::before, .bs-tooltip-auto[x-placement^="right"] .arrow::before {
							  border-right-color: #d43065;/*muda a cor da seta quando o tooltip é na direita*/
							}
							.bs-tooltip-bottom .arrow::before, .bs-tooltip-auto[x-placement^="bottom"] .arrow::before {
							  border-bottom-color: #d43065;/*muda a cor da seta quando o tooltip é embaixo*/
							}
							.bs-tooltip-left .arrow::before, .bs-tooltip-auto[x-placement^="left"] .arrow::before {
							  border-left-color: #d43065;/*muda a cor da seta quando o tooltip é na esquerda*/
							}
							.tooltip-inner {
							  max-width: 200px;
							  padding: 0.25rem 0.5rem;
							  color: #fff;
							  text-align: center;
							  background-color: #d43065; /*muda o estilo da parte interna do tooltip*/
							  border-radius: 0.25rem;
							}

					ISSO MUDA A COR DOS TOOLTIPS DE ESQUERDA DIREITA TOPO E BOTTOM, ALÉM DA PARTE
					INTERNA E DA SETINHA.


					ASSIM:

					<li class="nav-item"><a href="#text1" class="nav-link" data-toggle="tooltip" 
					title="Link 1" data-placement="bottom">Sessão 1</a></li>

						----------------- *[BUSCA]* ------------------
					https://www.w3schools.com/bootstrap/bootstrap_filters.asp






					---------------------- *[MODAL] *--------------------

					https://www.w3schools.com/bootstrap/bootstrap_ref_js_modal.asp



					O MODAL PODE SER COLOCADO NO HTML PQ ELE JÁ VEM ESCONDIDO E SÓ É DISPARADO
					QUANDO UMA FUNÇÃO OCORRE OU UM BOTÃO É PRESSIONADO(NO CASO DESSE EXEMPLO)
					É BOM SER COLOCADO NO FIM DO HTML 

					
			          <!-- Button trigger modal -->
			      <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#erroGravacao">
			        Launch demo modal
			      </button>

			      <!-- Modal -->
			      <div class="modal fade" id="erroGravacao" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
			        <div class="modal-dialog" role="document">
			          <div class="modal-content">
			            <div class="modal-header">
			              <h5 class="modal-title text-danger" id="exampleModalLabel">Erro na gravação</h5>
			              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
			                <span aria-hidden="true">&times;</span>
			              </button>
			            </div>
			            <div class="modal-body">
			              Existem campos obrigatórios que não foram preenchidos
			            </div>
			            <div class="modal-footer">
			              <button type="button" class="btn btn-danger" data-dismiss="modal">Voltar e corrigir</button>
			            </div>
			          </div>
			        </div>
			      </div>



			      PARA MOSTRAR O MODAL CASO UMA CONDIÇÃO OCORRA(SEM PRECISAR DE UM BOTÃO PRA ISSO), USAMOS O JQUERY:

			      $('#idmodal').modal('show'); idmodal no caso acima é erroGravacao

			      PARA ESCONDER O MODAL(POR EXEMPLO NO CLIQUE DE UM BOTÃO), É SO COLOCAR NO BOTÃO O ATRIBUTO :

			      data-dismiss ="modal" (ele esconde pela classe)




					-----------------------*[POPOVER]*------------------------


					BASTA COLOCAR UM LINK, OU BOTÃO, COM OS ATRIBUTOS:

						 data-toggle="popover"

						 PARA O CABEÇALHO(OPCIONAL): 
						 title="titulo do cabeçalho"

						 PARA O CONTEUDO
						  data-content="conteudo"

						e depois o nome dentro das tags do link, o nome no botão



						E O SEGUINTE SCRIPT:

						  $(document).ready(function(){
							    $('[data-toggle="popover"]').popover();   
							});


						  ASSIM:


						   <a href="#" data-toggle="popover" title="Popover Header"
						    data-content="Some content inside the popover">Toggle popover</a>

						    OU

						   <a href="#" data-toggle="popover"
						    data-content="Some content inside the popover">Toggle popover</a>

						    /*SEM O HEADER*/


							--------------------*[LISTAS]*-----------------------		

						PARA CRIAR UM GRUPO DE LISTA, APLICAR NA <li>

						class="list-group" (PARA UMA LISTA COM BORDINHAS E ARREDONDAMENTO) OU
						class="list-group-flush" (PARA UMA LISTA COM BORDA SUPERIOR E INFERIOR, SEM ARREDONDAMENTO)
						SÓ VAI MUDAR QUANDO VOCE ESTILIZAR AS LIS

						E NAS <li> DENTRO DA UL PONHA:


						class="list-group-item"

						DA PRA COLOCAR UMA INDICAÇÃO DE LINHA ATIVA, PONHA NA LI:

						class="active"

						ASSIM:

						 <!-- Listas com classe flush -->
					     <ul class="list-group-flush">
					        <li class="list-group-item">Meu item de lista 1</li>
					        <li class="list-group-item">Meu item de lista 2</li>
					        <li class="list-group-item">Meu item de lista 3</li>
					        <li class="list-group-item">Meu item de lista 4</li>
					    </ul>


					   [ PODE FAZER COM LINK TAMBEM ]

					    <ul class="list-group-flush">
					        <a href="#" class="list-group-item">Meu item de lista 1</a>
					        <a href="#" class="list-group-item active">Meu item de lista 2</a>
					        <a href="#" class="list-group-item">Meu item de lista 3</a>
					        <a href="#" class="list-group-item">Meu item de lista 4</a>
					    </ul>

								    PRA APLICAR COR NOS ITENS DA LISTA:

								    		list-group-item-COR


								   				[BADGES]


								   	BOM PARA INDICAR POR EXEMPLO, O NUMERO DE NOTIFICAÇÕES
								   	DE EMAILS, LIGAÇÕES, MENSAGENS. O NUMERO APARECE DENTRO
								   	DA <li> AO LADO DO NOME NO LOCAL. COLOQUE DENTRO DA LI
								   	UM ELEMENTO SPAN, E NELE COLOQUE A CLASSE:

								   			class="badge"

								   	E PARA COLOCAR COR:

								   			class="badge-COR"
								   							  _____
								   			ex: Notificações | 120 |

								   	FICA ASSIM:


									   	 <ol class="list-group">
									        <li class="list-group-item">
									            Notificações
									            <span class="badge badge-danger">120</span>
									        </li>
									        <li class="list-group-item">Meu item de lista 2</li>
									        <li class="list-group-item">Meu item de lista 3</li>
									        <li class="list-group-item">Meu item de lista 4</li>
									    </ol>

									    		[BREADCRUMBS]

					DO INGLES, MIGALHAS DE PÃO, SERVEM PRA IDENTIFICAR, NO SITE, ONDE O USUARIO ESTÁ
										EX: 

										Home / Arquivos / Pessoais /

									PARA ISSO, USAMOS OL (<ol>) NÃO UL (<ul>)

												NA <ol> COLOCAMOS:

												class="breadcumb"

													e na <li>:

											  class="breadcumb-item"

											  		  ASSIM:

											<ol class="breadcrumb">
												<li class="breadcumb-item">Item 1</li>
												<li class="breadcumb-item">Item 2</li>
											</ol>

							PARA DEFINIR O LINK ATIVO, OU SEJA, A PAGINA ONDE O USUARIO ESTÁ
											QUE FICARÁ INCLICÁVEL, FAÇA:


													class="active"

											<ol class="breadcrumb">
												<li class="breadcumb-item">Home</li>
												<li class="breadcumb-item">Arquivos</li>
												<li class="breadcumb-item active">Arquivos</li>
											</ol>

						-----------------------*[FORMULARIOS]*-------------------------


						[CLASSE QUE CRIA UM GRUPO DE FORMULARIOS:]

							class="form-group"

						SÓ COLOCAR ESSA CLASSE NUMA DIV E DENTRO DELA COLOCAR INPUTS, A CLASSE
						APLICA UM ESPAÇO ENTRE CADA INPUT ORGANIZANDO TODOS OS CAMPOS, NÃO DEIXANDO
						ELE COLAR COM OS QUE VEM A SEGUIR(USE ISSO).

						E DENTRO DAS INPUTS(dentro de inputs, não de labels, só inputs):

						class="form-control"

						ASSIM:

						<div class="form-group">
				            <label for="usuario">Usuário</label>
				            <input type="text" class="form-control" id="usuario" placeholder="Digite seu usuário">
				        </div>


				        TAMBÉM HÁ UM ATRIBUTO QUE TORNA A INPUT DE SOMENTE LEITURA, FAZENDO 
				        COM QUE VOCE NAO POSSA CLICAR E ESCREVER NELA, PARA ISSO, COLOQUE NA
				        INPUT:

				        readonly (O CAMPO FICA CINZA, COMO SE FOSSE INATIVO)

				        ASSIM:

			 <input type="text" class="form-control" id="usuario" readonly placeholder="Digite seu usuário">


			 			CLASSE PARA TEXTO PADRÃO DENTRO DE UM FORMULARIO(BOM PRA USAR EMBAIXO DOS CAMPOS, PRA 
			 			ENSINAR COMO USAR AQUELE CAMPO):

			 			class="form-text"

			 			ASSIM:


			 			 <div class="form-group">
				            <label for="email">Email</label>
				            <input type="email" class="form-control" id="email" placeholder="Digite seu email" readonly>
				            <small class="form-text">Email será validado</small>
				        </div>


				        TAMANHO

				        PARA REDUZIR OU AUMENTAR A LARGURA DO INPUT, APLIQUE A CLASSE:

				        class="form-control-PARAM"

				        ONDE PARAM: sm(small), lg(large), ou não coloca nada, esse é o default



				  EX:

        <div class="form-group">
            <label for="email1" style="cursor: pointer;">Email</label>
            <input type="email" class="form-control form-control-lg" id="email1" readonly placeholder="Digite seu email">
            <small class="form-text text-danger">Email será validado</small>
        </div>



				        					[PARA INPUTS DO TIPO SELECT]

				        			AS CLASSES DITAS ANTERIORMENTE SERVEM PARA O SELECT(CAIXA DE SELEÇÃO)

				        			PARA USAR ELA, COLOQUE NA DIV EXTERNA A classe form-group
				        					E NA SELECT A CLASSE: form-control


			        					<div class="form-group">
								            <label for="estados">Estados</label>
								            <select id="estados" class="form-control">
								                <option>Acre</option>
								                <option>Alagoas</option>
								                <option>Amapá</option>
								                <option>...</option>
								            </select>
								        </div>

				        					[PARA INPUTS DO TIPO TEXTAREA]

				        			O MESMO QUE NO PASSO ANTERIOR, MAS A CLASSE form-control
				        				É POSTA NA TAG <textarea></textarea>


				        				<div class="form-group">
								            <label for="mensagem">Mensagem</label>
								            <textarea id="mensagem" class="form-control" rows="3"></textarea>
								        </div>

								        A PROPRIEDADE rows="numero" DITA QUANTAS LINHAS
								        	TERÁ A TEXT-AREA (MAS DÁ PRA EXPANDIR)

								        			rows="3"


								   			------- [INPUT FILE]------

								   			[padrão]


								   		<input type="file" id="file">

					É O MESMO PROCESSO QUE AS ANTERIORES, NA DIV EXTERNA, form-group, COM A DIFERENÇA DE QUE 
					O FORM CONTROL LEVA NO FIM -file, ASSIM:

										class="form-control-file"

											assim:

										 <div class="form-group">
								            <label for="arquivo">Arquivo</label>
								            <input type="file" class="form-control-file" id="arquivo">
								        </div>



								        	[CUSTOMIZADA]

								  ESSE É DIFERENTE, APARECE NO FORMATO DE
								  UMA CAIXA DE BUSCA, BEM MAIS INTERESSANTE,
								  PARA ISSO, COLOQUE NA DIV EXERNA:


								  class="custom-file"

								  NA INPUT FILE:

								  class="custom-file-input"

								  E NA LABEL:

								  class="custom-file-label"

								  ASSIM:


								 <div class="custom-file">
						            <input type="file" class="custom-file-input" id="arquivo">
						            <label class="custom-file-label"></label>
						        </div>

						       ------- [INPUTS RANGE]-------

						   PARA CONTROLE DESLIZANTE DO TIPO RANGE, 
						   NA DIV EXTERNA COLOQUE A CLASSE:

						   			class="form-group"


						   		E NA INPUT RANGE A CLASSE:

						   			class="custom-range"



						   				ASSIM:	

						   <div class="form-group">
					            <label id="range">Satisfação</label>
					            <input type="range" 
					            id="range" min="1" class="custom-range" max="5">
					        </div>

					        		----- [BOTÃO] -----

					        		SÓ APLICAR O ESTILO DE
					        		BOTÃO JA DITO:

					        		class="btn btn-danger"

					        				ASSIM:


					      <input type="submit" class="btn btn-danger" value="Salvar">


					      		----- [FORMULARIOS INLINE] ----


			UTIL PARA AQUELES CAMPOS DE LOGIN E SENHA, PARA LOGAR(COMO O DA TELA INICIAL DO FACE)

								NA DIV MAIS EXTERNA, APLIQUE A CLASSE:


										class="form-inline"

											NO CAMPO:

										class="form-control"


										E NO BOTÃO DE LOGIN:

										class="btn btn-COR"


							---- [VALIDAÇÃO DE DADOS DE FORMULARIO] ----

	SUPONDO QUE O USUARIO CLICOU EM LOGAR, E O EMAIL É VALIDO, OU POR EXEMPLO, QUER CRIAR UM NICKNAME, E ELE NÃO EXISTE, 
	SENDO QUE O USUARIO ENTAO PODE CADASTRAR ELE, O CAMPO FICA VERDE, SENÃO, VERMELHO OU SE POR EXEMPLO, A SENHA ESTÁ 
	ERRADA, PARA ISSO, NO CAMPO QUE CONTÉM A INPUT
	COLOQUE UMA DAS CLASSES:

										class="is-valid"
										class="is-invalid"
										class="invalid-feedback" (COLOCAR EM TEXTO, 
											SERVE PRA DIZER ALGO COMO:
											SENHA INCORRETA
											FICA VERMELHO
											)
										class="valid-feedback" 

										class="invalid-feedback" (COLOCAR EM TEXTO, 
											SERVE PRA DIZER ALGO COMO:
											NICK DISPONIVEL
											FICA VERDE
											)
										ASSIM:

								<form>
        
							        <div class="form-group">
							            <label for="email-usuario">email</label>
							            <input type="email" id="email" class="form-control is-valid" placeholder="Digite seu e-mail">
							        </div>

							        <div>
							            <label for="senha-usuario">Senha</label>
							            <input type="password" id="senha-usuario" class="form-control is-invalid" placeholder="Digite sua senha">
							            <div class="invalid-feedback">
							                Senha inválida
							            </div>
							        </div>

							        <input type="submit" class="btn btn-info" value="Logar">

							    </form>

							    OBSERVAÇÕES:

							 [ i ISSO NAO SE APLICA SOMENTE A VALIDACAO DE DADOS DE FORMULARIO, MAS 
							 SE HOUVEREM MAIS DE UMA INPUT, COLOQUE-AS DENTRO DE UM FORM, É BOM PROS
							 LEITORES DE TELA SABEREM QUE É UM FORMULARIO
							  i form-group SERVE PARA AGRUPAR INPUTS, USAR form-control SOZINHO, SEM A
							  form-control NÃO TEM PROBLEMA

							 ]

		Agora que eu sei js, vamos lá. Eu testei isso usando uma input que será usada para definir uma senha.
		Se a senha tiver menos de 8 caracteres, a classe is-invalid é adicionada. 

		let caixa = document.getElementsByTagName('input')['password'];

		caixa.addEventListener('input', e => {
		 	if(caixa.value.length >= 8){
		 		caixa.classList.remove('is-invalid');
		 		caixa.classList.add('is-valid');
		 	}
		 	else{
		 		caixa.classList.remove('is-valid');
		 		caixa.classList.add('is-invalid');
		 	}
		 }
		 );


		Também fiz isso aqui, só dá pra enviar o formulário pro servidor caso nenhum dos campos tenha a classe
		is invalid(podia ser outra tratativa, enfim). Eu só adiciono o type submit caso os dados sejam válidos.
		E claro, só dá pra enviar pro servidor caso eles sejam válidos.

		let button = document.getElementsByTagName('button')[0]; 

		let caixa = document.getElementsByTagName('input')["password"];

		button.addEventListener('click', e => { 
		if(caixa.classList.contains('is-invalid')){
		  button.type = 'button';
		  console.log(button.type);
		}
		else{
		  button.type = 'submit';
		}
		}
		);

		caixa.addEventListener('input', e => {
		  if(caixa.value.length >= 8){
		    caixa.classList.remove('is-invalid');
		    caixa.classList.add('is-valid');
		  }
		  else{
		    caixa.classList.remove('is-valid');
		    caixa.classList.add('is-invalid');
		  }
		 }
		 );
							 
								----------------*[INPUT GROUP]*-----------------


					SÃO INPUTS QUE TEM UM MARCADORZINHO DO LADO QUE SERVE PRA DIZER PRA QUE
					SERVE AQUELE CAMPO, COMO EMAIL ETC, APARECE MAIS OU MENOS ASSIM:

							PREPEND: (pre de antes)
							________________________________________________________
						   |	 	|												|
						   |   @  	|	Digite seu email aqui...					|
						   |     	|												|
						    *********************************************************
						    APPEND: (append de depois)
						    ________________________________________________________
						   |	 									|				|
						   | 						 celinha7891	|	@site.com	|
						   |     									|				|
						    *********************************************************


						    [INPUT GROUP PREPEND]

						    PARA ISSO CRIE UMA DIV EXTERNA E PONHA NELA A CLASSE:

						    				class="input-group"

						    DENTRO DESSA DIV CRIE UMA OUTRA DIV, E DENTRO DESSA DIV,
						    UM SPAN, DENTRO DA DIV MAIS INTERNA CRIADA PONHA A CLASSE:

						    			class="input-group-prepend"

						    E DENTRO DO SPAN:

						    			class="input-group-text"


						    			E DENTRO DO INPUT QUE VOCE 
						    			ESTIVER USANDO, PONHA A CLASSE QUE JA CONHECEMOS
						    				class="form-control"


						    				ASSIM:


									    <div class="input-group">
								           <div class="input-group-prepend">
								               <span class="input-group-text">@</span>
								           </div>
								           <input class="form-control" type="text" placeholder="e-mail">
								       </div> 



								       PARA DeIXAR TODO O GRUPO D BOTOeS De UM TAMANHO SO:

								       input-group-PARAM:

								       PARAM:

								       lg, sm

								  fica assim :

								    ________________________________________________________
								   |	 	|												|
								   |   @  	|	Digite seu email aqui...					|
								   |     	|												|
								    *********************************************************

							[INPUT GROUP APPEND]


							O MESMO PROCESSO QUE O ANTERIOR, MAS NESSE O INPUT GROUP FICA NA DIREITA
							NESSE CASO AO INVES DE INPUT GROUP PREPPEND COLOQUE:

							class="input-group-append"


							ASSIM:


							  <h2>Grupo append</h2>
						       <div class="input-group">
						            <input class="form-control" type="text" placeholder="e-mail">
						           <div class="input-group-append">
						               <span class="input-group-text">@site.com</span>
						           </div>
						       </div> 

						      FICA ASSIM:


  							________________________________________________________
						   |	 									|				|
						   | 						 celinha7891	|	@site.com	|
						   |     									|				|
						    *********************************************************


						    [COMBINANDO OS DOIS]

						    HÁ CASOS EM QUE PRECISAREMOS COMBINAR OS DOIS, COMO EM CASO DE MOEDAS, 
						    UM EXEMPLO:


						    ___________________________
						   |	| 				|	   |	
						   |  $	|	valor		| ,00  |
						   |    |				|	   |	
						    ***************************


						   1  CRIE UMA DIV COM A CLASSE : class="input-group" 

						  2   DEPOIS,
						    ACIMA DO INPUT E DENTRO DA DIV ANTERIOR CRIE UMA DIV COM A CLASSE:
						     class="input-group-prepend"

						  3  DENTRO DELA UM SPAN, NESSE SPAN PONHA A CLASSE:
						     class="input-group-text"

						  4  DEPOIS DO INPUT, ANTES DO FIM DA PRIMEIRA DIV, CRIE OUTRA DIV, COM
						     A CLASSE:
						     class="input-group-append"

						  5 DENTRO DESSA DIV, PONHA ASSIM COMO NO PASSO 3, UM SPAN COM A CLASSE:
						  	class="input-group-text"


						     ASSIM:


					        <h2>Moeda</h2>
					        <div class="input-group">
					            <div class="input-group-prepend">
					               <span class="input-group-text">$</span>
					           </div>
					           <input class="form-control" type="text" placeholder="Digite um valor">
					           <div class="input-group-append">
					               <span class="input-group-text">,00</span>
					           </div>
					        </div>


					 					[CHECKBOXES/RADIO]

					 		ESSA FORMATAÇÃO FUNCIONA PARA CHECKBOXES E RADIOS, BASTA MUDAR O TYPE

								 		<input type="checkbox" id="checkbox">
								 		<input type="radio" id="radio">


							É O MEXMO MODO DOS ANTERIORES, NA DIV EXTERNA: class="input-group"
							SÓ QUE NO CASO DAS CHECKBOXES, ELAS QUE VÃO DENTRO DAS CAIXINHAS IDENTIFICADORAS,
							ASSIM:


													_______________________________
												   |  ___  |						|
												   | |   | |						|
												   |  ***  |						|
												    ********************************


							DESSE MODO, CRIE UMA DIV E COLOQUE: class="input-group-preppend/append"

							depois

							AO INVES DE CRIAR UMA DIV ANTES DA INPUT, CRIE UMA DIV *PARA* A INPUT
							CRIE A DIV E COLOQUE A INPUT DENTRO, DEPOIS APLIQUE NESSA DIV:

							class="input-group-text" (SIM ESTRANHO "TEXT" PRA RADIO, MAS TA CERTO)

							ASSIM:

							<h2>Checkbox / radio</h2>
					        <div class="input-group">
					            <div class="input-group-prepend">
					               <div class="input-group-text">
					                   <input type="radio">
					               </div> 
					            </div>
					            <input type="text" class="form-control">
					        </div>



							[MULTIPLOS INPUTS]


							PARA CRIAR UM GRUPO DE INPUTS PARECIDO COM ISSO:


							_________________________________________________
						   | 	         |					|				 |
						   | nome/email  |		email		|	senha		 |
						   |	         |					|				 |
						   **************************************************

						   BASTA CRIAR UMA DIV COM A CLASSE: class="input-group"

						   UMA OUTRA COM A CLASSE: class="input-group-prepend/append"

						   E DENTRO DESSA COM PREPEND OU APPEND, PONHA UM SPAN COM A CLASSE:

						   class="input-group-text"

						   E DEPOIS DISSO COLOQUE AS INPUTS NORMALMENTE, MAS SEM LABEL
						   SEM DIVS, SEM BREAKS, UMA ABAIXO DA OUTRA, NO MAXIMO COM
						   PLACEHOLDER, PRA ELAS COLAREM.


						   ASSIM:


						    <h2>Múltiplos inputs</h2>
					        <div class="input-group">
					           <div class="input-group-prepend">
					               <span class="input-group-text">nome/e-mail</span>
					           </div>
					           <input class="form-control" type="text" placeholder="e-mail">
					           <input class="form-control" type="password" placeholder="senha">
					       </div> 


					       [INPUT GROUP PARA PESQUISA](fica fofinho dms)


					       CRIE UMA DIV EXTERNA COM A CLASSE: class="input-group"

					       DEPOIS COLOQUE SUA INPUT, DE PREFERENCIA A SEARCH:

					       <input type="search" id="search">

					       DEPOIS COLOQUE OUTRA DIV COM A CLASSE: class="input-group-append" (pro botão aparecer
					       	na direita)

					       DEPOIS DENTRO DA DIV QUE TEM APPEND UM BOTÃO, E O PERSONALIZE
					       <button class="btn btn-danger">
					       Pesquisar
					       </button>


					       O BOTÃO FICA COLADO NA CAIXA DE BUSCA, ASSIM:


					       ____________________________________
					      |						|              |
					      |						| pesquisar    |
					      |                 	|              |
					      *************************************  

					      FICA ASSIM:


					      <h2>Pesquisas</h2>
					       <div class="input-group">
					           <input class="form-control" type="search" placeholder="Pesquisar" >
					           <div class="input-group-append">
					               <button type="button">Pesquisar</button>
					           </div>
					       </div>


					    ---------------------*[ALERTAS]*----------------------

				UTIL PRA SE EXIBIR UMA MENSAGEM DE ALERTA DENTRO DE UM SITE, COMO POR EXEMPLO
				QUANDO VOCE SE REGISTRA MAS NÃO CONFIRMA O EMAIL, E LÁ FICA UM ALERTA FIXO NO 
				SITE DIZENDO QUE VOCE PRECISA CONFIRMAR, E SE NÃO RECEBEU, A OPÇÃO DE REENVIAR.
				TAMBÉM PRA DIZER QUE POR EXEMPLO, O CADASTRO FOI BEM SUCEDIDO, OU QUE ALGUM DOS
				DADOS ESTÁ INCORRETO, AO ENVIAR.


				É LEGAL COLOCAR UMA SPAN ANTES DO TEXTO DO BOTÃO, DENTRO DA DIV, INDICANDO A COR
				DO ALERTA PARA PESSOAS DEFICIENTES VISUAIS, COLOQUE POR EXEMPLO:

				<span class="sr-only">Alerta Vermelho</span>


										   [ALERTA SIMPLES]

						PARA CRIAR UM ALERTA CRIE UMA DIV E COLOQUE UM TEXTO DENTRO
						(pode ser dentro de spans) NESTA DIV COLOQUE A CLASSE:

						class="alert"


						PARA COLOCAR COR INCLUA TAMBÉM A CLASSE:

						class="alert-COR"

						cores: primary, secondary..


						SE USA MAIS O VERMELHO, QUANDO ALGO DÁ ERRADO, O AMARELO, PRA 
						ATENÇÃO, E O VERDE PRA QUANDO ALGO DEU CERTO


						ASSIM


						<div class="alert alert-primary">
					      <strong>Primary</strong> você tem uma postagem pendente!
					    </div>

									[ALERTA COM BOTÃO FECHAR]


						PARA UM ALERTA QUE TEM UM BOTÃO DE X, PODENDO SER FECHADO, APLIQUE AS MESMAS
						CLASSES QUE ANTERIORMENTE NA DIV EXTERNA:

						1 class="alert alert-COR"


						2  E AGORA TAMBEM A CLASSE: 

						class="alert-dismissible"


						3 E CRIE DENTRO UM BOTÃO COM A CLASSE :

						class="close"

						4 E O ATRIBUTO:

						data-dismiss="alert"


						E COLOQUE NORMALMENTE O TEXTO DENTRO DA DIV DEPOIS DO BOTÃO

						ASSIM


						<div class="alert alert-success alert-dismissible">
					      <button class="close" type="button" data-dismiss="alert">
					        &times; (PRESTE ATENÇÃO NESSE ATRIBUTO)
					      </button>
					      <strong>Fechar</strong> Alerta com botão fechar
					    </div>


					    [O &times; É UM CARACTERE ESPECIAL, É O X(DE MULTIPLICAÇÃO), COLOQUE ELE DENTRO DO BOTÃO,
					    PARA APARECER O X DE FECHAR]


					    				[ALERTA COM MAIS DE UM CONTEUDO]

					    	O PROCESSO É O MESMO, MAS É PRA EXEMPLIFICAR QUE DÁ PRA FAZER
					    	COM MAIS DE UM CONTEUDO, COMO QUANDO HÁ MULTIPLOS ERROS. POR EXEMPLO
					    	QUANDO O USUARIO INSERIU O ENDEREÇO E O CPF ERRADO(MAIS DE UM)

					    	BASTA FAZER UMA DIV PRA COLOCAR TODOS OS CONTEUDOS QUE QUER, E NESSA 
					    	DIV COLOCAR AS CLASSES:

					    	class="alert alert-COR"

					    	E PRA FAZER UM DESSE COM BOTÃO DE FECHAR, ADCIONE A DIV EXTERNA A CLASS:

					    	 class="alert-dismissible"


					    	CRIE UM BOTÃO E COLOQUE NELE:

					    	class="close" data-dismiss="alert"


					    	ASSIM


					    	<div class="alert alert-danger alert-dismissible">
						      <button type="button" class="close" data-dismiss="alert">&times;</button>
						      <h4>Título</h4>
						      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a metus in purus malesuada vulputate. Sed lacinia quam massa, eu consectetur tortor faucibus sed.</p>
						      <hr>
						      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a metus in purus malesuada vulputate. Sed lacinia quam massa, eu consectetur tortor faucibus sed.</p>

						    </div>

						    				------ *[BARRA DE PROGRESSO]*-----


						    				CRIE UMA DIV E NELA COLOQUE A CLASS:

						    				class="progress"

						    				<div class="progress" style="height: 2px;">

						  ISSO CRIARÁ UMA BARRA CINZA NA QUAL FICARÁ POR CIMA UMA BARRA DE COR QUE AUMENTA


						    	DEPOIS DENTRO DELA CRIE OUTRA DIV, E NELA PONHA A CLASSE:

						    				class="progress-bar"

						    PARA DEFINIR O TAMANHO(EXPANSÃO HORIZONTAL DELA) COLOQUE NESSA DIV INTERNA:

						    				class="w-TAMANHO"

						    	PARA COLOCAR A PORCENTAGEM QUE REPRESENTA O QUANTO A BARRA JÁ CARREGOU
						    	PONHA DENTRO DA DIV MAIS INTERNA UM TEXTO:


						    			<div class="progress-bar w-25">
						    				45%
						    			</div>

						    [ESSAS SÃO SÓ AS CLASSES UTILIZADAS NO PROCESSO, FUTURAMENTE APRENDEREI COMO 
						    FAZER A BARRA AUMENTAR CONFORME O ARQUIVO CARREGA(MUDAR A PORCENTAGEM EM TEMPO
						    	DE EXECUÇÃO)]


						    COMO FICA:


						    <div class="progress">
						      <div class="progress-bar bg-warning" style="width: 45%;">45%</div>
						    </div>

						    PARA ALTERAR AS CORES ADCIONA A DIV QUE TEM A CLASS progress-bar:


						    class="bg-COR"

						    [BARRA DE PROGRESSO LISTRADA]


						    PARA CRIAR UMA BARRA DE PROGRESSO LISTRADA, ADCIONE A DIV INTERNA, A QUE TEM A CLASSE
						    progress-bar A CLASSE:

						    class="progress-bar-striped"


						    ASSIM:

						    <div class="progress">
      							<div class="progress-bar bg-primary progress-bar-striped" style="width: 45%;">
      						</div>

						    [BARRA DE PROGRESSO ANIMADA]

						    BASTA ADCIONAR A DIV INTERNA, A QUE TEM A CLASSE progress-bar A CLASSE:

						    class="progress-bar-animated"

						    <div class="progress">
						      <div class="progress-bar bg-dark progress-bar-striped progress-bar-animated" style="width: 45%;"></div>
						    </div>

						    ([não da pra perceber que a barra está animada se não tiver a classe progress-bar-stripped
						    	porque não tem um padrão, a cor se mexe somente e isso não é perceptivel])

						    [MULTIPLAS BARRAS DE PROGRESSO]


						    UTIL PARA QUANDO SE CARREGA VARIAS COISAS AO MESMO TEMPO, COMO POR EXEMPLO,
						    QUANDO SE CARREGA CONFIGURAÇÕES, FOTOS, E MENSAGENS AO MESMO TEMPO, NUMA SÓ
						    BARRA.


						    PARA ISSO, BASTA CRIAR UMA DIV COM A CLASSE progress-bar, E DENTRO DESSA DIV
						    FAZER QUANTAS OUTRAS DIVS FOREM NECESSÁRIAS(REPRESENTANDO AS BARRAS QUE VOCE
						    	QUER CARREGANDO DENTRO DA BARRA PRINCIPAL.) E DENTRO DE CADA UMA COLOCAR:

						    class="progress-bar" ( O ESSENCIAL PRA FUNCIONAR, MAS PODE COLOCAR COR, ANIMAÇÃO
						    	DE BARRA, TAMANHO, BARRA LISTRADA ETC.)


						   					-----------*[TABELAS]*-----------

						   	PARA TABELAS NO BOOTSTRAP O PADRÃO É O MESMO QUE NO CSS NORMAL,
						   	MAS COM CLASSES. PARA PERSONALIZAR A TABELA, NA <table> COLOQUE
						   	A CLASSE:

						   	class="table"

						   	PARA COLOCAR COR, PONHA NA TAMBEM NA <table>:

						   	class="table-COR"


						   	FICA ASSIM:

						   	<table class="table table-danger">


						   	[COR NO CABEÇAHO]
						   	PARA APLICAR COR SOMENTE NO CABEÇALHO DA TABELA, COLOQUE EM <thead> A CLASSE:

						   	class="thead-COR"

						   	 <thead class="thead-dark">

						   	 (só tem light e dark)

						   	[TABELA COM CORES ALTERNADAS]


						   	PARA FAZER UMA COR SIM, UMA COR NÃO, COLOQUE NA <table>  A CLASSE:

						   	class="table-striped"

						   	[TABELA COM/SEM BORDA]

						   	PARA COLOCAR BORDA DE TODOS OS LADOS DA TABELA, COLOQUE NA TABLE <table> A CLASSE:

						   	class="table-bordered"

						   	PARA TIRAR A BORDA:

						   	class="table-borderless"

						   	[COR DE UMA LINHA ESPECIFICA COM OUTRA COR]

						   	PARA MUDAR A COR DA LINHA COLOQUE NA <tr>(PODE SER NAS <td> TAMBEM)
						   	 ESCOLHIDA A CLASS:

						   	class="table-COR" (sim é table mesmo)


						   	COMO FICA COM TUDO:



						   	  <table class="table table-striped table-bordered table-warning">
						      <thead class="thead-dark">
						        <tr>
						          <th>#</th>
						          <th>Produto</th>
						          <th>Marca</th>
						          <th>Preço</th>
						        </tr>
						      </thead>

						      <tbody>
						        <tr class="table-danger text-sm-secondary">
						          <td>0001</td>
						          <td>Iphone X <span style="font-size: 20px; color: #ff0000">&times;</span></td>
						          <td>Apple</td>
						          <td>R$ 6.999,00</td>
						        </tr>
						        <tr>
						          <td>0002</td>
						          <td>Nexus 5</td>
						          <td>LG</td>
						          <td>R$ 999,00</td>
						        </tr>
						        <tr>
						           <td>0003</td>
						           <td>Notebook VAIO</td>
						           <td>Sony</td>
						           <td>R$ 1.999,00</td>
						        </tr>
						      </tbody>

						    </table>

						    [HOVER NA TABELA]

						    PARA QUANDO SE VAI PASSANDO O MOUSE E OS ITENS MUDAM, COLOQUE
						    NA <table> A CLASSE:

						    class="table-hover"


						    				[TABELA PEQUENA]

						    	DEIXA AS LINHAS DA TABELA COM UMA ALTURA MENOR
						    	MESMA LARGURA, MENOR ALTURA. BOM PRA QUANDO SE TEM
						    	UMA TABELA COM MUITAS LINHAS, PARA ISSO COLOQUE NA
						    	<table> : 

						    	class="table-sm"


						    				[TABELA RESPONSIVA]

						    		     NÃO PODE COMBINAR COM table-sm

						    	SEMPRE USE ELA. ELA CRIA UMA SCROLL E CASO VOCE
						    	DIMINUA MUITO A TELA, SE A TABELA NÃO COUBER MAIS
						    	NA TELA, CRIA UM SCROLL HORIZONTAL ABRIGANDO A TABELA
						    	É SÓ ARRASTAR. PARA ISSO, CRIE SUA TABELA NORMALMENTE,
						    	MAS COLOQUE-A DENTRO DE UMA DIV COM A CLASSE:

						    	class="table-responsive"

						    	ASSIM:

						    	<div class="table-responsive">
							    	<table class="table-hover table table-dark table-striped table-bordered">
								    	<thead class="thead-dark">
									    	<th>
									    		<tr>Nome</tr>
									    		<tr>Nome</tr>
									    	</th>
									    </thead>

									   	<tbody>
									   		<tr class="table-danger">
									    		<tr>Nome</tr>
									    		<tr>Nome</tr>
									    	</tr>
									   	</tbody>
									</table>
								</div>


								PODE FAZER ISSO A PARTIR DE UMA LARGURA DE DISPOSITIVO
								ESPECIFICA, PARA ISSO, COLOQUE NA DIV AO INVES DA CLASSE
								class="table-responsive"

								A CLASSE:

								class="table-responsive-tamanho"

								TAMANHO : sm, md, lg, xl


								[TFOOT NAO FUNCIONA COM BOOTSTRAP, PARA SIMULAR, CRIE UMA TH
								E USE COLSPAN PARA DETERMINAR O TAMANHO]

								------------------*[PAGINAÇÃO]*--------------------

								A PAGINAÇÃO FUNCIONAL, SÓ VAI SER APRENDIDA QUANDO 
								CHEGAR EM PHP E BANCO DE DADOOS, O QUE VAI SER ENSINADO
								É A FORMATAÇÃO, AS CLASSES APLICADAS NA PAGINAÇÃO.
								UMA PAGINAÇÃO, É UM PEQUENO MENU DE NAVEGAÇÃO, QUE CONTÉM LINKS
								PARA UMA PAGINA ANTERIOR, POSTERIOR, ETC.

								AS CLASSES NÃO SÃO APLICADAS NA TAG NAV, MAS COLOQUE 
								A PAGINAÇÃO DENTRO DE UMA TAG NAV, PARA OS LEITORES DE TELA
								SABEREM QUE AQUILO É UMA PAGINAÇÃO.

								PARA CRIAR UMA PAGINAÇÃO, CRIE UMA ESTRUTURA DE UL(E DENTRO
									LIS, NESSAS LIS, LINKS), E NELA(NA <ul>)


								COLOQUE A CLASSE:

								class="pagination" (NESSE PASSO OS ITENS JA IRAO SE ALINHAR)

								DEPOIS, NA LI, COLOQUE A CLASSE:

								class="page-item"

								E NO LINK DENTRO DA LI, COLOQUE A CLASSE:

								class="page-link"


								A ESTRUTURA FICA ASSIM:

								<nav>
							      <ul class="pagination">
							        <li class="page-item">
							          <a href="" class="page-link">Anterior</a>
							        </li>
							        <li class="page-item">
							          <a href="" class="page-link">1</a>
							        </li>
							        <li class="page-item">
							          <a href="" class="page-link">2</a>
							        </li>
							        <li class="page-item">
							          <a href="" class="page-link">Próximo</a>
							        </li>
							      </ul>
							    </nav>

							    [LINK ATIVO]:

							    PARA DEFINIR A PÁGINA ATIVA(na que o usuario está,
							     BASTA COLOCAR NA <li>

							    class="active"

							    [LINK DESABILITADO]:

							    PARA DEFINIR UM LINK COMO DESABILITADO(QUANDO POR EXEMPLO,
							    	NÃO HÁ UMA PROXIMA PAGINA, OU NÃO HÁ UMA PAGINA ANTERIOR)
							    COLOQUE NA <li>

							    class="disabled"


							    [ALINHAMENTO(POSIÇÃO) DA PAGINAÇÃO]:

							    PARA DEFINIR ONDE FICARÁ A PAGINAÇÃO: CENTRO, ESQUERDA, DIREITA,
							    COLOQUE NA <ul> A CLASSE:

							    class="justify-content-PARAM"

							    ONDE PARAM:

							    center, end

							    PARA DEIXAR A ESQUERDA, BASTA NAO COLOCAR ESSA CLASSE.

							    [CORES]

							    BASTA COLOCAR NOS LINKS DENTRO DAS LIS QUE ESTAO NA UL

							    class="bg-cor"

							    [TAMANHOS]

							    PARA AUMENTAR O TAMANHO, COLOQUE NA UL A CLASSE:

							    class="pagination-TAMANHO"

							    ONDE TAMANHO:

							    lg - large
							    sm- small

							    PARA DEIXAR MEDIUM BASTA NAO COLOCAR ESSA CLASSE.

							    [NAVEGAÇÃO COM UMA SETINHA]

							    PARA COLOCAR UMA SETA NO LINK DE PROXIMO E ANTERIOR, BASTA COLOCAR
							    A ENTIDADE HTML A SEGUIR, DENTRO DO LINK, AO INVES DO NOME PROXIMO OU
							    ANTERIOR:

							    &laquo; / PARA A SETA DA ESQUERDA
							    &raquo; /PARA A SETA DA DIREITA

							    <li class="page-item disabled">
						          <a href="" class="page-link"><span>&laquo;</span></a>
						        </li>


						        <li class="page-item">
						          <a href="" class="page-link"><span>&raquo;</span></a>
						        </li>



						        [ATENÇÃOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO]
							    *****SÓ QUE FAZER SOMENTE ISSO NÃO É BOM PRA LEITORES DE TELA, QUANDO ELE LER
							    NÃO VAI INFORMAR PARA A PESSOA DEFICIENTE QUE AQUILO É UM LINK PARA A PROXIMA
							    POSTAGEM OU ANTERIOR, ENTÃO, SUPONDO QUE SE QUEIRA MOSTRAR SOMENTE A SETA
							    E NÃO A SETA + O TEXTO, VAMOS MOSTRAR O TEXTO DE PRÓXIMO SOMENTE PARA 
							    LEITORES DE TELA.
							     NA EXIBIÇÃO NORMAL, A SETA APARECE SOZINHA, NA EXIBIÇÃO PARA LEITORES DE TELA
							     A SETA APARECE COM O TEXTO, PARA ISSO, BASTA COLOCAR UMA SPAN, A SETINHA DENTRO,
							    COLOCAR OUTRA SPAN, E DENTRO DESSA SPAN, O TEXTO DE PRÓXIMO, OU ANTERIOR,E
							    TAMBEM NA ATUAL, E NESSA SPAN
							    , COLOCAR A CLASS:*****

							     class="sr-only"


							    FICA ASSIM:

							    <li class="page-item disabled">
						          <a href="" class="page-link">
						            <span>&laquo;</span>
						            <span class="sr-only">Anterior</span>
						          </a>
						        </li>
						        <li class="page-item active">
						          <a href="" class="page-link bg-danger">
						            <span>1</span>
						            <span class="sr-only">(atual)</span>
						          </a>
						        </li>
						        <li class="page-item">
						          <a href="" class="page-link"><span>2</span></a>
						        </li>
						        <li class="page-item">
						          <a href="" class="page-link">
						            <span>&raquo;</span>
						            <span class="sr-only">Próximo</span>
						          </a>
						        </li>



						        A ESTRUTURA FICA ASSIM:


						         <nav>
							      <ul class="pagination justify-content-center pagination-sm">
							        <li class="page-item disabled">
							          <a href="" class="page-link">
							            <span>&laquo;</span>
							            <span class="sr-only">Anterior</span>
							          </a>
							        </li>
							        <li class="page-item active">
							          <a href="" class="page-link bg-danger">
							            <span>1</span>
							            <span class="sr-only">(atual)</span>
							          </a>
							        </li>
							        <li class="page-item">
							          <a href="" class="page-link"><span>2</span></a>
							        </li>
							        <li class="page-item">
							          <a href="" class="page-link">
							            <span>&raquo;</span>
							            <span class="sr-only">Próximo</span>
							          </a>
							        </li>
							      </ul>
							    </nav>

							    DÁ PRA COLOCAR ESSA ESTRUTURA DENTRO DE UMA TABELA
							    E AO IR CLICANDO EM PRÓXIMO ELA VAI PROS PROXIMOS ITENS
							    DA TABELA. MAS COM LINGUAGEM DE PROGRAMAÇÃO, COMO EU JA 
							    DISSE. ERA SO COLOCAR DEPOIS DA TAG </table>, ANTES DO FIM
							    DA DIV table-responsive.




							    			---------*[CARDS]*---------


							    CARDS OU CARTÕES, SÃO BLOQUINHOS QUE ABRIGAM TEXTO, PODEM
							    ABRIGAR TEXTO COM IMAGENS, CITAÇÕES E BOTÕES, SE PARECEM
							    COM ISSO:



										 		_____________________________
										 	   |	header  				 |
										 	   |_____________________________|
										 	   |  ______                     |       
										 	   | |		| txto texto texto	 |
										 	   | |		|					 |
										 	   | |		|	texto			 |
										 	   | |______|		  _____		 |		 
										 	   |                 |_____|     |
										 	   |_____________________________|                     
										 	   *******************************


								É MUITO USADO DENTRO DE SISTEMAS PARA DEFINIR PAINEIS, POSTAGENS
								ETC.

								PARA FAZER UM CARD DE ESTRUTURA BÁSICA, COM HEADER, SUBTITULO, E
								UM TEXTO COM UM BOTÃO, FAÇA:

								1 CRIE UMA DIV, E COLOQUE NELA A CLASSE: 

								class="card"

								2 CRIE OUTRA DIV E COLOQUE NELA A CLASSE:

								class="card-body"

								3 DENTRO DESSA SEGUNDA DIV, VOCE COLOCA SEU CONTEUDO, ESCOLHA UMA
								TAG DE CABEÇALHO RELATIVAMENTE CHAMATIVA PARA SER O TITULO, E UMA 
								DE TAMANHO MEDIO PARA O SUBTITULO.
								NESSE EXEMPLO USEI O H4 E H6.

								COLOQUE NA TAG DE TITULO A CLASSE:

								class="card-title"

								E NA TAG PARA O SUBTITULO COLOQUE:

								class="card-subtitle"

								4 - PARA O TEXTO DENTRO DO CARD, PODE SE CRIAR UM P, E DENTRO DELA
								COLOCAR A CLASSE:

								class="card-text"

								5 - PARA UM BOTÃO DENTRO, USE A CLASSE BTN, BTN-COR:

								<button type="button" class="btn btn-danger"></button>



								FICA ASSIM:


								 <div class="card">
							      <div class="card-body">
							        <h4 class="card-title">Título do cartão</h4>
							        <h6 class="card-subtitle">Subtítulo do cartão</h6>
							        <p class="card-text">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce sapien dui, feugiat et lorem quis, fringilla maximus nisl. Vivamus sed est pulvinar, aliquet purus ut, dictum elit.</p>
							        <a href="" class="btn btn-outline-primary">Leia mais</a>
							      </div>
							    </div>

							    [CARTAO COM IMAGEM]


							    PARA ADCIONAR UMA IMAGEM QUE FICA ACIMA DO TITULO, COLOQUE UMA TAG
							    <img src=""> ANTES DA DIV CARD BODY, E COLOQUE A IMAGEM DESEJADA. 
							    A CLASSE CARD CORTARÁ A IMAGEM SE ELA FOR MAIOR, PODE COLOCAR QUALQUER TAMANHO.

							    DEPOIS COLOQUE NA IMAGEM A CLASSE:

							    class="card-img-POSIÇÃO"

							    ONDE POSIÇÃO DITA O LOCAL DA IMAGEM QUE SERÁ arredondado.

							    POSIÇÕES:

							    top, bottom

							    SE FOR COLOCAR A IMAGEM EMBAIXO, COLOQUE DEPOIS DO FECHAMENTO DA TAG BODY, E SÓ
							    DEPOIS MUDE A CLASSE PARA card-img-bottom. POIS A CLASSE E RESPONSÁVEL POR ARREDONDAR
							    AS PONTAS DE BAIXO OU DE CIMA, NÃO PARA POSICIONAR.


							    [CARTÃO COM IMAGEM SOBREPOSTA]


							    NESSE CASO, O CONTEUDO DO CARD FICA POR CIMA DE UMA IMAGEM.

							    PARA FAZER ISSO, COLOQUE A IMAGEM ACIMA DA DIV card-body,
							    E MUDE A CLASSE DA IMAGEM PARA:

							    class="card-img"

							    E NA DIV QUE TEM O CARD BODY, MUDE A CLASSE ALI PARA

							    class="card-img-overlay"

							    [COR DO TEXTO]

							    ADCIONE A DIV QUE CONTÉM A CLASSE card, a CLASSE:

							    text-COR

							    [CARD COM CABEÇALHO]

							    PARA ISSO ANTES DO BODY, (NO LUGAR DE ONDE IRIA A IMAGEM), PONHA UMA DIV
							    COM O CONTEUDO DESEJADO DENTRO, E NESSA DIV COLOQUE A CLASSE:

							    class="card-header"


							    *** ESSA CLASSE NÃO PODE SER USADA EM CONJUNTO COM A CLASSE card-img-overlay
							    PORTANTO, COLOQUE NA CLASSE QUE ABRIGA O CONTEÚDO A CLASSE card-body


							    [CARD COM RODAPE]

							    CRIE UMA DIV, DEPOIS DO CORPO DO CARD, COM A CLASSE:

							    class="card-footer"


							    [ALINHAMENTO]

							    PARA ALINHAR, COLOQUE NA DIV QUE VOCE QUER CENTRALIZAR O CONTEUDO A CLASSE

							    class="text-POSIÇÃO"

							    EXEMPLO:

							    <div class="card-header text-center">
							 

							 	[CARD COM NAVEGAÇÃO]

							 	PARA ISSO, COLOQUE DENTRO DO CARD HEADER(EU ACHO BONITO NO HEADER), OU DO CORPO
							 	UMA ESTRUTURA DE ULS, 
							 	O RESTO VOCE FAZ NORMALMENTE.
							 	FAZER ESSA ETAPA FAZ COM QUE O MENU FIQUE TAO BEM AJUSTADO DENTRO DO HEADER, QUE
							 	PARECE QUE ESTÁ COLADO COM ELE, INTEGRANDO-OS.

							 	Na ul COLOQUE AS CLASSES JA CONHECIDAS:

							 	class="nav nav tabs"

							 	E TAMBEM A CLASSE

							 	class="card-header-tabs"
							 	PARA APLICAR ESTILIZAÇÕES ESPECIFICAS DO CARD PARA NAVEGAÇÃO.

							 	ASSIM:


							 	<ul class="nav nav-tabs card-header-tabs">


							 	nas lis COLOQUE A CLASSE:

							 	class="nav-item"

							 	E NOS LINKS:

							 	class="nav-link"


							 	CLARAMENTE PODEMOS USAR AS SEGUINTES CLASSES NOS LINKS DA NAVEGAÇÃO, PARA
							 	CONTROLAR O ACESSO A ELAS:

							 	class="disabled" class="active"
							 	FICA ASSIM:


							 	 <div class="card">
							      <div class="card-header">
							        <ul class="nav nav-tabs card-header-tabs">
							          <li class="nav-item">
							            <a href="" class="nav-link">Link 1</a>
							          </li>
							          <li class="nav-item">
							            <a href="" class="nav-link">Link 2</a>
							          </li>
							          <li class="nav-item">
							            <a href="" class="nav-link">Link 3</a>
							          </li>
							        </ul>
							      </div>
							      <div class="card-body">
							        <h4 class="card-tite">Título do cartão</h4>
							        <h6 class="card-subtitle">Subtítulo do cartão</h6>
							        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce sapien dui, feugiat et lorem quis, fringilla maximus nisl. Vivamus sed est pulvinar, aliquet purus ut, dictum elit.</p>
							        <a href="" class="btn btn-danger btn-block">Leia mais</a>
							      </div>
							    </div>


							    [CARTAO COM CORES]


							    SÓ COLOCAR NA DIV RESPONSÁVEL PELO CARTÃO(OU OUTRA QUE VOCE QUEIRA APLICAR)
							    A CLASSE JÁ CONHECIDA:

							    class="bg-COR"

							    E PARA O TEXTO, A CLASSE:

							    class="text-COR"

							    [BORDA NO CARD]

							    COLOQUE NA DIV QUE VOCE QUER A BORDA A CLASSE:

							    class="border-COR"

							    [CARTÃO COM COLUNAS]

							 DÁ A IMPRESSÃO DE SER UM BLOGZINHO DE NOTICIAS, CRIA UMA
							 ÁREA COM VARIAS COLUNAS POSICIONADAS ALEATORIAMENTE, FICA 
							 TIPO ASSIM:

										 ___________________________
										|		 ____				|
										|		|	 |   ____		|
										|		|	 |	|	 |		|
										|		|____|	|____|		|
										|				_____		|
										|		 ____  |	 |		|
										|		|	 | |	 |		|
										|		|	 | |	 |		|
										|		|____| |_____|		|
										|							|
										|						    |
										|							|
										|                           |
										|___________________________|


								PARA ISSO, BASTA FAZER UMA DIV COM A CLASSE:

								class="card-colums"

								E DENTRO DESSA DIV, COLOCAR TODOS OS CARTÕES 
								QUE VOCE DESEJAR, COM BACKGROUND OU SEM, COM
								OU SEM HEADER, NAVEGAÇÃO, FICA BEM BONITO.


							GERALMENTE TEM BASTANTE CARD DENTRO DESSAS COLUNAS


								FICA ASSIM:

					 <div class="card-columns">
					      <!--card 1-->
					      <div class="card">
					      <div class="card-body">
					        <h4 class="card-title">Título do cartão</h4>
					        <h6 class="card-subtitle">Subtítulo do cartão</h6>
					        <p class="card-text">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce sapien dui, feugiat et lorem quis, fringilla maximus nisl. Vivamus sed est pulvinar, aliquet purus ut, dictum elit.</p>
					        <a href="" class="btn btn-outline-primary">Leia mais</a>
					      </div>
					    </div>
					      <!--card 2-->
					       <div class="card">
					        <div class="card-body">
					          <h4 class="card-title">Título do cartão</h4>
					          <h6 class="card-subtitle">Subtítulo do cartão</h6>
					          <p class="card-text">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce sapien dui, feugiat et lorem quis, fringilla maximus nisl. Vivamus sed est pulvinar, aliquet purus ut, dictum elit.</p>
					          <a href="" class="btn btn-outline-primary">Leia mais</a>
					        </div>
					        <img src="https://source.unsplash.com/random/382x100" class="card-image-bottom">
					      </div>
					 </div>
						----------------------*[JUMBOTRON]*-----------------------

						UM JUMBOTRON NA VIDA REAL É AQUELES QUADRADOS QUE EM CADA LADO
						TEM UMA TELA, NOS ESTADIOS DE FUTEBOL
						QUASE QUE COMO UMA CARD, MAS SERVE PRA SER COLOCADO EM POR EXEMPLO
						ZONAS INICIAIS DE SITES, PARA DAR DESTAQUE A ALGO, PARA LITERALMENTE
						CHAMAR A ATENÇÃO.

						É TIPO ASSIM:


						______________________________________________________________
					   |															  |
					   |															  |
					   |				  COMPRE NOSSOS PRODUTOS !					  |
					   |															  |
					   |															  |
					   |			QUALIDADE E PREÇOS INCRIVEIS SÓ AQUI			  |
					   |															  |
					   |						____________	  					  |															  |
					   |		   			   |			|						  |
					   |		   			   |____________|						  |
					   |______________________________________________________________|



    				 		PARA CRIAR ESSE EFEITO, VOCE CRIA UMA DIV COM A CLASSE:

    				 		class="jumbotron"

    				 		SÓ ISSO JÁ BASTARIA, MAS PARA FICAR MAIS BONITO, CRIE UMA
    				 		OUTRA DIV E COLOQUE DENTRO DA DIV QUE LEVA A CLASSE DO
    				 		JUMBOTRON, ESSA DIV TEM QUE CONTER A CLASSE:

    				 		class="conteiner"


    				 		E DENTRO DESSA CLASSE COLOQUE SEUS CONTEUDOS LIVREMENTE

    				 	PARA ALINHAR O TEXTO DENTRO, COLOQUE NA DIV EXTERNA A CLASSE:

    				 	 class="text-POSIÇÃO"

    				 	 POSIÇÃO:

    				 	 center, left, right

    				 	 		PODE BOTAR BOTÃO DENTRO, BASTA:

    				 	 		<button type="button" class="btn btn-COR">

    				 	----------------*[ESTRUTURA PRA TEXTO COM IMAGEM]*-----------------

    				 	LEGAL PARA AQUELAS LISTAS QUE FAZIAMOS COM UMA IMAGEM DO LADO, UM LINK
    				 	E UM TEXTO DE DESCRIÇÃO DA MATERIA, É TIPO ASSIM:

    				 	 ___________________________________________________
    				 	|  ________											|
    				 	| |		   | TITULO CONTEUDO				    	|
    				 	| |		   |  lorem ipsumdolor sit amet, consecte	|
    				 	| |		   |  cur.							    	|
    				 	| |________|										|
    				 	|___________________________________________________|


    				 	PARA TANTO, CRIE UMA DIV, E DENTRO DELA COLOQUE A CLASSE:

    				 	class="media"

    				 	DEPOIS, COLOQUE UMA IMAGEM DENTRO

    				 	<img src="link">

    				 	ABAIXO DESSA IMAGEM CRIE OUTRA DIV, E DENTRO DELA, COLOQUE
    				 	UM TITULO, E O SEU TEXTO, NESSA DIV COLOQUE A CLASSE:

    				 	class="media-body"


    				 	PARA AJUSTAR OS ESPAÇOS, USE PADDING, E MARGIN, NA IMAGEM , POR EXEMPLO
    				 	USE:

    				 	class="mr-VALOR"

    				 	DITA O ESPAÇO ENTRE A IMAGEM E O TEXTO

    				 	[AJUSTAR A IMAGEM DENTRO DO CORPO]


    				 	PARA DITAR ONDE A IMAGEM FICA, PONHA NELA A CLASSE:

    				 	class="align-self-POSIÇÃO"

    				 	ONDE POSIÇÃO:

    				 	start, center, end;




    				 	FICA ASSIM:


    				 	<div class="media">
					      <img class="mr-3" src="https://source.unsplash.com/random/60x60">
					      <div class="media-body">
					        <h5>Título do conteúdo</h5>
					        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce sapien dui, feugiat et lorem quis, fringilla maximus nisl. Vivamus sed est pulvinar, aliquet purus ut, dictum elit.</p>
					      </div>
					    </div>

    				 	[ESTRUTURA PARA IMAGENS E TEXTO USANDO LISTA]


    				 	PARA ISSO, CRIE UMA ESTRUTURA DE UL, LIS, DENTRO DE CADA LI, COLOQUE UMA IMAGEM
    				 	DEPOIS UMA DIV, E DENTRO DESSA DIV SEUS CONTEUDOS.

    				 	1- NA UL PARA TIRAR O ESTILO DA LISTA PONHA A CLASSE:

    				 	class="list-unstyled"

    				 	2- DENTRO DAS LIS COLOQUE A CLASSE:
    				 	class="media"

    				 	3- NA IMAGEM DENTRO DAS LIS, COLOQUE A CLASSE:

    				 	class="mr-VALOR"
    				 	DEFININDO A DISTANCIA DA IMAGEM, DO TEXTO

    				 	4-Na DI VQUE TERÁ OS CONTEUDOS, DEPOIS DA IMAGEM, COLOQUE A CLASSE:

    				 	class="media-body"


    				 	FICA ASSIM:

    				 	 <ul class="list-unstyled">
					      <li class="media p-1">
					        <img src="https://source.unsplash.com/random/60x60" class="mr-2 align-self-center">
					        <div class="media-body">
					          <h5>Titulo</h5>
					          <p>Lorem ipsum dolor sit amet consectecut sit amet</p>
					        </div>
					      </li>
					      <hr>
					      <li class="media p-1">
					        <img src="https://source.unsplash.com/random/60x60" class="mr-2 align-self-center">
					        <h5>TItulo2</h5>
					        <p>Lorem ipsum dolor sit amet consectecur</p>
					      </li>
					    </ul>

					    --------------*[USANDO ICONES NO SITE]*---------------
					    O DOWNLOAD DOS ICONES FOI FEITO NO FONT AWESOME, JÁ TEM
					    UMA PASTA NAS REFERÊNCIAS A SEREM USADAS. E UM CAMINHO
					    NO LINK REL PARA O ARQUIVO CERTO, QUE É O ALL.MIN.CSS


					    AGORA BASTA IR NO SITE VER OS ICONES QUE QUER COLOCAR.
					    TODOS ELES TEM O MESMO NOME QUE ESTA NO ARQUIVO BAIXADO
					    (AO ENTRAR CLIQUE NOS ICONES FREE, SÓ TEM ESSES NO PACOTE
					    SE BAIXAR UM QUE NAO É FREE NÃO VAI APARECER.)

					    AQUI-> https://fontawesome.com/icons
					    E
					    AQUI ->https://useiconic.com/open (TEM QUE DESATIVAR A 
					    	VPN PARA ENTRAR)


					    	*os icones se comportam como fonte*

					    ESSES ICONES PODEM SER POSTOS DENTRO DE BUTTONS, DIVS, 
					    INPUTS ETC.

					    PARA O BOOTSTRAP, BASTA USAR UMA TAG SPAN OU UMA TAG I
					     COM A CLASSE
					    RESPONSÁVEL POR CHAMAR O ICON DESEJADO. PARA CADA SITE
					    DE FONTE, A CLASSE É UMA DIFERENTE. NESSE CASO É:

					    		class="fab" E class="fa-NOME-DO-ICONE"

					    		OU

					    		class="oi" E class="oi-NOME-DO ICOME"

					    EXEMPLO:

					    <span class="fab fa-NOME"></span>
					    <i class="fab fa-NOME"></span>

					    OU 

					    <span class="oi oi-NOME"></span>
					    <i class="oi oi-NOME"></i>


					    [DEFININDO O TAMANHO DO ICONE]
					    PODEMOS USAR UMA CLASSE JÁ CONHECIDA PARA ISSO, A CLASSE:

					    class="display-NUMERO"

					    NUMERO: 1,2,3,4
					    PODE USAR FONT SIZE TAMBEM

					    OU:

					    fa-PARAM, onde param:

					    xs, sm, lg, 2x, 3x, 4x, 5x, 7x, 10x

				<span class="fab fa-deskpro display-1" style="font-size: 25px; color: purple"></span>



					    [DEFININDO A COR DO ICONE]
						PODEMOS USAR UMA CLASSE JÁ CONHECIDA PARA ISSO, A CLASSE:

						class="text-COR"

						COR: CLASSES DE CONTEXTO(primary, secondary, danger...)

						<span class="fab fa-bluetooth display-1 text-danger"></span>

						TAMBEM POSSO APLICAR UMA CLASSE QUE TENHA UMA COR DE TEXTO
						DEFINIDA PARA ESSE ICONE, OU USAR UM STYLE NELE.

						<i class="oi oi-clock" style="color: deeppink;"></i>




						[BOTÕES COM ICONES]

						basta fazer as configurações anteriores, mas dentro de um
						botão


						<button class="btn btn-info">
						  <i class="fab fa-amazon display-1"></i>
						  Clique aqui
						</button>





						----------------------*[SISTEMA DE GRIDS]*-----------------------

				É UM SISTEMA INTELIGENTE ONDE UM CONTEINER É DEFINIDO COMO DIVIDIDO EM 12 PARTES
				(SEMPRE O MAXIMO É 12), E OS ELEMENTOS DENTRO DAQUELE CONTEINER PODEM SER AJUSTADOS
				PRA OCUPAR N PARTES DESSE CONTEINER. SUPONDO QUE SE QUEIRA DOIS ELEMENTOS IGUAIS E QUE
				OCUPEM TODO O ESPAÇO DISPONIVEL DENTRO DESSE CONTEINER E UM ELEMENTO QUE OCUPE 5 ESPAÇOS,
				 POSSO DIZER QUE QUERO QUE CADA UMA OCUPE 6 PARTES DESSE CONTEINER. 
				 SERIA BASICAMENTE ASSIM:



									|| || || || || || || || || || || ||
									***************** *****************
									***************** *****************
									***************** *****************
									|| || || || || || || || || || || ||
									*********** || || || || || || || ||
									*********** || || || || || || || ||
									|| || || || || || || || || || || || 
									1  2  3  4  5  6  7  8  9  10 11 12


						ONDE AS BARRINHAS SÃO AS DIVISÕES DO GRID, E OS ASTERISCOS SÃO OS ELEMENTOS
						QUE OCUPAM X ESPAÇOS DO GRID;

				O GRID É BASICAMENTE UM FLEXBOX PRONTO.



				PARA FAZER ISSO, É IMPORTANTE QUE ANTES VOCE CRIE UMA DIV PARA ABRIGAR TODO O CONTEUDO
				, ISSO NÓS JÁ FAZEMOS. DENTRO DESSA DIV, CRIE OUTRA, E APLIQUE NELA A CLASSE:

				class="row"

				ISSO CRIARÁ UMA LINHA ONDE FICARÃO OS ELEMENTOS. crie quantas forem necessarias. A CADA VEZ QUE QUISER
				 COLOCAR UM GRUPODE ELEMENTOS, CRIE UMA. POR EXEMPLO:
				UMA LINHA PARA NAVEGAÇÃO, SE TIVER OUTRA NAVEGAÇÃO EMBAIXO, OUTRA LINHA, UMA AREA PARA OS POSTS
				E AREAS LATERAIS, SE TIVER UMA AREA DE ANUNCIO COM UM BOTAO, QUE TOMA A TELA INTEIRA, OUTRA LINHA
				E ASSIM POR DIANTE. 

				DEPOIS DENTRO DESSA DIV QUE TEM A CLASSE ROW, COLOQUE OS ELEMENTOS QUE VOCE QUER QUE FIQUEM NAQUELA
				LINHA, E DEFINA NELAS QUANTOS GRIDS ELA OCUPARÁ, USANDO AS CLASSES DESCRITAS AQUI.


				PARA DEFINIR O TAMANHO DE CADA ELEMENTO, EM CADA TIPO DE TELA USE:
				class="col-NUMERODEGRIDS" (para menores que 576px)
				class="col-sm-NUMERODEGRIDS"(para maiores ou iguais a 576px)
				class="col-md-NUMERODEGRIDS" (para maiores ou iguais a 768px)
				class="col-lg-NUMERODEGRIDS" (para maiores ou iguais a 992px)
				class="col-xl-NUMERODEGRIDS" (para maiores ou iguais a 1200px)

				SE POR EXEMPLO, VOCE QUER CONFIGURAR QUE OS ITENS FIQUEM EM 100% DA TELA, QUANDO O DISPOSITIVO
				FOR MENOR QUE SMALL, COM CADA ELEMENTO OCUPANDO 100% 
				DA LINHA, USE NA DIV DE CADA ELEMENTO:

				class="col-12"

				ASSIM, ELA OCUPARÁ 12 GRIDS. OU SEJA, O ESPAÇO INTEIRO DAQUELA LINHA.
				[CADA ROW, TEM 12 COLUNAS]

				SE QUISER QUE UM ELEMENTO OCUPE METADE DO ESPAÇO DA LINHA, QUANDO O DISPOSITIVO
				FOR MENOR QUE SMALL, COLOQUE NO ELEMENTO A CLASS:

				class="col-6" ASSIM ELA OCUPA 6 GRIDS, METADE DO TAMANHO DISPONIVEL.


				SE VOCE AGORA POR EXEMPLO, QUER QUE UM ELEMENTO OCUPE 100% DA LINHA, MAS SOMENTE EM DISPOSITIVOS 
				MENORES QUE SMALL, E QUE ESSE MESMO ELEMENTO OCUPE 50% DA LINHA EM DISPOSITIVOS MAIORES QUE SMALL
				COMBINE OS DOIS, PARA MUDAR QUANTO ELE OCUPA NO GRID, A DEPENDER DO DISPOSITIVO, EXEMPLO:


						 <div class="container marcador-container">
					      <div class="row area-posts">
					        <div class="marcador col-12 col-sm-8 col-md-10">Area 1</div>
					        <div class="marcador col-12 col-sm-4 col-md-2">Area 2</div>
					      </div>
					    </div>


					    ***CONTAINER É O QUE ABRIGA AS DIVS QUE SÃO ROWS, QUE ABRIGAM ELEMENTOS, MAS A CLASSE:
					    class="container" TEM UM TAMANHO DEFINIDO E UMA MARGEM EXTERNA, PARA UM CONTAINER QUE
					    PEGUE TODO O TAMANHO DA TELA(O QUE É O QUE VOCE TEM QUE USAR) USE:
					    class="container"
					    DEIXA MARGENS
					    
					    class="container-fluid" 
					    OCUPA 100% DA TELA

					    [BASICAMENTE, PARA CADA DISPOSITIVO, VOCE REGULA QUANTOS GRIDS AQUELA DIV OCUPA]


					    UMA OBSERVAÇÃO É QUE APLICAR col-md JÁ É O BASTANTE, POIS, POR EXEMPLO, DEFININDO
					    DUAS COLUNAS CADA UMA COM 6 GRIDS, PARA DISPOSITIVOS MAIORES QUE MD, TODOS MAIORES
					    QUE ELE TERÃO ESSE TAMANHO DE GRID. ABAIXO DELE, O BOOTSRAP AUTOMATICAMENTE COLOCA
					    OS ELEMENTOS OCUPANDO, CADA UM 100% DA LINHA, SE NAO COUBER O PROXIMO, ELE JA JOGA 
					    PRA BAIXO.



					    [ELEMENTOS DE LARGURA FIXA DENTRO DE UMA LINHA]

					    PARA COLOCAR ELEMENTOS DE TAMANHO FIXO INDEPENDENTE DO TAMANHO DA TELA, DENTRO DE UMA
					    DIV QUE CONTEM UMA ROW, DEVE SE COLOCAR NOS ELEMENTOS QUE SE QUER ESSE TAMANHO FIXO
					     DENTRO DA ROW, A CLASSE:

					    class="col"

					    INDEPENDENTE DO TAMANHO DO DISPOSITIVO, AQUELE ELEMENTO FICARÁ COM AQUELE TAMANHO.
					    SE MAIS DE UM ELEMENTO DENTRO DESSA ROW TIVER ESSA CONFIGURAÇÃO, NAO IMPORTA O TAMANHO
					    DA TELA, ELE NÃO CAIRÁ PARA A PROXIMA LINHA.


					    ASSIM :

					      <div class="row" style="border:1px solid red">
					        <div class="marcador col">
					          conteudo1
					        </div>
					        <div class="marcador col">
					          conteudo2
					        </div>
					        <div class="marcador col">
					          conteudo3
					        </div>
					        <div class="marcador col">
					          conteudo4
					        </div>
					      </div>

					     [ELEMENTOS DE LARGURA AUTOMATICA]

					     ISSO SE FAZ, QUANDO VOCE NÃO DEFINE UM col-NUMERO PARA UM ELEMENTO, ASSIM ELE SE
					     AJUSTA AUTOMATICAMENTE AO TAMANHO QUE TEM NA LINHA.
					     COMO POR EXEMPLO, SE TIVEREM 3 ELEMENTOS DENTRO DO CONTEINER, E EU DEFINIR QUE UMA 
					     É class="col-4" A OUTRA class="col-6" E A QUE SOBROU, EU NÃO DEFINIR CLASSE, AS DUAS
					     QUE EU DEFINI OCUPARÃO AS QUE EU DEFINI, MAS A QUE EU NÃO DEFINI, VAI FICAR COM TODO
					     O RESTANTE DO ESPAÇO QUE NAO ESTIVER OCUPADO PELOS OUTROS ELEMENTOS(QUE EU DEFINI TAMANHO)

					     assim:

					     <div class="row" style="border:1px solid red">
					        <div class="marcador col-6">
					          conteudo1
					        </div>
					        <div class="marcador col-4">
					          conteudo2
					        </div>
					        <div class="marcador col">
					          conteudo3
					        </div>
					      </div>

					      [PRAQUE ISSO AFINAL? MEIO RUIM PRA RESPONSIVIDADE, MAS VAI QUE É UTIL]


					      [LARGURA IGUAL EMPILHADA]


					      DEFINE QUE AS LARGURAS DE TODOS OS ELEMENTOS NAQUELA LINHA SERÃO IGUAIS
					      E QUE SE A LARGURA DO DISPOSITIVO QUE ESTA ACESSANDO FOR MENOR OU IGUAL
					      A QUE EU DEFINI, OS ELEMENTOS VAO SE EMPILHAR UM ABAIXO DO OUTRO, SENÃO
					      ELES FICARÃO UM AO LADO DO OUTRO, E DO MESMO TAMANHO.
					      (TB N E MT LEGAL)


					      exemplo:


					      <div class="row" style="border:1px solid red">
					        <div class="marcador col-sm">
					          conteudo1
					        </div>
					        <div class="marcador col-sm">
					          conteudo2
					        </div>
					        <div class="marcador col-sm">
					          conteudo3
					        </div>
					      </div>

					      **nesse caso, se for menor ou igual a sm, os elementos empilham um abaixo
					      do outro, a partir do momento que fica maior que sm, os elementos ficam 
					      lado a lado, do mesmo tamanho. DA PRA FAZER ISSO COM O MD, O LG E O XL
					      TAMBEM. (sim essa definição está certa, é menor ou igual mesmo)**

					      [ORDENANDO ELEMENTOS DENTRO DO GRID]

					      EU POSSO MUDAR O FLUXO DE EXIBIÇÃO(DE EXIBIÇÃO, NAO DE CODIGO) DOS ELEMENTOS
					      DENTRO DO CONTEINER. POR EXEMPLO, UM ELEMENTO1, ELEMENTO2, ELEMENTO3, POSSO 
					      MUDAR A ORDEM E DITAR QUE QUERO EXIBIR EM TELA PRIMEIRO O ELEMENTO3 DEPOIS O 
					      ELEMENTO1 DEPOIS O ELEMENTO2. PARA ISSO, BASTA POR NO ELEMENTO DENTRO DE UMA ROW
					      QUE ESTEJA DENTRO DE UMA DIV CONTEINER, A CLASSE:

					      class="order-NUMERO"

					      CLARO, SEMPRE COLOCANDO TAMBEM A CLASSE:

					      class="col=tipodetela-colunas"


					      ASSIM:


					      <div class="row" style="border:1px solid red">
					        <div class="marcador col-md-4 order-2">
					          conteudo1
					        </div>
					        <div class="marcador col-md-4 oder-3">
					          conteudo2
					        </div>
					        <div class="marcador col-md-4 order-1">
					          conteudo3
					        </div>
					      </div>

					      [ALINHANDO ELEMENTOS DENTRO DO CONTEINER]
					      [MUITO UTIL]

					      É MAIS FÁCIL ALINHAR USANDO ESSA CLASSE DO QUE USANDO MARGIN.
					      SE EU POR EXEMPLO, TENHO UMA DIV, E ELA ESTÁ MUITO COLADA DENTRO
					      DO CONTEINER, SE EU QUISER QUE ELA FIQUE POR EXEMPLO, LONGE DA MARGEM
					      POR UMA COLUNA, OU DUAS OU TRES, BASTA COLOCAR NO ELEMENTO DENTRO DA ROW
					      QUE ESTÁ DENTRO DA DIV CONTEINER, A CLASSE:

					      class="offset-tipodatela-NUMERO"

					      É IMPORTANTE DEFINIR O TIPO DA TELA NA CLASSE POIS, DIZ QUE, EM DETERMINADO
					      DISPOSITIVO OU MAIORES DO QUE ELE, A MARGEM DA ESQUERDA(OU A DISTANCIA, EM COLUNAS,
					       DA BORDA DO CONTEINER) NAQUELE DISPOSITIVO OU OUTROS MAIORES Q ELE, SERÁ DE X COLUNAS.


					      EX:
					      <div class="marcador col-md-3 order-2 offset-md-1">
					          conteudo1
        			       </div>


        			       ESSA CLASSE PODE SER USADA TANTO PARA UM ELEMENTO QUANTO PARA VÁRIAS, ESSA CLASSE
        			       EM RESUMO, DITA A MARGEM QUE DA ESQUERDA DE CADA ELEMENTO


        			       [ANINHAMENTO DE ROWS(ROW DENTRO DE ROW)]

        			       EU POSSO MUITO BEM CRIAR UMA ROW, E DENTRO DESSA ROW CRIAR UMA OUTRA.
        			       POR EXEMPLO, EU CRIO UMA ROW, E DENTRO DELA, UMA DIV PRA SER UM ELEMENTO QUE 
        			       TENHA POR EXEMPLO 6 COLUNAS, OCUPANDO METADE DA ROW CRIADA, E DENTRO DESSE ELEMENTO
        			        CRIAR UMA OUTRA ROW(QUE OCUPA TODO O ELEMENTO), CRIANDO NESTA ULTIMA OUTRO ELEMENTO,
        			       E DIZER QUE QUERO QUE ESSE ELEMENTO OCUPE 6 COLUNAS ENTÃO, EU TEREI UM ELEMENTO
        			       OCUPANDO 6 COLUNAS DE UMA ROW QUE ESTÁ DENTRO DE UM ELEMENTO, QUE POR SUA VEZ OCUPA
        			       6 COLUNAS DE UMA OUTRA ROW.
        			      
        			       [MUITO UTIL]

        			       ASSIM:


        			        <div class="row">
						      <div class="col-md-6" style="border:1px solid red">
						        COnteudo
						        <div class="row">
						          <div class="col-md-6"style="border:1px solid pink">
						          conteudo interno  
						          </div>
						        </div>
						      </div>
						    </div>

						     ______row_____________
						    |  ___el___            |
						    | | __row_ |           |
						    | ||___ el||           |
						    | ||______||           |
						    | |________|           |
						    |______________________|  




        			       *****DA UMA OLHADA NO SITE DA UDEMY QUANDO O LAYOUT FICA MD, A BARRA DE SESSÕES DO CURSO
        			       JA FEITAS FICA EMBAIXO DO SOBRE, MAS ACIMA DO RODAPE, E NO LARGE A BARRA FICA DO LADO,
        			       USANDO O ORDER, DA PRA REGULAR QUE POR EXEMPLO, QUANDO O DISPOSITIVO FOR SMALL, AQUELE
        			       ELEMENTO FICA OCUPANDO 100% DA TELA, E EM TAL POSIÇÃO(NA 2 POR EXEMPLO)*****


						    PRA FAZER O EFEITO DO LAYOUT DA UDEMY QUANDO FICA MD

						    <div class="row">
						        <div class="col-md-6" style="border:1px solid red">
						          <p>
						        Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
						         </p>
						          <div class="row">
						            <div class="col-md-12"style="border:1px solid pink">
						            <p>
						              Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
						               </p>
						            </div>
						          </div>
						        </div>
						        <div class="col-md-6">
						          <p>
						          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
						        </div>
						    </div>



						    	[ALINHAMENTO VERTICAL DE ITENS DENTRO DA ROW(DE CIMA PRA BAIXO)]

						    PARA ALINHAR OS ITENS DENTRO DA ROW,DEFININDO DE ONDE O ELEMENTO DENTRO DELE VAI 
						    COMEÇAR DE CIMA DE BAIXO, OU DO CENTRO, NA DIV QUE CONTEM A CLASSE ROW, COLOQUE
						     TAMBEM A CLASSE:

						    class="align-items-PARAM"

						    ONDE PARAM:

						    center, start, end


						    ASSIM:

						    <div class="marcador row align-items-center">
						        <div class="col borda">Área 1</div>
						        <div class="col borda">Área 2</div>
						        <div class="col borda">Área 3</div>
						      </div>





						      	[ALINHAMENTO HORIZONTAL DE ITENS DENTRO DA ROW(DA ESQUERDA PRA DIREITA)]

						      	PARA ALINHAR OS ITENS DA ESQUERDA PRA DIREITA, DEFINE SE ELES FICAM DO LADO 
						      	DIREITO, ESQUERDO, OU NO CENTRO, EM RELAÇÃO A BORDA LATERAL.
						      	COLOQUE NA ROW A CLASSE:

						      	class="justify-content-PARAM"

						      	ONDE PARAM:

						      	start, center, end


									      	 <div class="row justify-content-end">
										        <div class="marcador col-2">Área 1</div>
										        <div class="marcador col-2">Área 2</div>
										        <div class="marcador col-2">Área 3</div>
										      </div>

						      		[ALINHAMENTO *VERTICAL* INDIVIDUAL(ELEMENTOS DENTRO DA ROW) ]

						      PARA ALINHAR CADA ELEMENTO DA ROW DE SEU PROPRIO MODO, VOCE COLOCA
						      O ATRIBUTO DENTRO DA CLASSE, NO ELEMENTO QUE QUER POSICIONAR, ALEM DAS
						       CLASSES JA DITAS COLOQUE TAMBEM:

						       class="align-self-PARAM"

						       ONDE PARAM:

						       start, center(util), end

						       				[ESPAÇAMENTO ENTRE OS ELEMENTOS DO GRID]

						       	PRAICAMENTE COMO NO DISPLAY FLEX, VOCE DEFINE DENTRO DA ROW ONDE OS
						       	ELEMENTOS ESTÃO, O ESPAÇAMENTO QUE CADA ITEM DENTRO DA ROW VAI TER
						       	ENTRE A BORDA E OUTROS ELEMENTOS, DEFINE UMA MARGEM EXATA ENTRE 
						       	ELEMENTOS. PARA ISSO COLOQUE NA ROW:

						       	class="justify-content-PARAM"

						       	ONDE PARAM:

						       	around (CONSIDERA O ESPAÇO AO REDOR DO PRIMEIRO ELEMENTO, APLICA A MARGEM PARA TODOS
						       		OS LADOS[APLICA ESPAÇAMENTO ENTRE O PRIMEIRO ELEMENTO E O CONTEINER, 
						       		E APLICA TAMBEM, ENTRE O PRIMEIRO ELEMENTO, E OUTROS ELEMENTOS QUE ESTÃO 
						       		JUNTO COM ELE])
						       	between (APLICA A MARGEM SÓ ENTRE O PRIMEIRO ELEMENTO OS ELEMENTOS QUE ESTÃO JUNTO 
						       		COM ELE DENTRO DO CONTEINER)
						       	end(APLICA MARGEM O BASTANTE ENTRE O COMEÇO DA ROW E O PRIMEIRO ELEMENTO PARA QUE TODOS 
						       		OS ELEMENTOS FIQUEM NO FINAL DA LINHA)

						       [REMOVENDO A MARGEM ENTRE O CONTEUDO DOS ELEMENTOS DA ROW, E DO ELEMENTO DA ROW]


						       UMA ROW, TEM ELEMENTOS, NESSES ELEMENTOS, VOCE PODE COLOCAR VARIAS COISAS, MAS SE 
						       O FIZER, VAI NOTAR QUE ENTRE ESSAS COISAS E OS ELEMENTOS, TERÁ UMA MARGEM. ISSO
						       DIZ RESPEITO AO ELEMENTO DENTRO DA ROW, NÃO A ROW. O ELEMENTO DE UMA ROW TEM UMA
						       MARGEM DENTRO DELA, QUE DEIXA TUDO FEIO. PARA REMOVER ISSO, APLIQUE NA ROW
						       (SIM NA ROW, SO FUNCIONA NA ROW)
						       [REMOVE A MARGEM INTERNA DOS *ELEMENTOS* DA ROW]
						       A CLASSE:

						       class="no-gutters"


						        <div class="row">
						        <div class="borda col-2">
						          <div style="background: pink;">isjas</div>
						        </div>
						        <div class="borda col-2">Área 2</div>
						        <div class="borda col-2">Área 3</div>
						      </div>


						      ----------------------*[FLEXBOX DO BOOTSTRAP]*------------------------

						      PARA FAZER UM CONTEINER QUE TEM ELEMENTOS FLEX, CRIE UMA DIV E PONHA A CLASSE
						      ABAIXO NELA, DEPOIS DENTRO, COLOQUE AS DIVS QUE ABRIGARÃO OS ELEMENTOS QUE VOCE
						      DEESEEJA.

						      A CLASSE QUE VAI NO CONTEINER:

						      class="d-flex"

						      PARA CONFIGURAR COMO OS ELEMENTOS APARECEM DENTRO DO CONTEINER FLEX, VOCE PODE
						      USAR AS SEGUINTES CLASSES SOMADAS A ANTERIOR, ADCIONE AO CONTEINER FLEX, UMA 
						      DAS CLASSES:

						      class="flex-row" - É COMO SE TIVESSE UMA LINHA DENTRO DO FLEX, QUE TEM O TAMANHO
						      EXATO DO CONTEINER, ONDE OS ELEMENTOS SE ALINHAM LADO A LADO, COMO SE FOSSEM 
						      COLUNAS.(SIM A DESCRIÇÃO ESTÁ CERTA.)

						      class="flex-column" - É COMO SE TIVESSE UMA COLUNA DENTRO DO FLEX COM O EXATO
						      TAMANHO DO CONTEINER, ONDE OS ELEMENTOS INTERNOS, SE AGRUPAM UM ABAIXO DO OUTRO
						      COMO SE FOSSEM LINHAS.(SIM A DESCRIÇÃO ESTÁ CERTA.)

						      class="flex-row-reverse"- FUNCIONA COMO O FLEXROW, MAS INFERTENDO OS ITENS, 
						      O QUE SERIA DO PRIMEIRO PRO ULTIMO, AGORA É DO ULTIMO PRO PRIMEIRO.

						      class="flex-column-reverse" - FUNCIONA COMO O FLEX REVERSE, MAS INVERTENDO OS
						      ITENS, O QUE SERIA DO PRIMEIRO PRO ULTIMO, AGORA É DO ULTIMO PRO PRIMEIRO.

						      ****ELEMENTO VERTICAL: row
						      ****ELEMENTO HORIZONTAL: column

						      [ALINHAMENTO HORIZONTAL NO FLEX]

						      	PEGA TODOS OS ITENS E OS ALINHA COM BASE NA CONFIGURAÇÃO, MAS OS ESTICA HORIZONTALMENTE
						      	APLIQUE NO FLEX A CLASSE:

						      class="justify-content-PARAM"


						      ONDE PARAM:

						      center - ALINHA NO CENTRO
						      start- ALINHA NO COMEÇO
						      end- ALINHA NO FIM
						      around - ALINHA OS ELEMENTOS COM BASE NA DISTRIBUIÇÃO DE UMA MARGEM AUTOMATICA
						      ENTRE O CONTEINER E OS ELEMENTOS E DOS PROPRIOS ELEMENTOS ENTRE ELES
						      between - ALINHA OS ELEMENTOS COM BASE NA DISTRIBUIÇÃO DE UMA MARGEM AUTOMATICA
						      ENTRE OS ELEMENTOS ENTRE SI.

						      ASSIM:

						      <div class="caixa d-flex flex-column justify-content-between">
						        <div class="item">Flex item 1</div>
						        <div class="item">Flex item 2</div>
						        <div class="item">Flex item 3</div>
						      </div>
						      [ALINHAMENTO VERTICAL NO FLEX]

						      PEGA TODOS OS ITENS E OS ALINHA COM BASE NA CONFIGURAÇÃO, MAS OS COMPRIME
						      	APLIQUE NO FLEX A CLASSE:

						      class="align-item-PARAM"

						      ONDE PARAM:
						      start - ALINHA NO COMEÇO
						      center- ALINHA NO CENTRO
						      end- ALINHA NO FIM
						      baseline - ALINHA NA BASE DO TEXTO
						      strecth - ALINHA ESTICANDO OS ITENS ATÉ COMPLETAR O FLEX DO TOPO AO FIM(default)

						      <div class="caixa d-flex flex-column align-items-center">
						        <div class="item">Flex item 1</div>
						        <div class="item">Flex item 2</div>
						        <div class="item">Flex item 3</div>
						        <div class="item">Flex item 1</div>
						      </div>

						      [ALINHAMENTO INDIVIDUAL DE ELEMENTOS DO FLEX]

						      ESSA CLASSE VAI NA DIV DENTRO DOS ELEMENTOS DO FLEX. ALINHA CADA UM INDIVIDUALMENTE
						      COLOQUE NO ELEMENTO:

						      class="align-self-PARAM"

						      ONDE PARAM:

							  start - ALINHA NO COMEÇO
						      center- ALINHA NO CENTRO
						      end- ALINHA NO FIM
						      baseline - ALINHA NA BASE DO TEXTO
						      strecth - ALINHA ESTICANDO OS ITENS ATÉ COMPLETAR O FLEX DO TOPO AO FIM(default)

						      ASSIM:

						       <div class="caixa d-flex">
						        <div class="item align-self-center">Flex item 1</div>
						        <div class="item  align-self-baseline">Flex item 2</div>
						        <div class="item  align-self-center" >Flex item 3</div>
						        <div class="item">Flex item 4</div>
						        <div class="item">Flex item 5</div>
						      </div>


						      			***PODE USAR IMAGENS E OUTROS NA FLEXBOX***

						      		----------[MARGEM AUTOMATICA EM ITENS FLEX]---------


						      		PARA DEFINIR UMA MARGEM AUTOMATICA ENTRE OS ELEMENTOS DO FLEX.
						      		EM *CADA ITEM DO CONTEINER* COLOQUE UMA DAS CLASSES:

						      			m-auto, mr-auto, ml-auto, mt-auto, mb-auto

						 -----------[QUANTIDADE DE ITENS DENTRO DE UMA MESMA LINHA DO FLEX]------------

						 DITA SE OS ELEMENTOS DENTRO DO FLEX SERÃO ESPREMIDOS DENTRO DO CONTEINER, OU SE
						 QUANDO NÃO HOUVER MAIS ESPAÇO, ELES CAIRÃO PARA A PROXIMA LINHA.
						 NO CONTEINER D-FLEX COLOQUE UMA DAS CLASSES:

						 flex-wrap - DIZ QUE QUANDO NAO HOUVER MAIS ESPAÇO DENTRO DO FLEX, OS ITENS CAIRÃO
						  PARA A PROXIMA LINHA
						 flex-nowrap - DIZ QUE OS ELEMENTOS DENTRO SERÃO ESPREMIDOS DENTRO DO FLEX.


						 ----------------------------------*[SPINNER]*-----------------------------------


						 						É UM CARREGAMENTO, GIRATORIO OU NÃO. 
						 			PARA APLICAR, CRIE UMA DIV, E COLOQUE UMA DAS CLASSES:

						 			class="spinner-border"
						 			SPINNER GIRATÓRIO, UMA COBRINHA RODANDO.

						 			OU

						 			class="spinner-grow"
						 			SPINNER DE BOLINHA QUE AUMENTA E DIMINUI

						 			PARA MUDAR A COR DE QUALQUER UM DESSES SPINNERS, INSIRA NA DIV A 
						 			CLASSE:

						 			class="text-COR"

						 			DENTRO DA DIV, COLOQUE UM SPAN COM A CLASSE:

						 			class="sr-only"
						 			COM ALGUM TEXTO DENTRO DA SPAN SINALIZANDO POR EXEMPLO:
						 			"CARREGANDO..."
						 			PARA SINALIZAR QUE AQUILO É UM LOAD


						 			USE MARGENS PARA ALINHAR.

						 		---------------*[IMAGEM RESPONSIVA]*----------------
						 		PARA A IMAGeM Se AJUSTAR AO CONTeINeR PONHA NA IMAGeM:

						 		class="img-fluid"

						 		 <img src="img/saiba.png" class="img-fluid no-pointer">
								PARA PROIBIR O USUARIO DE ARRASTAR UMA IMAGEM:

								*****NAO E UMA CLASSE, CRIE UMA E PONHA :
								 pointer-events: none;


								 MUDAR A POSIÇÃO DOS WLWMWNTOS QUANDO MUDA O DISPOSITIVO:


									@media(max-width:767.98px){
										#line2{
											justify-content: center;
											margin-top: 3%;
										}
										#line1{
											justify-content: center;
										}
									}
					  <div class="container">
					        <div class="row">
					          <div id="line1" class="col-12 col-md-8 d-flex align-self-start mt-2">
					            <ul class="list-inline mt-2v ">
					              <li class="list-inline-item"><a href="" class="text-warning">Home</a></li>
					              <li class="list-inline-item"><a href="" class="text-warning">Recursos</a></li>
					              <li class="list-inline-item"><a href="" class="text-warning">Beneficios</a></li>
					              <li class="list-inline-item"><a href="" class="text-warning">Preços</a></li>
					            </ul>
					          </div>
					          <div id="line2" class="col-12 col-md-4 align-self-end d-flex align-self-end">
					            <a href="www.facebook.com" class="btn btn-outline-blue ml-2"><i class="fab fa-facebook fa-lg"></i></a>
					            <a href="" class="btn btn-outline-primary ml-2"><i class="fab fa-twitter fa-lg"></i></a>
					            <a href="" class="btn btn-outline-gradient ml-2"><i class="fab fa-instagram fa-lg"></i></a>
					            <a href="" class="btn btn-outline-danger ml-2"><i class="fab fa-youtube fa-lg"></i></a>
					          </div>
					        </div>
					      </div>

					      -------------------*[FAVICON]*--------------------------

					      COLOQUE NO HEADER:

					      <link rel="icon" type="icon href="url-do-icon">

					      -------------------*[CAROUSEL]*------------------------
					      É UM SLIDER.
					      A ESTRUTURA BASICA DE UM SLIDER SIMPLES(sem botoes) É FACIL DE FAZER
					      PRIMEIRO CRIE UMA DIV E NELA PONHA AS CLASSES:

					      			class="caroulsel" E class="slider"

					      						E O ATRIBUTO:

					      					data-ride="caroulsel"


					      CRIE UMA DIV MAIS INTERNA, PARA SER O CORPO DO SLIDER, E NELA
					      PONHA A CLASSE:

					      				class="carousel-inner"

					      DEPOIS DENTRO DESSA ULTIMA DIV INNER, VOCE CRIA A AREA DE CADA
					      SLIDE QUE O SLIDE CONTERÁ, PARA ISSO, CRIE UMA DIV PARA CONTER
					      CADA CONTEUDO QUE O SLIDE VAI EXIBIR POR VEZ, E NELA PONHA A CLASSE

					      				class="caroulsel-item"

					      PODE COLOCAR O QUE QUISER DENTRO, IMAGEM, TEXTO, BOTÕES ETC.
					      [PARA IMAGENS, COLOQUE NA IMAGEM A CLASSE: class="img-fluid"]

					      PARA DEFINIR O PRIMEIRO ITEM A SER EXIBIDO, PONHA NA DIV QUE CONTEM
					      O CONTEUDO QUE SERA O PRIMEIRO A CLASSE:

					      						class="active"

					      		EXEMPLO:

					      		 <div class="carousel slide" data-ride="carousel">
						            <div class="carousel-inner">
						               <div class="carousel-item active">
						                 <img src="img/imagem1.jpeg" class="img-fluid">
						               </div>
						                <div class="carousel-item">
						                  <img src="img/imagem2.jpeg" class="img-fluid">
						               </div>
						                <div class="carousel-item">
						                  <img src="img/imagem3.jpeg" class="img-fluid">
						               </div>
						            </div>
						          </div>

						    		[CAROUSEL COM CONTROLES DIRECIONAIS]

						  PARA ADCIONAR CONTROLES QUE DITAM A EXIBIÇÃO PARA A PROXIMA
						  IMAGEM, ADCIONE DEPOIS DA DIV INNER, E ANTES DO FECHAMENTO DA 
						  ULTIMA DIV(CAROULSEL)  LINKS CONTENDO DENTRO UM ICONE DE SETA
						  (DE PREFERENCIA COM SPAN) E NOS LINKS PONHA A CLASSE:

						  class="caroulsel-control-prev" (PARA A SETA DA ESQUERDA)
						  JUNTAMENTE COM O ATRIBUTO :

						  data-slide="prev" (do ingles, previous)

						  DENTRO DO SPAN DO LINK PONHA A CLASSE:

						  caroulsel-control-prev-icon
						  (PODE POR OUTRO DE ESCOLHA)

						* AGORA PRECISAMOS FAZER OS CONTROLES SE LIGAREM COM AS IMAGENS DO CAROUSEL
						 PARA ISSO, NO HREF DO LINK CRIE UMA ID(COM #, EX: #controles), E NA PRIMEIRA
						 DIV, A MAIS EXTERNA, QUE CRIA O CAROULSEL, COLOQUE ESSE MESMO ID, SEM #.
						 ASSIM: *
						 [(SE TIVER DOIS SLIDES NO MESMO SITE, COLOQUE UMA ID DIFERENTE PRA CADA UM, 
						 	OU O BOTÃO DO SLIDE DE UM CONTROLARÁ O OUTRO)]

						  <a href="#controle-caroulsel" class="carousel-control-prev" data-slide="prev">
				              <span class="carousel-control-prev-icon"></span>
				          </a>

				          PARA O BOTÃO DA DIREITA, SIGA O MESMO PROCESSO TROCANDO prev por next


				          <a href="#controle-caroulsel" class="carousel-control-next" data-slide="next">
				              <span class="carousel-control-next-icon"></span>
				           </a>



				           ASSIM:




					        <div class="carousel slide" data-ride="carousel" id="controle-caroulsel">
					            <div class="carousel-inner">
					               <div class="carousel-item active">
					                 <img src="img/imagem1.jpeg" class="img-fluid">
					               </div>
					                <div class="carousel-item">
					                  <img src="img/imagem2.jpeg" class="img-fluid">
					               </div>
					                <div class="carousel-item">
					                  <img src="img/imagem3.jpeg" class="img-fluid">
					               </div>
					            </div>
					            <a href="#controle-carousel" class="carousel-control-prev" data-slide="prev">
					              <span class="carousel-control-prev-icon"></span>
					            </a>
					            <a href="#controle-carousel" class="carousel-control-next" data-slide="next">
					              <span class="carousel-control-next-icon"></span>
					            </a>
					          </div>


					          [CAROUSEL COM INDICADOR DE POSIÇÃO DA IMAGEM NO SLIDE]


					          INDICA SE A IMAGEM EM EXIBIÇÃO É A PRIMEIRA, SEGUNDA, TERCEIRA
					          E TAMBEM QUANTAS IMAGENS TEM NO SLIDE, TAMBEM DA PRA PULAR PRA
					          A IMAGEM SELECIONADA CLICANDO NO TRAÇO REFERENTE A IMAGEM.

					          ESSES CONTROLES DEVEM SER COLOCADOS ANTES DO COMEÇO DA DIV INNER
					          , DEPOIS DO COMEÇO DA DIV MAIS EXTERNA.

					          PARA ISSO NO LUGAR CITADO CRIE UMA OL, ONDE FICARÃO OS ITENS, COLOQUE
					          NELA A CLASSE:

					          				class="carousel-indicators"

					          E DENTRO, DAS LIS, OS ATRIBUTOS::

					          data-target="#O-MESMO-ID-COLOCADO-PARA-AS-SETAS"
					          data-slide-to="0"(0 pois em linguagem de programação, 0 é o primeiro)


					          E PARA DEFINIR A IMAGEM QUE APARECE PRIMEIRO, PONHA NA LI TAMBEM, A CLASSE

					          class="active"

					          (FAZ SENTIDO COLOCAR ESSA CLASSE, NA DIV DA IMAGEM QUE EU DEIXAR ATIVA TAMBEM
					          	OU SEJA, SE COLOQUEI ACTIVE NA DIV DA PRIMEIRA IMAGEM, COLOCO ESSA CLASSE
					          	NA PRIMEIRA LI, IMAGEM 0)


					          PARA CADA LI, VOCE MUDA O DATA SLIDE PARA O PROXIMO NUMERO.

					          ASSIM:
					          <ol class="carousel-indicators">

				                  <li class="active" data-target="#controle-carousel1" data-slide-to="0"></li>
				                  <li data-target="#controle-carousel1" data-slide-to="1"></li>
				                  <li data-target="#controle-carousel1" data-slide-to="2"></li>
				                </ol>




				                EXEMPLO:


				                 <div class="carousel slide" data-ride="carousel" id="controle-carousel1">

					                <ol class="carousel-indicators">

					                  <li class="active" data-target="#controle-carousel1" data-slide-to="0"></li>
					                  <li data-target="#controle-carousel1" data-slide-to="1"></li>
					                  <li data-target="#controle-carousel1" data-slide-to="2"></li>

					                </ol>

					                      <div class="carousel-inner">

					                         <div class="carousel-item active">
					                           <img src="img/imagem1.jpeg" class="img-fluid">
					                         </div>

					                          <div class="carousel-item">
					                            <img src="img/imagem2.jpeg" class="img-fluid">
					                         </div>

					                          <div class="carousel-item">
					                            <img src="img/imagem3.jpeg" class="img-fluid">
					                         </div>

					                      </div>


					                      <a href="#controle-carousel1" class="carousel-control-prev" data-slide="prev">
					                        <span class="carousel-control-prev-icon"></span>
					                      </a>

					                      <a href="#controle-carousel1" class="carousel-control-next" data-slide="next">
					                        <span class="carousel-control-next-icon"></span>
					                      </a>


					                    </div>


					          			[CAROULSEL COM LEGENDAS NA IMAGEM]


					         PARA ADCIONAR LEGENDAS NA IMAGEM, DENTRO DA DIV RESPONSÁVEL POR CADA
					         ITEM DO SLIDE, VOCE COLOCA, ABAIXO DA IMAGEM, UMA DIV COM A CLASSE:

					         					class="carousel-caption"

					        	DENTRO DELA VOCE PODE COLOCAR TUDO, IMAGEM, TEXTO, H1, H2, BOTOES
					        	FORMS, ETC.



					        	ASSIM:

					        	<div class="carousel-caption">
	                             <h3>Item 1</h3>
	                             <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
	                             tempor incididunt ut labore et dolore magna aliqua. </p>
	                           </div>



	                           PODE APLICAR ESTILIZAÇÃO NOS TEXTOS NA PROPRIA DIV, MAS É MAIS ORGANIZADO
	                           CRIAR UMA DIV DENTRO DESTA E TRANSFERIR OS TEXTOS PRA DENTRO.



	                           COMO AS VEZES COLOCAMOS TEXTOS GRANDES NO CAROUSEL, COMO NO PROJETO SPOTIFY,
	                           OS DIRECIONAIS SLIDERS, PODEM FICAR ENCIMA DO TEXTO, ENTÃO, PARA DIMINUIR
	                           O TAMANHO PADRÃO, COLOQUE NO SEU CSS A CLASSE A SEGUIR, E ESTILIZE DIMINUINDO
	                           O TAMANHO DA AREA CLICAVEL
	                           (N DIMINUI O BOTÃO[ACHO Q SE O ICONE FOR PERSONALIZADO])


	                           .carousel-control-next, .carousel-control-prev{
	                           	width: 5%;
	                           }


	        		____________________ [EXEC COMMAND] _____________________

	        		  EXECUTA DETERMINADOS COMANDOS(EXPERIMENTAL, CUIDADO).
	        		  útil para por exemplo copiar algo para o clipboard
	        	https://www.w3schools.com/jsref/met_document_execcommand.asp


	           -------------------[ DICAS DE DESIGN UI/UX] ------------------

	           1 QUANDO USAR UM EFEITO PARALLAX NA DIV QUE A IMAGEM DESCE, COLOCA
	           	 UMA SETINHA INDICANDO QUE TEM CONTEUDO PRA BAIXO, ENTENDA DO QUE 
	          	 EU ESTOU FALANDO ACESSANDO ESSE SITE:
	          	 https://www.google.com/drive/

	          	 É DAORA COLOCAR ESSA IMAGEM DA SETINHA LINKANDO PRA A PROXIMA DIV
	          	 COLOCANDO O ID DA DIV NO HREF. FICA MUITO LEGAL.


	          	 ---------

	          2 



*[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]**[o]*
							
									*[o]* JAVASCRIPT *[o]*

				JAVASCRIPT É UMA LINGUAGEM INTERPRETAVEL, USADA PARA INTERAGIR COM ELEMENTOS HTML NÃO
 				PRECISA SER COMPILADA, POIS OS BROWSERS INCLUEM O INTERPRETADOR DO JAVASCRIPT POR NATUREZA



						PODEMOS INCLUIR UM ARQUIVO JAVASCRIPT EM UM SITE DE DUAS FORMAS


										1 direamente no código
									2 o link para um arquivo javacript


										DA PRIMEIRA FORMA:

										<script>
										conteudo
										</script>

			(colocar essa tag dentro do header faz com que o codigo seja processado antes do carregamento da pagina)


									DA SEGUNDA FORMA

							<script src="meu_arquivo.js"></script>


					SE FOR UM CODIGO MUITO EXTENSO, LINKE O ARQUIVO

			GERALMENTE, O NOME DO ARQUIVO JS SUGERE A FUNÇÃO DAQUELE SCRIPT, EXEMPLO:

								guardar_dados.js

					NÃO PODE CONTER ESPAÇOS OU CARACTERES ESPECIAIS.


										OBSERVAÇÕES


								     [PRECEDENCIA DE EXECUÇÃO]

				* O JAVASCRIPT COMO UMA LINGUAGEM INTERPRETADA, CONTROLA ELEMENTOS EM 
				TEMPO DE EXECUÇAO. PARA ISSO É IMPORTANTE SABER QUE DEVEMOS CONSTRUIR
				A LOGICA TENDO EM MENTE QUE ELE DEVE CONTROLAR OS ELEMENTOS JÁ RENDERIZADOS
				PELO BROWSER, OU SEJA, SE OS ELEMENTOS NÃO CARREGARAM, E O JS EXECUTA, A LOGICA
				QUEBRA.

				PORTANTO, SE VOCE MANDA O JAVASCRIPT DO HEADER COLOCAR UMA STRING NUMA INPUT
				O JS VAI EXECUTAR ANTES DA INPUT SER CARREGADA E N VAI FUNCIONAR. PARA DAR CERTO
				COLOQUE A FONTE PARA O SCRIPT DEPOIS DO ELEMENTO HTML NO DOCUMENTO, ASSIM O ELEMENTO
				SERÁ LIDO, E APÓS, O SCRIPT JAVA, ASSIM, EXECUTANDO O CODIGO SO DEPOIS DO ELEMENTO
				SER LIDO  E RENDERIZADO.




				* O JAVASCRIPT ACHA O OBJETO QUE QUER MANIPULAR NUMA ARVORE CHAMADA DOM, IDENTIFICA
				CADA UMA DELAS PELO ID DEFINIDO(ja falamos disso)


				*COMENTAR É IMPORTANTE. PARA COMENTAR UMA LINHA USE // E PARA COMENTAR TRECHOS /* */
				É BOM COMENTAR TRECHOS DO CODIGO JS POIS E NECESSARIO DIZER O QUE ACONTECE EM CADA
				PARTE, SE AQUELA INSTRUÇÃO NÃO FOR EXECUTADA. ALÉM DO QUE, NA HORA QUE ESTAMOS TRABALHANDO
				AS IDEIAS ESTAO CLARAS NA HORA, MAS VOLTAMOS DEPOIS PODEMOS NAO ENTENDER, É BOM EXPLICAR
				CADA PARTE, ATÉ PRA AJUDAR POSSIVEIS MANUTENÇÕES ATE PRA OUTRAS PESSOAS.


				*SEMPRE USAR ASPAS PARA PASSAR UM TEXTO COMO PARAMETRO PARA UM METODO, E PARA DECLARAR 
				STRING.

				*PODE OU NAO USAR PONTO E VIRGULA.








												[VARIAVEIS]

					JAVASCRIPT TEM 5 TIPOS DE VARIAVEIS: number, boolean, e string, null, undefined.


									regras de declaração de variaveis:

						nao pode iniciar o nome delas com numeros, apenas com letras ou _
						nao pode usar caractere especial , ou espaço ex: ~ ^ 
						nao pode usar palavras reservadas, como comandos da linguagem.


						*	ATRIBUIÇÃO:


					TEMOS QUE INICIALIZAR VARIAVEIS COM VALORES DE TIPOS RESPECTIVOS PARA O INTERPRETADOR
					DECIDIR QUE TIPO AQUELA VARIAVEL É(COMO ATRIBUIR UM NUMERO A UMA VARIAVEL, ENTAO, ELA
						SERÁ TIPO NUMBER)

					NULL:

					QUANDO NAO TIVERMOS VALORES PARA ATRIBUIR AINDA, E TIVERMOS QUE DEIXAR VAZIO, USAMOS
					NULL. ISSO DIZ QUE APESAR DE TERMOS CRIADO A VARIAVEL, NAQUELA POSIÇÃO DE MEMORIA
					SE ENCONTRA UM DADO VAZIO.(USADO PRA IDENTIFICAR A AUSENCIA DO OBJETO)

					var teste = null;

					
					EX: 
					var nome = null;
					alert(nome); // mostra null.
					alert(typeof nome); // mostra object.

					UNDEFINED:

					DIFERENTE DE NULL, DIZ QUE NAQUELA POSIÇÃO O VALOR É INEXISTENTE, DE FATO UMA VARIAVEL
					UNDEFINED NÃO TEM TIPO DEFINIDO AINDA. UMA VARIAVEL DECLARADA, QUE NÃO TEVE NENHUM VALOR
					ATRIBUIDO A ELA, PORTANTO NAO TEM TIPO.

					var teste2 = undefined OU

					var teste2


					EX: 
					var nome;
					alert(nome); //mostra undefined.
					alert(typeof nome); // mostra undefined.






											É CASE SENSITIVE


						DECLARE VARIAVEIS QUE DIZEM PRA QUE AQUELA VARIAVEL SERVE.

						PARA DECLARAR UMA VARIAVEL, UTILIZA-SE ANTES A PALAVRA: var
						(É OPCIONAL, MAS POR CONVENÇÃO É MELHOR PARA IDENTIFICAR
							QUE AQUILO É UMA VARIAVEL)




						var = SEGUE O FLUXO PADRÃO DO JS, EM COMANDOS DE BLOCO(IF)
						ÁINDA SERÁ GLOBAL. É ACESSIVEL DE FORA DO BLOCO DEPOIS DE 
						CRIADA.

						let = AO CONTRARIO DO var NÃO É ACESSIVEL DE FORA DO BLOCO
						EM QUE SE ENCONTRA DEPOIS DE CRIADA.

						declarando variaveis:

						//string
						var texto = 'Curso de JavaScript'

						//number
						var numeroInteiro = -7

						var numeroFracionario = 11003.3
						//boolean
						var teste = true

						O JAVASCRIPT IDENTIFICA O TIPO DA VARIAVEL A PARTIR DA 
						ESTRUTURA DO DADO ATRIBUIDO A VARIAVEL;

						DÁ PRA CRIAR VARIAVEIS EM QUALQUER LUGAR DO SCRIPT






				-----------------------[COMANDOS]--------------------------

						ANTES UMA OBSERVAÇÃO: document é o objeto no qual todos
						os elementos html estão incluidos.


						alert('oi') // abre uma caixa de diálogo (bom pra debug)
		document.write(texto) // escreve um conteudo dentro do documento(texto ai é uma string)
		console.log(var) // joga no console o que está sendo passado como parametro pra a função(bom p debug)

		prompt(param) // pede uma entrada do usuario(numa caixa de dialogo, dá pra atribuir 
		esse comando a uma variavel, e entao ele jogará na variavel a ele atribuida,
		 o valor digitado, assim: var idade =prompt('Digite a sua idade')[PROMPT SEMPRE RECEBE COMO STRING]

					------------------[CONCATENAÇÃO]----------------------

					PARA EXIBIR, POR EXEMPLO, UM TEXTO DIRECIONADO DE OLÁ,
					FARIAMOS:

					document.write('<h1>Olá jose, tudo bem?</h1>')

					MAS, SE EU QUISER QUE O USUARIO ME DIGA QUAL SEU NOME
					E O NOME PODE VARIAR?

					ARMAZENAMOS O NOME NUMA VARIAVEL, E A COLOCAMOS NO PARAMETRO
					JUNTO COM O TEXTO, MAS COMO?

					ASSIM:

					document.write('<h1>Olá jose,' +nome+' tudo bem?</h1>')

					COMO NO JAVA, COLOQUE A CADEIA DE STRINGS ENTRE ASPAS, DEPOIS UM +
					NA FRENTE DA VARIAVEL, E SE AINDA VIER OUTRA CADEIA DE STRINGS, OUTRO +

					ISSO SIGNIFICA, QUE VOCE ESTÁ JUNTANDO AS PARTES PARA EXIBIR UMA COISA
					SO



					----------------[ALTERANDO O VALOR DE VARIAVEIS]---------------------

					PARA ALTERAR O VALOR DE UMA VARIAVEL CRIADA, BASTA ATRIBUIR UM VALOR A ELA
					FORA DA DECLARAÇÃO DE VARIÁVEL.

					EX:

					teste = 'Um texto';

					SE DEPOIS EU ATRIBUIR A ESSA VARIAVEL UM VALOR NUMERICO, A VARIAVEL CASTA(MUDA)
					DE TIPO, CONFORME O TIPO DE DADO ATRIBUIDO A ELA

					EX:

					teste ='Um texto';

					console.log(texto); //exibe um texto, em string


					teste = 127;

					console.log(texto); // exibe um numero, em number
				------------------[OPERADORES DE ATRIBUIÇÃO E COMPARAÇÃO]--------------------

						 == | VERIFICA SE OS VALORES COMPARADOS SÃO IGUAIS
						=== | IDENTICO, VERIFICA SE OS VALORES COMPARADOS SÃO IGUAIS E DO MESMO TIPO
						!=  | DIFERENTE, VERIFICA SE OS VALORES COMPARADOS SÃO DIFERENTES
						!== | NAO IDENTICO, VERTIFICA SE OS VALORES SÃO DIFERENTES E DE TIPOS DIFERENTES
						 <  | MENOR, VERIFICA SE O VALOR DA ESQUERDA É MENOR QUE O VALOR DA DIREITA
						 >  | MAIOR, VERIFICA SE O VALOR DA ESQUERDA É MAIOR QUE O DA DIREITA
						 <= | MENOR OU IGUAL, VERFIFICA SE O VALOR É DA ESQUERDA É MAIOR OU IGUAL AO 
						 	 VALOR DA DIREITA
						 >= | MAIOR OU IGUAL, VERIFICA SE O VALOR DA ESQUERDA É MAIOR OU IGUAL AO 
						 	VALOR DA DIREITA 



				   DADOS RECEBIDOS DO PROMPT CHEGAM COMO STRING, PORTANTO, SE VOCE PERGUNTA SE O DADO
					É IDENTICO A UM NUMERO, OS VALORES PODEM ATE SER IGUAIS, MAS COMO NÃO SERÃO DO MESMO TIPO
				   A CONDIÇÃO SERÁ FALSA.




				 			--------------------[CASTING DE DADOS]----------------------

				 			  SE SOMAR DOIS NUMEROS STRINGS, ELE OS CONCATENA, NAO SOMA

				 			  PARA PODER SOMÁ-LOS, TEMOS QUE CONVERTE-LOS PARA NUMEROS.

				 	TANTO PARA CONVERTER PARA NUMEROS QUANTO PRA STRINGS, OU NUMEROS FRACIONARIOS
				 	PODEMOS UTILIZAR AS FUNCOES PARSE.


			   										parseInt(var) 
			      CONVERTE PARA INTEIRO A PARTE INTEIRA DE UM DADO "NUMERICO", MESMO QUE SEJA UMA STRING
			      O INT CORTA A PARTE FFRACIONARIA DO DADO.

			      									  ----------

			   										parseFloat(var) 
			   		  CONVERTE PARA UM NUMERO FRACIONARIO UM DADO(nao corta a parte fracionaria)
			   		  								  ----------

			   										var.toString()
			   		CONVERTE VALORES DO TIPO NUMBER PARA STRING, ESSE MÉTODO É TIFERENTE, POIS A 
			   		VARIAVEL NAO ENTRA NELE COMO PARAMETRO, MAS ACOMPANHADA DELE, ANTES DE UM PONTO.


			   				VOCE PODE GUARDAR O RESULTADO DA CONVERSÃO NA PROPRIA VARIAVEL A SER
			   							CASTADA, OU EM OUTRA, SEM PROBLEMAS.	


										var variavel1 = 10;
										var variavel2 = 20;
										var aux = null;

										aux = variavel1.toString();
										variavel1 = variavel1.toString();
										variavel2 = variavel2.toString();



							---------[COMPARADORES LOGICOS]---------


				&& -> OPERADOR "E" SE VAR1 "E" VAR2.. RETORNA VERDADEIRO SE, E SOMENTE SE, TODAS AS COMPARAÇÕES
									CONECTADAS POR "E" FOREM VERDADEIRAS.


			|| -> OPERADOR "OU" SE VAR1 "OU" VAR2.. RETORNA VERDADEIRO SE NO MINIMO UMA DAS COMPARAÇÕES
									 CONECTADAS POR "OU" FOR VERDADEIRA


					! -> OPERADOR DE NEGAÇÃO, INVERTE O RESULTADO LOGICO DA EXPRESSAO


					OS OPERADORES VÃO CONECTANDO CADA CONDIÇÃO, E TUDO ISSO DENTRO DE UM SÓ PARENTESE

					EX:

					*
					if (nota>=media && faltas<=faltas_maximas) {
			
						}
					*

					SÓ SE USA MAIS DE UM PARENTESE NO CASO DE NEGAÇÃO, QUANDO SE ABRE () COLOCA A
					EXCLAMAÇÃO, E DEPOIS ABRE OUTRO () ONDE VAI A EXPRESSÃO.

					EX:

					*
					if (!(2>4)){
						
					}
					*
					----------------[OPERADOR TERNÁRIO]--------------------

					UM OPERADOR TERNÁRIO, É UMA ESTRUTURA DE CONDIÇÃO ENXUTA
					MAIS SIMPLES QUE O IF ELSE, NÃO PERMITE O DESENVOLVIMENTO
					DE LOGICAS COMPLEXAS CASO UM RESULTADO LOGICO SEJA ATINGIDO
					(CASO FALSO OU CASO VERDADEIRO), SOMENTE PERMITE O RETORNO
					DE UM VALOR NUMERICO OU STRING, OU BOOLEAN, CASO A CONDIÇÃO
					TENHA COMO RESULTADO FALSE OU TRUE.

					EM RESUMO, SE A CONDIÇÃO FOR VERDADEIRA, RETORNA ALGO, SENÃO
					RETORNA OUTRA, NADA MAIS COMPLEXO QUE ISSO.

					GUARDAMOS O RESULTADO LOGICO DESSA EXPRESSAO NUMA VARIAVEL.


					A ESTRUTURA DO OPERADOR TERNÁRIO É ESSA:

					var variavel = <condicao> ? <verdadeiro> : <falso>

					OU:

					var variavel = null;

					variavel = <condicao> ? <verdadeiro> : <falso>


					ONDE:

			<condicao>     É A CONDIÇÃO QUE SERÁ TESTADA, E RETORNA UM RESULTADO LOGICO
			<verdadeiro>   É O QUE ACONTECE QUANDO A CONDIÇÃO TEM UM ESTADO LOGICO VERDADEIRO
			<falso>        É O QUE ACONTECE QUANDO A CONDIÇÃO TEM UM ESTADO LÓGICO FALSO.


		var resultado = nota>=media && faltas>=faltas_maximas ? 'Aluno aprovado' : 'Aluno Reprovado';

		PODE COLOCAR PARENTESE, FICA MAIS ORGANIZADO:

		var resultado = (nota >= media && faltas >= faltas_maximas) ? 'Aluno aprovado' : 'Aluno Reprovado';

						//            CONDIÇÃO  TESTADA            //   //SE TRUE //      // SE FALSE


				-----------------[ESTRUTURAS CONDICIONAIS]-------------------

									[IF, ELSE, ELSE IF]

									if (condicao){
										//logica
									}
									else if(condicao){
										//logica
									}
									else{
										//logica
									}

										[SWITCH]


							var opcao = 2;
							switch(opcao){
								case 1:
								//logica
								break;

								case 2:
								//logica
								break;

								default:
								//logica
								break;
							}

					DEFAULT É OPCIONAL, SE NAO CAI EM NENHUM CASE, NADA ACONTECE.


					SWITCH SÓ FUNCIONA COM COMPARAÇÃO DE IDENTICOS, PORTANTO
					SE O OPÇÃO NO EXEMPLO ANTERIOR FOSSE UMA VARIAVEL QUE ESTÁ
					ATRIBUIDA A UMA STRING (UMA STRING NUMERO 1), CAIRIA NO DEFAULT, 
					POIS, 1 É IGUAL A '1' MAS NÃO É IDENTICO, E COMO NÃO HÁ, '1' NO
					CASE, CAI NO DEFAULT.

					SE FOR PEGAR VALORES DO PROMPT, OU VOCE COLOCA STRINGS NOS CASES
					DO SWITCH, OU VOCE CONVERTE O VALOR DA VARIAVEL PARA int, COM 
					PARSE INT.


							var parametro = prompt('Digite um numero');

							switch(parseInt(parametro)){
								case 1:
								document.write('Parametro 1');
								break;

								case 2:
								document.write('Parametro 2');
								break;

								case '3':
								document.write('Parametro 3');
								break;

								default:
								document.write('default');
								break;
							}

					-------------[OPERADORES ARITMETICOS]--------------


		ADIÇÃO [+] -> SOMA VALORES [MAS SE HOUVER UMA STRING ENVOLVIDA NO CALCULO, ELA CONCATENA]
	  					SUBTRAÇÃO [+] -> SUBTRAI UM VALOR DE OUTRO
	  					MULTIPLICAÇÃO [*] -> MULTIPLICA X NUMEROS
	  					DIVISÃO [ / ] -> DIVIDE X NUMEROS
   EXPONENCIAÇÃO [ ** ] -> ELEVA O NUMERO DA ESQUERDA DO OPERADOR, A O NUMERO A DIREITA DO OPERADOR
	 MODULO [ % ] -> PEGA O RESTO DA DIVISÃO DE NUMEROS POR OUTROS(sempre retorna valor inteiro)
	  			    INCREMENTO [ ++ ] -> ACRESCENTA UMA UNIDADE A UM VALOR  <=================|
	  				DECREMENTO [ -- ] -> SUBTRAI UMA UNIDADE DE UM VALOR    <=================|
			__________________________________________________________________________________|
		   |(a posição deles no codigo dita pré/pos decremento, se a esquerda do valor        |
		   |(ou var) incrementa/decrementa aquele valor antes da linha de codigo acabar,      |
		   |se a direita do valor (ou var) incrementa/decrementa depois do fim daquela        |
		   |linha de codigo.                                                                  |
		   |__________________________________________________________________________________|

	+= -> ATRIBUI A VARIAVEL A ESQUERDA DO OPERADOR, O VALOR DELA MESMA MAIS O VALOR DA DIREITA DO OPERADOR
	-= -> ATRIBUI A VARIAVEL A ESQUERDA DO OPERADOR, O VALOR DELA MESMA MENOS O VALOR DA DIREITA DO OPERADOR
	*= -> ATRIBUI A VARIAVEL A ESQUERDA DO OPERADOR, O VALOR DELA MESMA VEZES O VALOR DA DIREITA DO OPERADOR
   /+ -> ATRIBUI A VARIAVEL A ESQUERDA DO OPERADOR, O VALOR DELA MESMA DIVIDIDO O VALOR DA DIREITA DO OPERADOR
   %= -> ATRIBUI A VARIAVEL A ESQUERDA DO OPERADOR, O VALOR DO RESTO DA DIVISAO DELA MESMA DIVIDIDA PELO VALOR 
   DA DIREITA DO OPERADOR;


		   					       *PRECEDENCIA ARITMETICA*

		   	COMO O OPERADOR + TAMBÉM É OPERADOR DE CONCETENAÇÃO, SE TENTARMOS EXIBIR UMA MENSAGEM
		   	E LOGO DEPOIS CONCATENAR A MENSAGEM COM A SOMA DE VARIAVEIS COM OUTRAS, ELE FARÁ
		   	A CONCATENAÇÃO DE TODOS OS DADOS, E NÃO É ISSO QUE QUEREMOS. 

		   		var num1 = 9;
				var num2 = 2;

				document.write('A soma entre num1 e num2:'+	num1+num2);

				//A soma entre num1 e num2:92

			   	O QUE QUEREMOS, É FAZER A 
			   	SOMA ANTES, E EXIBIR A MENSAGEM CONCATENADA COM O RESULTADO JA PRONTO.
			   	PARA ISSO UTILIZAMOS O OPERADOR DE PRECEDENCIA ARITMETICA: O PARENTESE.

			   	COLOCAMOS O CALCULO ENTRE PARENTESE, E DEIXAMOS O RESTO


		   		var num1 = 9;
				var num2 = 2;

			   	document.write('A soma entre num1 e num2:'+	(num1+num2));
			   	//A soma entre num1 e num2:11

			   	agora está certo!


			   	QUANDO O INTERPRETADOR VE UMA INSTRUÇÃO QUE PODE SER UMA OPERAÇÃO, ELE PROCURA
			   	POR PARENTESES, E OS FAZ PRIMEIRO POR PRIORIDADE, E DEPOIS VAI DESCENDO NA PRIORIDADE.

			   						*PRECEDENCIA DE EXPRESSAO ARITMETICA*

			   MULTIPLICAÇÃO E DIVISÃO TEM PREFERENCIA SOBRE SOMA E SUBTRAÇÃO, ASSIM COMO NA MATEMATICA.

									   	por ordem:

									   	1 PARENTESES
									   	2 MULTIPLICAÇÃO, DIVISÃO.
									   	3 SOMA, SUBTRAÇÃO


----------------------------------------------[FUNCOES]---------------------------------------------------------
		 *FUNCOES PODEM SER DO TIPO VOID, E FUNCOES QUE TEM RETORNO,E  PODEM OU NAO TER PARAMETROS.

		 		*FUNCOES DEVEM TER ANTES DO NOME DELA A PALAVRA RESERVADA: function
		 				  DENTRO DELA VAI A LOGICA DO CODIGO


		 		*OS PARAMETROS E NOME DA FUNCAO DEVE SEGUIR A MESMA REGRA DE VARIAVEL.

		 				*PODEM FAZER CRIAÇÃO DE VARIAVEIS DENTRO


		 		*A FUNÇÃO SER VOID OU NÃO É DETERMINADA PELO FATO DE A FUNÇÃO TER OU NÃO RETORNO,
		 									SE NÃO TEM, É VOID.

		 			*PODE-SE CHAMAR UMA FUNÇÃO DENTRO DE UM PRINT, CONSOLE ETC.

		 *AS FUNCOES NAO SEGUEM O PADRAO DE LEITURA GRAVITACIONAL, ANTES O PROCESSADOR PROCURA A FUNCAO
		 									DEPOIS A EXECUTA.

		 	*FUNCOES COM PARAMETRO RECEBEM UMA QUANTIDADE ESPECIFICA DE PARAMETRO, CLARO, ISSO VARIA DA
		 	FUNÇÃO, AFINAL NÓS DEFINIMOS ISSO. SE EM OUTRAS LINGUAGENS, PEDISSEMOS PRA UMA FUNCAO RECEBER
		 	ALTURA E LARGURA(2 PARAMETROS) E DEPOIS PASSASSEMOS 3 DADOS PARA OS PARAMETROS DA FUNCAO, DARIA
		 	ERRO. EM JS NÃO, SE PEDIMOS DOIS, ENTRAM OS DOIS, E O TERCEIRO É DESCARTADO, SEM GERAR ERROS.


										function soma(a,b){
											return a+b;
										}

										console.log(soma(4,5,7));
										// DÁ 9, POIS USOU SÓ
										// OS DOIS PRIMEIROS.

			*CONTUDO, SE EU PASSAR PARAMETROS A MENOS, E PRECISAR OPERAR O VALOR DO PARAMETRO(SE EU PEDIR ELE 
				USAR) O RESULTADO NÃO SERÁ ESPERADO, NAO DA ERRO,
			MAS NÃO DA O RESULTADO CORRETO(SE EU PEDIR E NAO OPERAR TUDO BEM).
			 SE POR EXEMPLO, EU TIVER UMA FUNCAO QUE PEDE DOIS PARAMETROS
			PARA SOMAR OS DOIS E PASSAR UM, ESSE UM SE SOMARÁ COM A VARIAVEL QUE NAO TEVE UM VALOR 
			ATRIBUIDO ASSIM MESMO, E ESSA VARIAVEL QUE NAO RECEBEU ATRIBUIÇÃO, ESTARÁ UNDEFINED, OU SEJA
			A SOMA DE UNDEFINED COM NUMERO É UM NOT A NUMBER(NaN).
			NESSE CASO, SE PUDERMOS PREVER ISSO, PODEMOS CORRIGIR ESSE ERRO NA FUNCAO DO SEGUINTE MODO:


			function soma(a,b,c){
				b = b===undefined ? 0 : b;
			//B RECEBE O RESULTADO LOGICO DESSE OPERADOR.
			// B É IDENTICO A UNDEFINED? 
			//SE SIM B É IGUAL A 0 (SOMA O NUMERO DENTRO DE A COM 0)
			// SENAO, B PERMANECE IGUAL(CASO NAO SEJA INDEFINIDO, E O PARAMETRO TENHA SIDO PASSADO, 
			//ELE E NUMERO).

				return a+b;
			}

			console.log(soma(7)); 

			*SE NAO PASSARMOS NENHUM PARAMETRO, NAO DA ERRO, MAS CONSIDERANDO QUE TENHAMOS UMA FUNCAO QUE 
			SOME DOIS NUMEROS, SE OS DOIS NAO SAO PASSADOS, OS DOIS SÃO INDEFINIDOS, E A SOMA DISSO
			É NOT A NUMBER(NaN).


			[FUNCOES ANONIMAS DENTRO DE OUTRAS FUNCOES QUE EXECUTAM ELA SO EXISTEM ALI, ESSA É A
			DIFERENÇA DELA PRAS FUNCOES NOMEADAS]



											ARGUMENTS


				COMO JÁ DITO, PASSAR MAIS OU MENOS PARAMETROS PARA UMA FUNCAO, TENDO A FUNCAO
				UMA X CAPACIDADE, QUE É SUPERADA, OU NÃO, PELOS PARAMETROS, NAO FAZ A LOGICA
				QUEBRAR. É ESPECIFICO DO ESCOPO DE UMA FUNCTION, O OBJETO arguments QUE FUNCIONA
				PARECIDO COM UM ARRAY, GUARDANDO UMA RELAÇÃO DOS ARGUMENTOS PASSADOS PARA A FUNÇÃO,
				DESSE MODO, POSSO PASSAR QUANTOS PARAMETROS QUANTO SE QUEIRA, A FUNÇÃO IRÁ RECEBE-LOS
				E GUARDARÁ ELES NESSA LISTA.


				DESSE JEITO, NÃO PEDIMOS PARAMETROS NO ESCOPO DA FUNÇÃO, MAS USAMOS A PALAVRA RESERVADA
				ARGUMENTS DENTRO DELA, PARA SINALIZAR, QUE AQUELA FUNCAO, APESAR DE NAO PEDIR PARAMETROS
				EXPLICITAMENTE, PODE RECEBER VARIOS.

				PARA RESGATAR OS VALORES DA LISTA DE ARGUMENTOS, PODEMOS RODAR UM FOR(QUALQUER) TRATANDO
				O arguments COMO SE FOSSE UMA LISTA. ASSIM:


		
										function soma(){
											var resultado=0;
											for(var x in arguments){
												resultado+=arguments[x];
											}
											return resultado;
										}

										console.log(soma(7,5,3.2,0.8,texto));



	-------------------------------------[FUNCOES EM JS]-----------------------------------------------




						--------------------[NUMEROS]---------------------
										   OBJETO MATH

						*****ARREDONDAR NUMERO PARA O INTEIRO MAIS PROXIMO*****

										Math.round(var);

									exemplo de utilização:

									user_img= 21.05468441;

								user_imc =  Math.round(user_imc);
										// 21

	  TEM QUE ATRIBUIR UMA VARIAVEL AO VALOR QUE ELE GERA PRA QUE ELE GUARDE O RESULTADO EM ALGUM LUGAR
	  								---------------------------

	  					**** ARREDONDAR NUMERO PARA INTEIRO(SEMPRE PRA CIMA) ****
	  					               Math.ceil(var);

	  					         EXEMPLO:


	  					         var x = Math.ceil(10.380);
									document.write(x);

									// 11

						**** ARREDONDAR NUMERO PARA INTEIRO(SEMPRE PRA BAIXO) ****
	  					               Math.floor(var);

	  					         EXEMPLO:


	  					         var x = Math.floor(10.380);
									document.write(x);

									// 10


						***** MOSTRAR NUMERO ALEATORIO ENTRE 0 E 1(OS NUMEROS ENTRE TB)*****


										Math.random()/

											ex:

										var x = Math.random();
										document.write(x);

						Para mostrar mais numeros multiplica-se a função por um número.

						Se eu quiser mostrar entre 0 e 1(inteiros), multiplico a função por
						2. Sempre um número a mais do que o numero limite que voce quer gerar
						pra depois poder usar o math.floor, assim, arredondando para baixo.



						***** DEIXAR NUMERO NEGATIVO, POSITIVO (MODULO) *****
										Math.abs(var)

										Math.abs(-5000);
										// 5000



							---------------[FUNCOES DATAS]--------------

											OBJETO DATE


						PARA ISSO CRIAMOS UMA VARIAVEL E ATRIBUIMOS A ELA :

											new Date();

											EX:

									var x = new Date();

			ATRIBUIMOS A VARIAVEL UM NOVO OBJETO TIPO DATE DANDO ACESSO A VARIAVEL A TODAS AS INFORMAÇÕES
			DO OBJETO. NISSO, O CODIGO PEDE OS PARAMETROS DE DATA AO BROWSER, E O BROWSER AO S.O. 
			OU SEJA, SE EU MUDAR A HORA NO MEU PC, LA VAI MUDAR TB.

							DENTRO DO OBJETO DATE POSSO ACESSAR VARIOS ATRIBUTOS
							COMO O DIA DO MES, DO ANO, DO MILENIO. A HORA DO DIA, 
							O ANO, DIA DA SEMANA ETC, E PARA CADA UM DELES, HÁ UM
							METODO. 


							    .getFullYear()	Get the year as a four digit number (yyyy)
								.getMonth()	Get the month as a number (0-11)
								.getDate()	Get the day as a number (1-31)
								.getHours()	Get the hour (0-23)
								.getMinutes()	Get the minute (0-59)
								.getSeconds()	Get the second (0-59)
								.getMilliseconds()	Get the millisecond (0-999)
								.getTime()	Get the time (milliseconds since January 1, 1970)
								.getDay()	Get the weekday as a number (0-6)
								 Date.now()	Get the time. ECMAScript 5.



				ATRIBUINDO NEW DATE A UMA VARIAVEL E A EXIBINDO, ELA MOSTRA TODOS OS DADOS DE UMA DATA

										 var date = new Date();

										document.write(date.toString())

								///TODOS TEM SET, MENOS DAY E DATE NOW.
								https://www.w3schools.com/js/js_date_methods.asp




								EU POSSO PRECISAR ADCIONAR X DIAS A MINHA DATA
								PARA ISSO EU POSSO ESCREVER:


								var date= new Date();

								date.setDate(date.getDate()+/-N)

								ONDE N DITA A QUANTIDADE DE DIAS. O OBJETO DATE SABE
								LIDAR COM ESSES DIAS DE FORMA QUE, SE COMPLETAR DIAS
								O BASTANTE, ELE MANIPULA O OBJETO MES, E O OBJETO ANO
								PARA INCLUIR NELES OS DIAS INSERIDOS.


								PARA ADCIONAR X MESES A MINHA DATA:

								var date = newDate();
								date.setMonth(date.getMonth()+/-N);

								O MESMO ACONTECE PARA OS MESES, SE ACUMULAREM MESES O
								BASTANTE PARA VIRAR O ANO, O JS ALTERA O OBJETO ANO.


								PARA ADCIONAR X ANOS A MINHA DATA:

								var date = newDate();
								date.setFullYear(date.getFullYear()+/-N)



						****ATENCAO POIS A CONTAGEM DE MESES É DE 0 A 11, JANEIRO É O MES 0 ********



							PARA SABER A QUANTIDADE DE DIAS ENTRE UMA DATA E OUTRA PODEMOS:

							SETE AS DATAS DESEJADAS:


								// 15 jan 2017
								var date1 = new Date(2017,0,15);
								// 28 ago 2019
								var date2 = new Date(2019,6,28);


							  	CONVERTA ELAS PRA MILISSEGUNDOS

							  	date1.getTime()
								date2.getTime()


								E SUBTRAIA UMA DA OUTRA

								var entre_datas = Math.abs(date1-date2);


								// COMO ESSE NUMERO DA NEGATIVO, O 
								// CONVERTEMOS PARA POSITIVO COM O
								// MATH.abs()

		DEPOIS DIVIDIMOS O VALOR DA VARIAVEL QUE ARMAZENOU O CALCULO, PELA QUANTIDADE DE MILISSEGUNDOS
		QUE TEM UM DIA: 86400000 OU 1*24*60*60*1000

								var result = Math.round(entre_datas/miliss)

								//USAMOS O MATH.round PARA ARREDONDAR A QUANTIDADE DE  DIAS PRA
								//BAIXO OU PRA CIMA, POIS O NUMERO QUEBRA.


				/*1 dia tem 24h, 1h tem 60 min, 1 min tem 60 seg, 1 seg tem 1000 milissegundos.

				O SEJA: 
				1*24*60*60*1000; == 86400000 milissegundos, um dia tem.
				*/





	  ---------------- [ADCIONANDO E REMOVENDO CLASSES DE UM ELEMENTO DO DOM] ---------------

	  	PARA TANTO, ACESSAMOS O ELEMENTO(GET ELEMENT) E UTILIZAMOS A REFERENCIA classList.

	  				A PARTIR DAÍ, EXECUTAMOS NA CLASSLIST O METODO QUE QUEREMOS.


	  				.classList.add('classe-String') // adciona uma classe por string
	  		.classList.contains('classe-string') // checa se o elemento contem tal classe
	  		.classList.remove('classe-string') // remove a classe ali pedida, do elemento
	  		.classList.item('classe-string') // retorna a classe que se encontra naquele indice
	  									     // primeira classe, segunda classe etc.
	  		



	  		QUANDO PRECISAMOS QUE O ELEMENTO TENHA SOMENTE UMA CLASSE (AO CONTRARIO DO CLASSLIST, QUANDO
	  			ADICIONAMOS MAIS UMA) SOBRESCREVEMOS A CLASSE ATUAL COM:

	  		elem.className('on');
	  		elem.className('off');



	  						----------------[STRINGS]-----------------

	  							*****MEDIR O TAMANHO DA STRING*****
	  										.length
	  						ESSE COMANDO NAO LEVA () POIS É PROPRIEDADE

	  										EX:
	  							document.write('Lalisa Manobahn'.length);
	  								//14


	  							----------------------------------------




	  					*****INFORMAR O CARACTERE PRESENTE EM DETERMINADO INDICE*****

	  										.charAt(indice)
	  								ONDE INDICE É UM NUMERO INTEIRO
	  											EX:
								document.write('Marcela Braga'.charAt(8))
								// B



				***** INFORMAR A PRIMEIRA OCORRENCIA(APARIÇÃO) DE UMA LETRA NUMA STRING *****


											.indexOf('char')

												  OU:

										.indexOf(letra) onde letra:

										var letra = 'alguma letra';

										--------------------------



						***** SUBSTITUIR UMA PALAVRA DENTRO DE UMA STRING *****

					   .replace(string-a-ser-substituida, string-que-vai-no-lugar);

					   						EX:

					   			 var nome = 'Marcela Braga';

						  document.write(nome.replace('Braga','Duarte'))


						 ***** PEGAR SOMENTE UMA PARTE DE UMA PALAVRA *****

						 		substr(indice-inicial, indice final)


					PEGA O QUE ESTIVER ENTRE O PRIMEIRO INDICE INFORMADO E O OUTRO  

												EX:

									var nome = 'Marcela Braga';
									document.write(nome.substr(2,7))
									//rcela B

						***** DEIXAR STRING MAIUSCULA OU MINUSCULA *****

										.toLowerCase()
										.toUpperCase()

							document.write(nome.toLowerCase());



								----------------------------
					***** RETIRA O ESPAÇO ENTRE O COMEÇO E O FIM DA STRING *****

										   .trim()

										nome.trim();


											ANTES:

										' Marcela Braga '

										    DEPOIS:

										 'Marcela Braga'

			***** TRANSFORMA STRING DE EXPRESSÃO MATEMATICA EM EXPRESSÃO MATEMATICA NUMERICA *****

										.eval(expressao)

									var expressao = '5+4';




	-------------------------------------[ESCOPO DE VARIAVEIS]------------------------------------------------


					TEMOS 3 TIPOS DE ESCOPO: O GLOBAL, O DE FUNÇÃO, E O DE BLOCO.


			NO BLOCO( IF É UM EXEMPLO DE COMANDO EM BLOCO )E NA FUNCAO TEMOS ACESSO A VARIAVEIS GLOBAIS

			EM ESCOPOS BLOCO COMO O IF, PODEMOS CRIAR VARIAVEIS DENTRO, ASSIM, AQUELA VARIAVEL SOFRE UM
			PROCESSO DE ELEVAÇÃO, E PASSA PARA O NIVEL GLOBAL, SAINDO DO IF, ESSA VARIÁVEL CONTINUA 
			EXISTINDO, E PODE SER ACESSADA DE QUALQUER OUTRO LUGAR( NO CONTEXTO GLOBAL, DENTRO DE IFS, 
				E TAMBEM DENTRO DE FUNÇÕES), COMO UMA VARIAVEL GLOBAL.
							*ISSO SEMPRE ACONTECE AO CRIAR UMA VARIAVEL DENTRO DE UM IF*

			JÁ EM ESCOPOS DE FUNÇÕES, NAO ACONTECE COMO NO IF, AO CRIAR UMA VARIAVEL EM UMA FUNÇÃO, ESTA
			VARIAVEL SOMENTE FICARÁ DISPONIVEL DENTRO DO SEU PROPRIO ESCOPO, DENTRO DA PROPRIA FUNÇÃO.

			JÁ EM UM ESCOPO TIPO BLOCO EXEMPLO IF, QUE ESTÁ DENTRO DE UMA FUNÇÃO, A VARIAVEL SOFRE ELEVAÇÃO
			TAMBEM, MAS PARA O NIVEL DA FUNCAO E NAO PARA O GLOBAL. OU SEJA, VARIAVEIS CRIADAS DENTRO DE IFS,
			DENTRO DE FUNCOES, PODEM SER USADAS FORA DO IF, MAS SOMENTE SE AINDA DENTRO DA FUNÇÃO NA QUAL 
			ELA FOI CRIADA E ESTÁ SITUADA.
-----------------------------------------[FUNCOES ANONIMAS]---------------------------------------------------

						FUNCOES ANONIMAS SAO AQUELAS QUE NAO POSSUEM NOME.
				MAS OPA, COMO ASSIM NAO TEM NOME SE PRECISAMOS DE UM NOME NA FUNCAO, PARA PODER CHAMAR ELA
				POR ESSE NOME? SIMPLES.
				COM AS FUNCOES ANONIMAS, AO INVES DE ATRIBUIR UM NOME, ATRIBUIMOS A ELA UMA VARIAVEL. E 
				DESSA FORMA A VARIAVEL FICA ENCARREGADA DE CHAMAR A FUNÇÃO, E AI PRECISAMOS SOMENTE CHAMAR
				A VARIAVEL COM OS PARENTESES, ONDE PRECISARMOS.

				UM EXEMPLO DE UTILIZAÇÃO:


				var funcao = function (){
						document.write('ola');
					}

				E ENTÃO CHAMAMOS A VARIAVEL NORMALMENTE DENTRO DO CODIGO:

					 funcao();

				CASO A FUNCAO TIVESSE UM RETORNO, ERA SÓ ATRIBUIR UMA OUTRA VARIAVEI, Á VARIÁVEL QUE 
				ESTÁ ATRIBUIDA A FUNCAO:

				var funcao = function (){
					var a =1 ;
					document.write('ola');
					return 1;
				}

				var x = funcao();
				console.log(x);
			---------------------------[FUNCOES DE CALLBACK]------------------------------


			FUNCOES DE CALLBACK SÃO FUNCOES QUE SAO ENCAMINHADAS COMO PARAMERTRO PRA OUTRAS
			FUNÇÕES. FUNÇÕES DE CALLBACK SÃO FUNÇÕES ANONIMAS.


			ASSIM:

			function exibirArtigo(id, callbackSucesso, callbackErro){
				// logica: recuperar um artigo de um http

				if(true){
					callbackSucesso('funcoes de callback em js', 'funcao de callback sao muito ...');
				}
				else{
					callbackErro('Erro ao recuperar os dados');
				}
			}

			COMO SAO FUNCOES ANONIMAS, PODERIAMOS CHAMAR ASSIM:

			exibirArtigo(1, function(){...}, function(){});

			MAS COMO FICA COMPLICADO LER UMA FUNCAO DENTRO DE UMA FUNCAO(QUANDO CHAMAMOS), FAZEMOS A 
			TECNICA DE WRAPPER. QUANDO AO INVES DE ESCREVER ESSA FUNCAO DENTRO DO PARAMETRO, ESCREVEMOS
			FORA, ATRIBUIMOS UMA VARIAVEL A ESSA FUNCAO, E CHAMAMOS A VARIAVEL RESPONSAVEL PELA FUNÇÃO, DENTRO
			DA OUTRA FUNCAO.* MAS ATENÇÃO, NESSE MODO, AS VARIAVEIS RESPONSAVEIS PELA FUNCAO DE FORA, NAO LEVA
			PARENTESE QUANDO ENTRA COMO PARAMETRO NA FUNCAO. SE EU PASSAR A VARIAVEL COM PARENTESE PARA UMA
			FUNCAO, O INTERPRETADOR VAI EXECUTAR A FUNCAO PASSADA NO MOMENTO EM QUE ESTÁ SENDO PASSADA (ENTENDENDO
			QUE O QUE VOCE QUER É O VALOR QUE A FUNCAO VAI RETORNAR E NAO ELA TODA), E NÃO
			QUANDO EU PEDIR PRA ELA SER EXECUTADA, DENTRO DA FUNCAO QUE A RECEBE.*

			*OU SEJA, ATRIBUO UMA VARIAVEL A FUNCAO DE FORA, USO ESSA VARIAVEL COMO PARAMETRO(MAS SEM PARENTESE)
			CHAMO ESSA VARIAVEL DENTRO DA FUNCAO QUE A RECEBEU E AGORA COM PARENTESE, PARA EXECUTAR ALGO.*


			assim:

			function exibirArtigo(id, callbackSucesso, callbackErro){
			// logica: recuperar um artigo de um http

				if(true){
					callbackSucesso('funcoes de callback em js', 'funcao de callback sao muito ...');
				}
				else{
					callbackErro('Erro ao recuperar os dados');
				}
			}
			var callbackSucesso = function(){

			}
			var callbackErro = function(){

			}
			exibirArtigo(1,callbackSucesso, callbackErro);



					-----------------------*[EVENTOS]*------------------------
					https://www.w3schools.com/tags/ref_eventattributes.asp

				EVENTOS SÃO AÇÕES EXECUTADAS PELO LADO DO CLIENTE, NO BROWSER QUE NOS
				POSSIBILITAM CAPTURAR AÇÕES FEITAS PELO USUARIO DENTRO DO NAVEGADOR.

				COMO POR EXEMPLO O MOVIMENTO DO MOUSE SOBRE DETERMINADO ELEMENTO DA
				PAGINA, O CLIQUE EM UMA TECLA, O REDIMENSIONAMENTO DA TELA, O FOCO
				DO CURSOR DO MOUSE EM DETERMINADO ELEMENTO, OU ATÉ O PROCESSO DE 
				CARREGAMENTO DA PAGINA NO BROWSER, E MAIS. TUDO ISSO PODE SER COMBINADO
				COM FUNÇÕES, E ASSIM PODEMOS DISPARAR A REALIZAÇÃO DE LOGICAS A PARTIR
				DA INTERAÇÃO DO USUARIO COM DETERMINADOS ELEMENTOS DA PAGINA, OU DO BROWSER.	


			ESSES EVENTOS VÃO DENTRO DOS ELEMENTOS HTML QUE DESEJAMOS QUE EXECUTE A FUNÇÃO
						*ALGUNS ELEMENTOS HTML NAO SUPORTAM EVENTOS*



										[EVENTOS DE MOUSE]

										 **EVENTO DE CLIQUE**

							          onclick="OQUEDEVEEXECUTAR"

							    O QUE ACONTECE QUANDO O ELEMENTO É CLICADO

							    ex: 
			<div onclick="alert('Teste')" style="background: #ccc; height: 150px; width: 150px;">
			</div>//gera um alerta a cada vez que se clica no elemento

					O QUE O CLIQUE ATIVA PODE SER QUALQUER COISA, UMA FUNCAO, UM TEXTO ETC
					 E A FUNCAO QUE E ATIVADA QUANDO CLICA TB PODE SER QUALQUER OUTRA COISA
					 MUDAR A COR DE UMA DIV, CRIAR OUTRA, POR EXEMPLO...






					 				**EVENTO DE CLIQUE DUPLO**

					 			      ondblclick="acao()"

					 	O QUE ACONTECE QUANDO SE CLICA DUAS VEZES NO ELEMENTO

					 	ex: 
				<div ondblclick="acao()" style="background: deeppink; height: 150px; width: 150px;">
				</div>






								   **EVENTO DE SOLTAR O BOTÃO**


								  	 onmouseup="acao()"

				ESSE EVENTO É ATIVADO DEPOIS QUE O USUARIO CLICA NO BOTÃO, QUANDO ELE SOLTA

				ex:
				<div onmouseup="acao()" style="background: deeppink; height: 150px; width: 150px;">
				</div>





								**EVENTO DE REPOUSAR O MOUSE NO ELEMENTO**

								          onmouseover="acao()"

						  ESSE EVENTO É ATIVADO QUANDO O MOUSE SOBREPOE O ELEMENTO


				ex:
			<div onmouseout="acao()" style="background: deeppink; height: 150px; width: 150px;">
			</div>





							**EVENTO DE SAIDA DO MOUSE DA AREA DO ELEMENTO**

										onmouseout="acao()"

				ESSE EVENTO É ATIVADO QUANDO O MOUSE SAI DA AREA QUE CONTEM O ATRIBUTO

				ex:
			<div onmouseout="acao()" style="background: deeppink; height: 150px; width: 150px;">
			</div>



.-----------.EU POSSO COMBINAR UMA ACAO COM MAIS DE UMA OUTRA, REPETINDO A MESMA AÇÃO OU UMA DIFERENTE, EM 
RESUMO, UM ELEMENTO HTML PODE EXECUTAR MAIS DE UM EVENTO.-------------------------------------------.


		   ____________________[CONTROLE DA POSIÇÃO RELATIVA DO PONTEIRO]_____________________
		Screen → Posição do ponteiro em relação ao tamanho total da tela. - screenX, screenY.

		Client → Posição do ponteiro em relação ao tamanho do browser(cliente). clientX, clientY.

		Page → Posição do ponteiro em relação ao documento. pageX, pageY.
		
		Offset → Posição do ponteiro em relação ao elemento. Ponteiro no começo do elemento se situa na
		coordenada (0,0) offsetX, offsetY.

										[EVENTOS DE TECLADO]

						**EVENTO QUE ATIVA QUANDO O BOTÃO É ACIONADO**
									onkeydown="acao()"

								ATIVA ASSIM QUE O BOTÃO DESCE


							<input onkeydown="acao1()" type="text">



						**EVENTO QUE ATIVA QUANDO O BOTÃO É LIBERADO**
									onkeyup="acao()"

								ATIVA ASSIM QUE O BOTÃO SOBE

						     <input onkeyup="acao1()" type="text">




					 **EVENTO QUE ATIVA ENQUANTO O BOTÃO É PRESSIONADO**

	 								onkeypress="acao()"

	 	(ativa somente quando o caractere representa um caractere, ctrl por exemplo nao funciona)
	 							(ENTRE O ACIONAMENTO E A LIBERAÇÃO)

							<input onkeypress="acao1()" type="text">



								---------- KEYCODE ----------


					UTIL PARA USAR NOS EVENTOS DE TECLADO, CAPTURA A TECLA
					QUE FOI PRESSIONADA. É BOM CAPTURAR NO PRESSIONAR DE UMA
					TECLA, A CADA VEZ QUE A TECLA É CLICADA, A FUNCAO QUE
					CONTEM A CAPTURA É EXECUTADA:

					var tecla = event.keycode; 

					function moveGato(tecla){
						var tecla= event.keyCode;
						console.log(tecla);
					}



						TABELA DE KEYCODES:
				(ASSIM DA PRA TESTAR, QUANDO FOR TECLA TAL, FAÇA TAL COISA)
				https://odesenvolvedor.com.br/tabela-de-key-codes-para-javascript_1464.html


				PRA FACILITAR: W: 87, A: 65, S: 83, D:68



										[EVENTOS DE JANELA]


						  **EVENTO QUE ATIVA QUANDO A PAGINA É ROLADA**
										onscroll="acao()"
			  (a barra de rolagem pertence ao body, que expande caso tenha conteudo)

			  		   ESSE EVENTO É DISPARADO A CADA ROLADA QUE EU DOU







					    **EVENTO QUE ATIVA QUANDO A PAGINA É REDIMENSIONADA**
					    				onresize="acao()"

			**	ELE É DISPARADO A CADA VEZ QUE A PÁGINA É REDIMENSIONADA, POR INFINITAS VEZES
			esse evento e especifico do body, pois é o elemento que sofre alteração de tamanho, 
								      quando redimensionado**



									[EVENTOS DE FORMULARIO]

				 **EVENTO QUE ATIVA QUANDO A INPUT DE FORM É FOCADA(CLICADA)**

				 						onfocus="acao()"
	<input type="text" onfocus="console.log('recebeu foco')" onblur="console.log('tirou foco')"/>







				 	**EVENTO QUE ATIVA QUANDO A INPUT DE FORM PERDE O FOCO**

				 						onblur="acao()"
	<input type="text" onfocus="console.log('recebeu foco')" onblur="console.log('tirou foco')"/>





				  **EVENTO QUE ATIVA QUANDO O ESTADO DO ELEMENTO É MODIFICADO**
				  						(BOM PRA SELECT)

				  					   onchange="acao()"







		-------------------------------------[DOM]------------------------------------------

								SIGLA PARA: DOCUMENT OBJECT MODEL

					API QUE PERMITE QUE O JS MODIFIQUE ELEMENTOS HTML DA PAGINA


					HTML É UMA LINGUAGEM DE MARCAÇÃO DE TEXTO, NO QUAL O NOSSO CÓDIGO É
					UMA STRING GIGANTE, QUE E BAIXADA PELO NAVEGADOR E ORGANIZADA, POR ISSO
					É NECESSARIO ABRIR E FECHAR CADA TAG, PARA SABER ONDE TAL TEXTO COMEÇA
					E ONDE ELE ACABA.

					OS ELEMENTOS HTML ESTÃO DISPOSTOS NUMA ARVORE DISPOSTA DE CIMA PRA BAIXO,
					ONDE OS ELEMENTOS PAI ENCAPSULAM OS ELEMENTOS FILHOS, FORMANDO RAMIFICAÇÕES
					, ESTRUTURAS HIERARQUICAS.


					OS ELEMENTOS DA ARVORE SÃO CHAMADOS DE NÓ, OU NODE. A TAG HTML É UM NODE, POR
					EXEMPLO. COMO HTML ENCAPSULA O HEAD, E TAMBEM O BODY, BODY E HEAD SÃO NÓS IRMÃOS
					. TITLE E META SÃO IRMÃOS E FILHOS DE HEAD. AS DIVS SÃO FILHAS DE BODY, E ELEMENTOS
					P, H1, H2, NAV, TABLE, SPAN E A, FILHAS DE DIV.

					A ARVORE:


										HTML 
										 |
						     ____________|_____________
						    |						   |	
						    |						   |
						____|_____               ______|_______ 
					   |          |				|			   |
					   |  HEAD    |				|   BODY       |
					   |__________|				|______________|
					   		|							|      |
					   		|							|	   |
			________________|_____________              |	   |
		   |			|		|		  |				|	   |
		   |  META		|		|	TITLE |				|	   |
		   |____________|		|_________|				|      |		________
		   												|      |	   |		|
		   												|      |_______|DIV  	|
		   												|			   |________|
		   												|						|
		   												|						|
		   										   _____|_____                  |    _______
		   										  |           |                 |___|		|
		   										  |	DIV		  |						| TABLE |
		   							     _______  |___________|					    |_______|
		   								|		|   |	|   |     ______                |
		   								|SPAN 	|___|	|   |____|		|			    |
		   								|_______|  		|		 |	P	|        _______|
		   									|	      __|__      |______|		|	  |
		   								 ___|___  	 |	   |					|TBODY|
		   								|		|  	 | H1  |					|_____|
		   								|	A	|  	 |_____|						|
		   								|_______|  	 								|
		   										  	 							  __|___
		   										  	 							 |		|
		   										  	 							 | TR	|
		   										  	 							 |______|
		   										  	 							   |   |	   ____
		   										  	 							   |   |______|TD  |
		   										  	 							___|__        |____|
		   										  	 						   | TD   |
		   										  	 						   |______|


		   				  [SELECIONANDO ELEMENTOS NA PAGINA HTML]

		   			https://www.w3schools.com/js/js_htmldom_document.asp

		   USANDO A API DO DOM SELECIONAMOS UM ELEMENTO A PARTIR DOS METODOS DO OBJETO DOCUMENT
		   E SÃO ALGUNS DELES(OS MAIS USADOS):

		   document.getElementById() -> seleciona o elemento pelo id

		   document.getElementsByTagName() -> seleciona o elementos pela classe(com a mesma classe)
		    (retorna coleção de elementos)

		   document.getElementsByClassName() -> seleciona o elementos pela classe(com a mesma classe)
		    (retorna coleção de elementos)

		   document.getElementsByName() -> seleciona pelo atributo name do elemento (retorna um nodelist, 
		   	elementos de mesmo nome)  (BOM PRA RADIO, POIS PARA AGRUPAR RADIOS USAMOS NAME, 
		   	CAPTA TODOS OS ELEMENTOS DO MESMO NOME)


		   	   			** no get element by id, a frase é escrita no singular, 
		   	   			note que para os outros, a escrita é no plural, pois, 
		   	   			as que tem S indicando plural podem retornar varios
		   	   			elementos. ID É UM ATRIBUTO UNICO, SÓ PODE HAVER UM
		   	   			ELEMENTO COM ESSE NOME**

		   	   			*[TODOS OS ELEMENTOS QUE TEM S, NO PLURAL, CAPTURAM MAIS
		   	   			DE UM ELEMENTO, SE O DOCUMENTO OS TIVER.]


		   	   LEMBRANDO QUE NÃO PODEMOS CAPTURAR UM ELEMENTO QUE AINDA NAO FOI CONSTRUIDO NO DOM, 
		   	   E QUE NAO FOI RENDERIZADO AINDA, PORTANTO, CAPTUREMOS ELEMENTOS QUE JÁ FORAM CONSTRUIDOS.


		   	   AO UTILIZAR UM DOS MÉTODOS, SELECIONAMOS O ELEMENTO QUE QUEREMOS, ISSO PODE SER TESTADO
		   	   USANDO :


										<input 
										type=""
										 name="nome"
										 placeholder="digite seu nome"
										 id="nome_user"
										 class="campo_text">

							 			<script>
											console.log(document.getElementById('nome_user'));
										</script>

								[MANIPULANDO VALORES DE INPUTS(TEXT)]


						PARA PEGAR OS VALORES CONTIDOS EM CAMPOS DO TIPO TEXTO,
						USAMOS : .value

						EXEMPLO:

						console.log(document.getElementById('entrada').value);


						PARA SETAR OS VALORES CONTIDOS NO CAMPO, USAMOS O VALUE TAMBEM,
						MAS DESSA VEZ ATRIBUIMOS TUDO A ALGUM DADO, ASSIM:

						document.getElementById('texto').value = 'Alo mundo!'









								[MANIPULANDO ESTILO DE ELEMENTOS]

								PARA ISSO USAMOS O ATRIBUTO:

								.style.ELEMENTODOESTILO

								ONDE ELEMENTO DO ESTILO PODE SER O 
								BACKGROUND, A BORDA, ETC.

								ASSIM:

				    document.getElementById('elemento').style.background = red;


				    	PARA PEGAR OUTROS ATRIBUTOS DE ESTILO DO ELEMENTO
				    	NÃO PODEMOS USAR - COMO POR EXEMPLO NO MARGIN-LEFT
				    	PARA ISSO, TIRAMOS O - E A PRIMEIRA LETRA QUE VIRIA
				    	DEPOIS DELE NORMALMENTE FICA MAIUSCULA, ASSIM

				    	marginLeft = '5px;'
				    	backgroundColor = 'red'
				    	borderLeft = corDeFundo;


				    			[MANIPULANDO A CLASSE DO ELEMENTO]

				    PODEMOS MODIFICAR A CLASSE DO ELEMENTO COM O QUAL ESTAMOS
				    LIDANDO, USANDO O ATRIBUTO:

				    .className

				    PODEMOS ESTAR UTILIZANDO UMA DETERMINADA CLASSE E EM ALGUM
				    MOMENTO, TROCA-LA. 

				    ASSIM:

				    	document.getElementById('elemento').className='classenova'


				    ESSE AQUI É MAIS UTIL QUANDO EU PRECISO USAR UMA CLASSE OU OUTRA
			CASOS ONDE EU PRECISE ADICIONAR UMA CLASSE CASO ACONTEÇA ALGO, E OUTRA CLASSE CASO
			ACONTEÇA OUTRO, ONDE CADA CASO SE ADICIONE UMA, POIS NO PRIMEIRO CASO A CLASSE(s) ENTRA
			NO SEGUNDO CASO A CLASSE(s) ANTERIOR É SOBRESCRITA.

			PODE COLOCAR MAIS DE UMA CLASSE.


							[CAPTURANDO ATRIBUTOS DE OBJETOS]


	Ja que vamos falar de capturar atributos, podemos aproveitar e dizer que podemos criar novos atributos. Para isso usamos
	a palavra data seguida de um traço e o nome que queremos dar. Esse padrão é seguido somente para evitar conflitos e por convenção.

	<input type="name" data-slow="true">
	
	document.getElementById('nome').getAttribute('nome'); - Pega um atributo de um elemento html(tipo type, data-target etc);






				    				[CRIANDO ELEMENTO]

				    		 var x = document.createElement('tag');
				    		 ONDE TAG, PODE SER UMA DIV, UMA IMG, ETC

				    		 INSERINDO ESSE ELEMENTO DENTRO 
				    		 DO BODY:

				    		 document.body.appendChild(x);


				    		 assim:

				    		 var mosquito = document.createElement('img');
							 document.body.appendChild(mosquito);


							 MODIFICANDO ATRIBUTOS:

							 SUPONDO QUE O ELEMENTO CRIADO É UMA IMAGEM E
							 UM ATRIBUTO DA IMAGEM É O SRC, PORTANTO, 
							 RESGATAMOS A VARIAVEL ONDE ESTÁ O ELEMENTO E:

							 x.src='imagens/mosca.png';


							 MODIFICANDO ESTILOS DO ELEMENTO:

							 SELECIONAMOS O OBJETO QUE QUEREMOS(PODE ESTAR NUMA 
							 	VARIAVEL), E EM SEGUIDA USAMOS O ATRIBUTO STYLE
							 SEGUIDO DO ATRIBUTO CSS QUE DESEJA MODIFICAR, ASSIM:


							  mosquito.style.position = 'absolute';


							PARA ELEMENTOS QUE USAM PX, COMO MARGEM, PADDING, ETC
							VOCE CONCATENA UM NUMERO COM A STRING px, ASSIM:

							mosquito.style.left = 500 + 'px';
							mosquito.style.top = 500 + 'px';


							 MODIFICANDO A CLASSE DO ELEMENTO:




							 x.className='classe';




										[OFFSET-PARAM]


						DEFINE A MARGEM ENTRE O ELEMENTO E A DIV PAI MAIS PRÓXIMA
						SE POR EXEMPLO O ELMEMENTO FOR ABSOLUTO, A MARGEM SERÁ
						ENTRE ELE E O BODY.

						ASSIM:

						document.getElementById('nome').offsetPARAM

						ONDE PARAM:

						TOP
						BOTTOM
						LEFT
						RIGHT

						EU USEI NUMA FUNCAO PARA, A CADA VEZ QUE O USUARIO TECLA
						A TECLA W, O ELEMENTO SOBE 10 PIXELS. ASSIM:


						if(tecla===87){
							if(cat.offsetTop>20){	
							cima = cat.style.top=(cat.offsetTop-10)+'px';
							console.log(cima)
							console.log(tecla);
							}
						}


						OFFSET LEFT NAO PRECISA DE STYLE ANTES, É DIRETO NO OBJ!


							 				EXCLUIR ELEMENTO

			if(document.getElementById('nome')){// TESTA SE O ELEMENTO EXISTE, SE SIM RETORNA TRUE E CAI NO IF
				document.getElementById('nome').remove();
			}




					********SE ISSO FOR FEITO DENTRO DO HEAD, PRECISA SER DENTRO
					DE UMA FUNCAO, E PRECISAMOS CHAMAR ELA DENTRO DO BODY, DENTRO
					DE UMA TAG SCRIPT, POIS
					SE FOR EXECUTADO DIRETO NO HEAD, O BODY NAO EXISTIRA QUANDO
					A FUNCAO TENTAR ADCIONAR UMA DIV FILHA*********

						----------------ATRIBUTOS DO DOM-----------------

								document.getElementById('id').ATRIBUTO
							(podia ser pela tag, pela class, ou pelo name)

								onde atributo :

						.value   = MANIPULA O VALOR NO CAMPO DA DIV SELECIONADA
						.style   = MANIPULA O ESTILO DO ELEMENTO SELECIONADO.
					.className   = MODIFICA A CLASSE DO ELEMENTO
					.innerHTML   = MODIFICA O TEXTO NO ELEMENTO(É TUDO QUE ESTA ENTRE AS TAGS HTML)
					 				-> document.getElementById('nome').innerHtml='valor'
					 				-> PARA SOMAR O CONTEUDO QUE JÁ ESTAVA LA COM O PROXIMO, COLOQUE +=
					 				-> AO INVES DE SÓ =




				____________________ [QUERY SELECTOR] ____________________

				PARECIDO COM O getELementByTagName, COM A DIFERENÇA DE QUE
				RETORNA O ELEMENTO DE TAG QUE CONTÉM UMA CLASSE ESPECÍFICA,
				POR EXEMPLO. PODE SELECIONAR VARIAS TAGS DIFERENTES, ETC.


				SELECIONANDO POR EXEMPLO, TODOS OS <P>:

				let ps = document.querySelectorAll("p");


				PS GUARDARÁ UM ARRAY COM TODOS OS PS ENCONTRADOS. PARA 
				ACESAR UM ESPECIFICO, SE VOCE SOUBER A POSIÇÃO DELE NESTE
				ARRAY, É SÓ ACESSAR O ÍNDICE. SENÃO, TEM OUTROS METODOS.

				document.body.appendChild(ps[0]);






				* TAMBEM DÁ PRA PEGAR TODOS OS ELEMENTOS QUE POSSUEM UMA CLASSE
				(MEIO INUTIL ISSO, SÓ USAR O GET BY CLASS).

				let variavel = document.querySelectorAll(".classe");



				*(ALGO MAIS UTIL) TAMBEM DÁ PRA PEGAR OS ELEMENTOS CUJA TAG CONTEM
				UMA DETERMINADA CLASSE, É BEM FÁCIL:

				let variavel = document.querySelectorAll("p.classe");

				* TAMBEM DA PRA CONFIGURAR OS ELEMENTOS(TAGS) QUE ESTÃO DENTRO DE 
				OUTRAS TAGS. ASSIM:

				let variavel = document.querySelectorAll("div > p")
				//pega todos os ps, dentro de uma div






				____________________ [ EVENT LISTENER ] ____________________

				ADCIONA UM ESCUTADOR DE EVENTO A UM ELEMENTO. PODEMOS ADCIONAR
				POR EXEMPLO, O ESCUTADOR DE EVENTO NUM BOTÃO, NESSE CASO, O EVENTO
				CLIQUE. SEMPRE QUE FOR EXECUTADO UM CLIQUE, ACONTECE UMA AÇÃO.

				ELE ELIMINA A OBRIGAÇÃO DE USAR UM EVENT, onclick, onmouseup ETC.
				POIS ELE ATUA SOBRE O ELEMENTO DIRETAMENTE.



				** É MELHOR ADCIONAR TUDO QUE FOR UM EVENTO NUM SCRIPT(PARA UM
					ARQUIVO OU NAO) NO FINAL DA PAGINA. ASSIM VOCE GARANTE QUE
				TODOS OS ELEMENTOS TERÃO SIDO CARREGADOS NO DOM ANTES DE TENTAR
				EXECUTAR ALGO **

				[INFORMO O ELEMENTO AO QUAL QUERO ADCIONAR UM ESCUTADOR DE EVENTO
				INFORMO O EVENTO QUE ATIVA A LOGICA
				E A LOGICA EXECUTADA QUANDO O EVENTO É ATIVADO.]




				*1 RESGATAMOS O ELEMENTO AO QUAL QUEREMOS ADCIONAR UM ESCUTADOR:

				let elemento = document.getElementById('elemento1')



				*2 E EM SEGUIDA ADCIONAMOS A ELE A LINHA:

				elemento.addEventListener("evento", funcao);

				

			____ONDE EVENTO PODE SER: _________________________________________________________________

			click	    	    quando é pressionado e liberado o botão primário do mouse, trackpad, etc.
			mousemove	   		sempre que o cursor do mouse se move.
			mouseover	   		quando o cursor do mouse é movido para sobre algum elemento.
			mouseout			quando o cursor do mouse se move para fora dos limites de um elemento.
			dblclick			quando acontece um clique duplo com o mouse, trackpad, etc.
			DOMContentLoaded	quando o DOM do documento está totalmente carregado 
			load	    		quando todo o documento (DOM e recursos externos como imagens, scripts, etc) 
					    		está totalmente carregado.
			keydown	    		quando uma tecla no teclado é pressionada.
			keyup	    		quando uma tecla no teclado é liberada (depois de pressionada).
			scroll      		quando há “rolagem” (scroll) num elemento.
			animationend 		occurs when the CSS animation has completed /* ISSO É MT UTIL MDSS*/
			animationstart 		occurs when the CSS animation has started
			animationiteration  occurs when the CSS animation is repeated	 
			change 				QUANDO O ELEMENTO MUDA.
			input               Ativado quando o valor num campo de input muda(util para validação de quantidade
								de caracteres em senhas).

						TEM MUITAS, N DÁ P LISTAR, TEM NESSE LINK
						 ->https://www.w3schools.com/jsref/dom_obj_event.asp
			______________________________________________________________________________________________

			

				E FUNCAO É UMA FUNCAO ANONIMA(OU NAO), SE QUISER JOGAR A FUNCTION DIRETO PODE
				SE FOR ATRIBUIR A VARIAVEL, NOVAMENTE, NÃO PASSE PARENTESE, OU ELA
				EXECUTARÁ NO PARAMETRO.


				**** PARA ADCIONAR UM EVENTO NA JANELA, COMO LOAD POR EXEMPLO, USE
				NO LUGAR DO NOME ELEMENTO, A PALAVRA WINDOW ****



				EXEMPLO COM ANIMATIONEND:
					 let tirar = function (){
			            document.getElementById('meubotao').classList.remove('sacode');
			        }

					if(reserva.local==="Selecione"){
		               let doc = document.getElementById('meubotao');
		               doc.classList.add("sacode");
		               doc.addEventListener("animationend",tirar);
		            }




		         _________________[ REQUEST ANIMATION FRAME] _________________

		         PODE SUBSTITUIR O SET INTERVAL.
		         EXIGE UM CALLBACK QUE VAI SER CHAMADO REPETIDAMENTE. O FRAMERATE
		         QUEM DEFINE É O PROPRIO BROWSER.

		         ANIMATION FRAME É UMA FUNÇÃO RECURSIVA. VOCE CHAMA ELA UMA VEZ
		         FORA DA FUNCAO QUE O ANIMATION FRAME RODA, E DEPOIS, RODA DENTRO
		         DA FUNCAO QUE ELE CHAMA(RECURSIVA). SE CHAMA UMA VEZ, E DEPOIS
		         SE CHAMA RECURSIVAMENTE DENTRO DA FUNÇÃO.


		         A FUNCAO ANIMATION FRAME CHAMA UMA FUNCAO QUE EXECUTA A ANIMAÇÃO
		         DE ALGUMA COISA. NELA, A FUNCAO DE ANIMAÇÃO INICIA UMA VEZ, 
		         E DEPOIS COM O REQUEST ANIMATION FRAME É CHAMADA NOVAMENTE DENTRO
		         DA FUNCAO DE ANIMAÇÃO:


		         function mover(){
			        let tam= window.innerWidth;
			          if(document.getElementById('boneco').offsetLeft <= (tam-100)){
			             var boneco = document.getElementById('boneco');
			             boneco.style.left=(boneco.offsetLeft+10)+'px';
			             console.log(boneco.style.offsetLeft);
			             window.requestAnimationFrame(mover);
			          }
			         
			      };

			      mover();

					------------------------[ARRAY]-----------------------


					PARA DECLARAR UM ARRAY SIMPLES, UTILIZAMOS O PARAMETRO:

											Array()

						NÃO PRECISA DA PALAVRA NEW, O JS TEM INTELIGENCIA
								   PRA SABER QUE NAO PRECISA.


					PARA CRIAR, CRIAMOS UMA VARIAVEL, E A ATRIBUIMOS AO ARRAY:

									var nova_lista = Array()



										MODOS DE ATRIBUIÇÃO:


									var lista_frutas = Array();
									 lista_frutas[0]='inicio';


									  var lista_frutas = []

								(nessa o js compreende que se trata de um
							   array, nao precisa levar "array" na frente)


											    --

							  var lista_frutas= Array('banana','maçã')


							    var lista_frutas = ['banana','maçã'];

							   (nessa o js compreende que se trata de um
							   array, nao precisa levar "array" na frente)




					 **ASSIM COMO TODO ARRAY, ELE "pode começar" DE ZERO
		** UM ARRAY NAO PRECISA TER INDICE NUMERO. EX:lista_frutas[2]='Kiwi';lista_frutas['x']='Maçã';
				** PARA IMPRIMIR O VALOR NA POSIÇÃO N DE ARRAY: document.write(array[N])
				** PARA IMPRIMIR O ARRAY INTEIRO: document.write(Array())
								** ARRAY DO JS É POR DEFAULT, DINAMICO

										LENGTH EM ARRAYS:

				LENGTH PODE SER USADO EM STRINGS E EM ARRAYS, EM STRING, RETORNA O TOTAL 
				DE CARACTERES CONTIDOS, E EM ARRAYS RETORNAM A QUANTIDADE DE ELEMENTOS
				DENTRO. PORÉM, ESSE ATRIBUTO SÓ RETORNA O VALOR REAL RELATIVO A QUANTIDADE
				DE ELEMENTOS DENTRO DO ARRAY SE E SOMENTE SE OS ELEMENTOS ESTIVEREM INDEXADOS
				DE FORMA NÚMÉRICA E SEQUENCIAL, OU SEJA, SE UM DOS ELEMENTOS TIVER UM VALOR
				DE STRING, ELE NÃO É CONSIDERADO, ENTAO O LENGTH NAO CONTA O VALOR REAL.
				SOMENTE PARA VALORES NUMERICOS.

				O ARRAY DEVE COMEÇAR DE ZERO, SE NAO COMEÇA DE ZERO, O LENGTH CONTABILIZA O
				ZERO ASSIM MESMO, MAS A POSIÇÃO 0 FICARÁ VAZIA.

				SE INDICARMOS POR EXEMPLO, A ATRIBUIÇÃO DE UMA ORDEM DECRESCENTE QUE NAO CHEGASSE
				ATE, DA POSIÇÃO 9 ATE A 6, O ARRAY CRIA AS POSIÇÕES DO 0 ATE O 9, POREM AS POSIÇOES
				DE 0 ATE 5 FICARÃO VAZIAS, COMEÇANDO A ATRIBUIÇÃO A PARTIR DO 6 



				------------------------[ARRAYS BI OU MULTI DIMENSIONAIS]------------------------

						ARRAYS MULTIDIMENSIONAIS SÃO BASICAMENTE, ARRAYS DENTRO DE ARRAYS.
									UM ARRAY QUE APONTA PARA OUTRO ARRAY.

						PARA CRIAR ARRAYS MULTIDIMENSIONAIS PRECISAMOS ATRIBUIR AS POSIÇÕES
						DO ARRAY QUE QUEREMOS QUE TENHAM ARRAYS, OUTROS ARRAYS, ASSIM:

								var lista_coisas = Array(); // CRIANDO UM ARRAY

								lista_coisas['x/0'] = Array();    //CRIANDO UM ARRAY DENTRO DA PRIMEIRA
														         //POSIÇÃO DO ARRAY LISTA COISAS
								lista_coisas[y/1]='banana';
								lista_coisas[z/2]= Array(); 

								lista_coisas[x/0][0] = 'banana';
								lista_coisas[x/0][1]= 'maçã';
								lista_coisas[x/0][2]='uva';

								lista_coisas[z/2][0] = 'pera';
								lista_coisas[z/2][1] ='laranja';


								em demonstração, seria assim:

									 lista_coisas

											  _______	
											 |		 | -> esse é o array externo	
											 	 x/0   y/1       z/2
										 __   ________________________
										|    |banana |banana |pera    |
							esse é o ->	|  0 |_______|_______|________|
						 array interno	|    |       |		 |laranja |
										|  1 | maçã  |		 |		  |
										|    |_______|       |________|
										|  2 |uva    |		
										|__  |_______|


			EU TAMBEM POSSO CRIAR UM ARRAY DENTRO DE UMA POSIÇÃO DE ARRAY DA SEGUINTE FORMA:

									var lista_coisas = Array()
							lista_coisas[0] = Array('banana','pera', 'maçã');

													OU

							lista_coisas['frutas'] = Array('banana','pera', 'maçã');
					(o length não vai contar ele como um espaço no array, pois não é numerico)

												   OU TB


								lista_coisas[0] = ['banana','pera', 'maçã'];

													OU

								lista_coisas['frutas'] = ['banana','pera', 'maçã'];



					OS ARRAYS INTERNOS TAMBEM PODEM TER INDICES DA ORDEM DE CARACTERE, ASSIM:

								lista_coisas['pessoas']['a']='maria';

						**PORÉM O ATRIBUTO LENGTH NÃO É INCREMENTADO POR NÃO SER NUMERICO***






										DÁ PRA DECLARAR ASSIM TAMBEM :

										let array = [[],[]]






									[ADCIONAR/REMOVER ELEMENTOS DE ARRAY]

												  ADCIONAR
												  ________


					   		**PARA ADCIONAR UM ELEMENTO NA ULTIMA POSIÇÃO DO ARRAY USE:**

										meu_array.push('elemento');

							**PARA ADCIONAR UM ELEMENTO NA PRIMEIRA POIÇÃO DO ARRAY USE:**

										meu_array.unshift('elemento');
							(REARRANJA OS ITENS QUE JA ESTAVAM NO ARRAY, EMPURRANDO ELES
								PARA O FIM, CONFORME NOVOS ENTRAM USANDO ESSE METODO)


												  EXCLUIR
												  _______

									  NENHUMA DELAS PRECISA PASSAR PARAMETRO

								    **PARA EXCLUIR ELEMENTO DO FINAL DO ARRAY**

								    		   meu_array.pop()
								    	(EXCLUI SOMENTE O ULTIMO, N MUDA)

								    **PARA EXCLUIR ELEMENTO DO INICIO DO ARRAY**

								    		 meu_array.shift()




						ADCIONAR/REMOVER ELEMENTOS DE UM ARRAY, DENTRO DE UMA POSIÇÃO DE ARRAY
						______________________________________________________________________


						PARA ISSO SELECIONAMOS O ARRAY INTERNO, O QUE ESTÁ DENTRO DE UMA POSIÇÃO 
						DO ARRAY EXTERNO, E USAMOS A FUNÇÃO QUE DESEJAMOS PARA A INCLUSÃO/REMOÇÃO:

											var array_coisas = Array();
											array_coisas[0]= Array(); // ou []

												array_coisas[0].FUNCAO

					// e entao ele adcionará ou removerá do array interno a posiçao do array externo


								FUNCAO:

								push('elemento') // COLOCAR ELEMENTO AO FIM DO ARRAY
						unshift('elemento') // COLOCAR ELEMENTO NO COMEÇO DO ARRAY REARRANJANDO OS INTERIORES
								pop() // nao leva parametro. EXCLUI O ULTIMO ELEMENTO DO ARRAY
								shift()// nao leva parametro. EXCLUI O PRIMEIRO ELEMENTO DO ARRAY

						_____________________[PESQUISA DE ITEM NO ARRAY]_________________


								PARA PESQUISAR UM ITEM NO ARRAY USAMOS A FUNÇÃO:

											.indexOf('elemento');

								ESSE METODO RETORNA A POSIÇÃO DO ARRAY ONDE ESTÁ O
								ELEMENTO. SE NÃO O ENCONTRA, ELE RETORNA -1.

								ASSIM, PODEMOS FAZER UMA VERFIFICAÇÃO PARA, SEMPRE QUE O
								NUMERO FOR MENOR QUE 0 EXIBIR UMA MENSAGEM DIZENDO QUE NAO 
								EXISTE.

											**A PESQUISA É CASE SENSITIVE**


											var lista_frutas =  Array();
											 lista_frutas[0]='banana';
											 lista_frutas[1]='maçã';
											 lista_frutas[2]='morango';
											 lista_frutas[3]='uva';

											 var aux = lista_frutas.indexOf('morango');

											if (aux < 0){
												console.log('Não existe esse elemento');
											}
											else{
												console.log('o elemento existe e está na posição:' +aux);'
											}

						_______________[RETIRAR DETERMINADOS INDICES ESPECIFICOS]______________

						Retira x elementos a partir de determinado indice:
						EX:
						arr.splice(aPartirDesseIndice, tireNITens, insiraEsse); - Para colocar outro elemento depois tirar x indice(s)
						arr.splice(aPartirDesseIndice, tireXITens);

						var myFish = ["angel", "clown", "mandarin", "surgeon"];

						// a partir do índice 2 remove 0 elementos, e insere "drum"
						var removed = myFish.splice(2, 0, "drum");
						//myFish é ["angel", "clown", "drum", "mandarin", "surgeon"]
						//removed é [], nenhum elemento removido

						//a partir do índice 3 remove 1 elemento 
						removed = myFish.splice(3, 1);
						//myFish é ["angel", "clown", "drum", "surgeon"]
						//removed é ["mandarim"]


								_____________[ORDENAR ELEMENTOS DENTRO DO ARRAY]___________


						PARA ORDENAR OS ELEMENTOS DE UM ARRAY DE MODO ALFANUMERICO USAMOS A FUNÇÃO:

													.sort()



											var lista_frutas= Array();
											  lista_frutas.sort();

							ESSE METODO SÓ FUNCIONA DIREITO PARA LETRAS, PARA NUMEROS ELE ARRUMA
							SE BASEANDO NO PRIMEIRO DIGITO DO NUMERO, EX:

													11
													13
													23
													3
													40
													7


								PARA ORDENAR NUMEROS, PRECISAMOS FAZER UMA FUNCAO E PASSA-LA PARA
								O METODO SORT COMO REFERENCIA, COMO DIZ A DOCUMENTAÇÃO. ASSIM:

								function ordenar(a,b){
									return a-b;
								}


										lista_frutas.sort(ordenar);

									SE PASSA A REFERENCIA DA FUNCAO, POIS OS VALORES SERÃO
									TESTADOS DENTRO DA FUNÇÃO, NÃO NO MOMENTO DA ATRIBUIÇÃO.


								ONDE A É A PRIMEIRA POSIÇAO QUE SERA TESTADA COM A SEGUNDA QUE
								É B, E DEPOIS VAI MUADNDO, A SEGUNDA COM A TERCEIRA, A TERCEIRA
								COM A QUARTA, E SE SUBTRAI A PRIMEIRA DA SEGUNDA, SE O VALOR FOR
								 < 0 A VAI SER ORDENADO ANTES DE B, SE O VALOR FOR > 0 B VAI SER
								 ORDENADO ANTES DE A, SE VALORES IGUAIS A ORDEM É MANTIDA.
								 SE TIVER UMA STRING PELO MEIO DE NUMEROS, VAI DAR ERRO.
								 NO ENTANTO SE SÓ HOUVEREM STRINGS NO ARRAY, MAS STRINGS QUE REPRE
								 SENTEM NUMEROS, O JS ENTENDE QUE O a-b SE TRATA DE UMA OPERAÇÃO E
								 CASTA AUTOMATICAMENTE.

				__________________________[ARRAY MAP]__________________________


				ARRAY MAP RETORNA UMA VERSÃO DO ARRAY ORIGINAL NA QUAL RODAMOS UMA FUNÇÃO
				PARA OPERAR ENCIMA DESTE ARRAY ORIGINAL. EXEMPLO:

				TER UM ARRAY DE NUMEROS E QUERER QUE O MAP RETORNE UM ARRAY CUJOS VALORES
				SÃO OS VALORES DO ARRAY ORIGINAL MULTIPLICADOS POR 2:
				ELE RETORNA UM ARRAY, ENTÃO O RETORNO TEM QUE SER GUARDADO POR UMA VAR.

				PEDE UMA FUNCAO DE CALLBACK(com parametro corerspondente a cada posição do array)
				 COMO PARAMETRO.

				let arrayOriginal = [2,3,6,5,10]
				const retorno = arrayOriginal.map( num => num*2);

				OU

				let arrayOriginal = ["angela", "maria","marquinhos"]
				const retorno = arrayOriginal.map(name => name.toUpperCase());

				TÁ, MAS EU PODERIA TER FEITO NA MÃO, QUAL A DIFERENÇA? ESSA AQUI:

				let arrayOriginal = [2,3,6,5,10]
				let novoArray = [];

				for(let i = 0; i<arrayOriginal.length; i++)
					novoArray.push(arrayOriginal[i]*2);

				MANUTENIBILIDADE, LEGIBILIDADE, PERFORMANCE, IMUTABILIDADE. ESSE MÉTODO ESTÁ NATIVAMENTE NO
				JS, NÃO TEM NECESSIDADE DE REPETIR.

				É BOM PRA EXECUTAR TODAS AS ACOES PRA UM INDICE DE ARRAY ESPECIFICOS.
				- PODEMOS CRIAR UM NOVO ARRAY COM SOMENTE X INFORMAÇÕES DE CADA OBJETO EM CADA
				INDICE DO ARRAY
				- PODEMOS OBTER DE UM ARRAY SOMENTE AS INFORMAÇÕES QUE QUEREMOS E JOGÁ-LAS NUMA TABELA.
				- SUPONDO UMA SIMULAÇÃO DE PREÇO DE ITENS, SE QUISERMOS VER COMO FICA O PREÇO DE UM OBJETO
				COM SEI LA, 1.5% DE IMPOSTO DE ALGO SEM MUDAR O ARRAY ONDE ESTE OBJETO ESTÁ, PODEMOS USAR O
				MAP.

				pode levar os parametros:
				valorAtual, indice, array
				somente valorAtual é obrigatório.


				_______________________[REDUCE]_______________________

				array.reduce(function(acumulador, elementoAtual, indexAtual, arrayOriginal), valorInicial)

				Temos: o array ao qual iremos chamar o método, uma função callback e uma variável de valor inicial.
				Na função callback podemos passar quatro argumentos:
				* A variável que vai servir como acumuladora (que é o valor retornado na ultima iteração) (obrigatório).
				* O valor do atual elemento sendo iterado (obrigatório).
				* O índice do elemento atual (não é obrigatório).
				* O array original (não é obrigatório).

				A variável valorInicial será o valor que a variável acumuladora iniciará (você verá utilidade jajá).
				Se não passarmos nada o valorInicial será o primeiro valor do array, e o valor atual iniciará pelo segundo.

				TEM A FUNÇÃO DE ACUMULAR OS VALORES DO ARRAY, E RETORNAR.

				EX:

				const sons = ["auau", "miau", "cócóricó"];
				const sonsHtml = sons.reduce((acc, som) => {
				  return (acc += `<li>${som}</li>`);
				  }, "");
				  
				//Ou se você quiser economizar linhas.
				const sonsHtml = sons.reduce((acc, som) => acc += `<li>${som}</li>`, "");

				//Retorno:
				//"<li>auau</li>
				//<li>miau</li>
				//<li>cócóricó</li>"

				EU POSSO USAR ISSO PARA, POR EXEMPLO, OBTER O VALOR TOTAL DE UM ARRAY COM OBJETOS
				REFERENTES A COMPRAS. 


							__________________________[JOIN]______________________________

				O método join() junta todos os elementos de uma array (ou um array-like object) em 
				uma string e retorna esta string.

				const elements = ['Fire', 'Air', 'Water'];

				console.log(elements.join());
				// expected output: "Fire,Air,Water"

				console.log(elements.join(''));
				// expected output: "FireAirWater"

				console.log(elements.join('-'));
				// expected output: "Fire-Air-Water"

				O UNICO PARAMETRO(OPCIONAL) DA FUNCAO, É UM SEPARADOR. 
				CASO UM ELEMENTO SEJA UNDEFINED OU NULL, RETORNA UMA STRING VAZIA.
							
				__________________________[ESTRUTURAS DE REPETIÇÃO]____________________________




			   								  _____ WHILE ______



			   					FORMATO:

			   					while(condicao){
			   						//logica
			   					}

			   					EXECUTA UMA LOGICA ENQUANTO A CONDIÇÃO RETORNAR TRUE, 
			   					SE RETORNA FALSE, PARA. 
			   					É IMPORTANTE ESTABELECER UMA CONDIÇÃO DE PARADA, PARA
			   					NÃO GERAR LOOP INFINITO, EXEMPLO:

					   					while(x<=10){
										 	//logica
										 	document.write(x+'<br>');
										 	
										 	x++;
								 		}

								 se o x nao fosse incrementado a cada volta, sempre seria
								 menor que 10, gerando um loop infinito.


								 		PARANDO A EXECUÇÃO DENTRO DE DENTRO DO BLOCO

								 DÁ PRA PARAR A EXECUÇÃO QUANDO ELA ATENDER DETERMINADA 
								 CONDIÇÃO DENTRO DO PROPRIO BLOCO USANDO UM IF, COM UM
								 BREAK.

								 ASSIM:


											 while(x<=10){
											 	//logica
											 	document.write(x+'<br>');
											 	if(x===5){
											 		break;
											 	}
											 	x+=2;
											 }


									É POSSIVEL TAMBEM, DE DENTRO DO BLOCO WHILE, EXECUTAR
									UMA DETERMINADA INSTRUÇÃO, E QUANDO A EXECUTAR, FAZER
									COM QUE OS PASSOS DEPOIS DESSA LOGICA SEJAM IGNORADOS
									INTERROMPENDO A EXECUÇÃO ATUAL E PARTINDO DIRETAMENTE
									PARA A PROXIMA VOLTA DO LOOP. PARA ISSO UTILIZAMOS A 
									INSTRUÇÃO CONTINUE.

									MAS E IMPORTANTE QUE A CONDIÇÃO DE PARADA(INCREMENTO
										POR EXEMPLO) FIQUE ANTES DO BLOCO QUE LEVA A 
									INSTRUÇÃO CONTINUE, POIS, SE A CONDIÇÃO DE PARADA ESTIVER
									DEPOIS, ELA TAMBEM SERÁ IGNORADA E GERARÁ LOOP INFINITO.


											  while(x<=10){
											 	x++;
											 	//logica
											 	if(x===5){
											 		continue;
											 	}
											 	document.write(x+'<br>');
											 }







											 ______ DO WHILE ______





								FUNCIONA QUASE QUE COMO O WHILE MAS COM UMA DIFERENÇA, COMO ELE EXECUTA
								O CODIGO ANTES DE TESTAR A CONDIÇÃO, ENTÃO ELE SERÁ EXECUTADO PELO MENOS 
								UMA VEZ, MESMO QUE A CONDIÇÃO SEJA FALSA, POIS O TESTE CONDICIONAL SE
								ENCONTRA DEPOIS DA EXECUÇÃO.

								EX:


								var x=11;
								do{
									document.write(x+'<br>');
								}while(x<=10)


								BREAK E CONTINUE FUNCIONAM AQUI TAMBEM, MAS SE ATENTE PARA AS GERADORAS DE
								LOOP INFINITO.






												______ FOR _______





								ESTRUTURA:

								for (variavel(inicial); condicao de parada ; variavel de controle(iteração)){

								}

								ASSIM:

								for( var x=10; x>=0; x--){
									document.write(x+'<br>');
								}

								NOS OUTROS LAÇOS ERA NECESSARIO CRIAR A VARIAVEL FORA, NO FOR N PRECISA.

								BREAK E CONTINUE FUNCIONAM AQUI TAMBEM.

	 **USAMOS O ATRIBUTO LENGTH NO ARRAY E O COLOCAMOS NO FOR, ESTABELECENDO A CONDIÇÃO DE PARADA: O FIM DO ARRAY.**


	 							_______ FOR ENCADEADO_____ :

			 						for(var y=1; y<=10;y++){
										for(var x=1; x<=10; x++){
											document.write(y+' x '+x+' = '+(y*x)+'<br>');
										}
										document.write('<hr/>');
									}

		INICIA A ITERAÇÃO FORA, E ITERA O LAÇO DE DENTRO ATE A CONDIÇÃO DE PARADA DO LAÇO INTERNO, QUANDO
		A CONDIÇÃO É ATINGIDA, A EXECUÇÃO VOLTA PRA O LAÇO EXTERNO, QUE ENTRA DE NOVO NO LAÇO INTERNO, O
		RODANDO ATE A CONDIÇÃO DE PARADA. ESSE PROCESSO É FEITO ATÉ QUE O LAÇO EXTERNO TENHA ATINGIDO SUA
		PRÓPRIA CONDIÇÃO DE PARADA.



									________ [FOR IN] _________


							UM DOS FORS PENSADOS PRA ARRAY(e outros).
				PERCORRE CADA POSIÇÃO DO ARRAY ATÉ QUE ENCONTRE UMA POSIÇÃO UNDEFINED,
				OU SEJA, QUE NÃO ESTÁ DEFINIDA, NÃO EXISTE NO ARRAY. A LOGICA É TODA
				FEITA INTERNAMENTE. DECLARA-SE UMA VARIAVEL QUE SERÁ PERCORRIDA 
				CONFORME A QUANTIDADE DE ITENS NO ARRAY, DEPOIS USA-SE A PALAVRA
				RESERVADA in E DEPOIS SE COLOCA O ARRAY, ASSIM:

						for(let x in lista_convidados){
							console.log('Indice '+x+ ' elemento '+lista_convidados[x]);
						}

			***ESSE FOR NAO É MUITO USADO MAS É BOM PRA INDICES NÃO NUMERICOS/SEQUENCIAIS***

						USADO TAMBEM PRA PERCORRER OS ATRIBUTOS DE UM OBJETO. 
					SUPONDO O MÉTODO DE UMA CLASSE CORRESPONDENTE A UM DETERMINADO OBJETO
					ONDE ESTE METODO É CHAMADO PELO OBJETO, USAMOS O THIS PARA FAZER REFERENCIA
					AO OBJETO QUE O ESTÁ CHAMANDO, ASSIM PERCORREMOS ATRAVÉS DA VARIAVEL, O THIS
					OBJETO, COMO SE O OBJETO FOSSE O ARRAY ONDE CADA UM DOS INDICES FOSSE UM
					ATRIBUTO. NESTE CASO, SE PEDIRMOS PARA RETORNAR A VARIAVEL A CADA ITERAÇÃO
					ELA RETORNA UM ATRIBUTO DO OBJETO.

					NESTE CASO INTERESSANTE, USANDO O THIS DENTRO DA CLASSE, CLARAMENTE FAZEMOS REFERENCIA
					OU A UM METODO/ATRIBUTO DA PROPRIA CLASSE OU AO OBJETO QUE O CHAMA, ASSIM, O OBJETO
					SE COMPORTA COMO UM ARRAY.

					SE ITERANDO O THIS(OBJETO), PEDINDO PARA RETORNAR A VARIAVEL CORRESPONDENTE A ITERAÇÃO
					NAQUELE MOMENTO, TEMOS O ATRIBUTO DO OBJETO, E ASSIM COMO UM ARRAY, PODEMOS TAMBÉM 
					RETORNAR O VALOR NO ATRIBUTO NAQUELE MOMENTO, USANDO O INDICE: THIS[Indice]


					EXEMPLO:


					class Despesa{
						constructor(ano,mes,dia,tipo,descricao,valor){
							this.ano = ano;
							this.mes = mes;
							this.dia = dia;
							this.tipo = tipo;
							this.descricao =  descricao;
							this.valor = valor;
						}
						validarDados(){
							for(let i in this){
								if(this[i] == undefined || this[i] == "" || this[i] == null || this[i] == "tipo" || this[i] == "ano" || this[i] == "mes" )
									return false;
							}
							return true;
						}
					}

					let despesa = new Despesa(args);
					despesa.validarDados();


										______ [FOR EACH] ______



					APESAR DO NOME, NÃO É PROPRIAMENTE UMA ESTRUTURA DE REPETIÇÃO
			O FOR EACH ESTÁ ABAIXO DO PROTOTYPE DO ARRAY, É MAIS UMA FUNÇÃO DO QUE UM LOOP.
								 *É UMA FUNÇÃO DO OBJETO ARRAY*
							ESPECIFICAMENTE FEITO PARA PERCORRER ARRAYS.



							array.forEach(funcaoAnonima(PARAM){//logica})



							OS PARAMETROS VARIAM A DEPENDER DA NECESSIDADE 

					SE EU PRECISAR SOMENTE TRABALHAR COM O VALOR, MINHA FUNÇÃO DE
							CALLBACK LEVA SÓ UM PARÂMETRO, REFERENTE AO VALOR
							NAQUELA POSIÇÃO QUE O FOR EACH ESTÁ.

							assim:

							array.forEach(function(valor){//logica})




				SE EU PRECISAR TRABALHAR COM O VALOR E O INDICE, MEU CALLBACK LEVA
				DOIS PARAMETROS, O VALOR(PRIMEIRO), E O INDICE.

					assim:

					array.forEach(function(indice,valor){//logica})




				AINDA, SE EU PRECISAR TRABALHAR COM TUDO ISSO E O ARRAY INTEIRO, O
				CALLBACK LEVA TRES PARAMETROS, PRIMEIRO REFERENTE AO VALOR, SEGUNDO
				REFERENTE AO INDICE, E O TERCEIRO REFERENTE AO ARRAY.

			
				listaFuncionarios.forEach(function(valor, indice,array){//logica}



		***** A FUNCAO DE CALLBACK QUE VAI NO FOR EACH PODE SER ATRIBUIDA A UMA VARIAVEL, 
							E JOGADA DENTRO DO FOR EACH *****

						var f = function(valor, indice, array){
							//logica
						}

								array.forEach(f);


				*A EXEMPLO DA FUNÇÃO SORT, CRIAMOS UMA FUNCAO E PASSAMOS PARA ESSA
			OUTRA FUNÇÃO, DANDO PARAMETROS QUE SERÃO PREENCHIDOS PELA PRÓPRIA FUNCAO,
			INTERNAMENTE. NÃO PRECISAMOS PREENCHER OS PARAMETROS, POIS A FUNÇÃO JÁ O FAZ
			POR ISSO É NECESSÁRIO MANTER A SEQUENCIA.

			O QUE VAI NO PARAMETRO DO FOR EACH É UMA FUNÇÃO CALLBACK QUE TEM PARAMETROS DE ORDEM
			FIXA. PRIMEIRO VALOR, INDICE E DEPOIS O ARRAY. ESSES PARAMETROS SÃO TRABALHADOS DENTRO 
			DA FUNÇÃO FOR EACH, E PODEM SER RECUPERADOS.

			"PARA CADA ELEMENTO, EXECUTE ESSA FUNÇÃO", BEM ANALOGO A OUTRAS ESTRUTURAS DE REPETIÇÃO
			ONDE PARA CADA ITERAÇÃO SE EXECUTA A LOGICA DITA.

			[O FOR EACH SÓ ATUA SOBRE ELEMENTOS CUJA POSIÇÃO SEJAM NUMEROS INTEIROS POSITIVOS
			SEQUENCIAIS, SE O VALOR FOR UM BOOLEAN, UM VALOR NEGATIVO, OU UM CHAR, ELE O IGNORA
			E SUA EXIBIÇÃO É ANULADA.

				EX:

				var listaFuncionarios= Array();

				listaFuncionarios['x']='Viviane';
				listaFuncionarios[false]='Rosângela';
				listaFuncionarios[10]='Miguel';
				listaFuncionarios[3]='Lucas';
				listaFuncionarios[-12]='Fernanda';


				var f = function(valor, indice){
					console.log(valor,indice);
					}


				listaFuncionarios.forEach(f); 

					    RESULTADO:

						//Lucas 3
						//Miguel 10

					POIS OS INDICES NEGATIVOS BOOLEANS E TIPO STRING NAO FORAM EXIBIDOS
			]
			*

			PODEMOS MUDAR O VALOR EM UMA DETERMINADA POSIÇÃO DO ARRAY USANDO SEU INDICE NO MOMENTO
			ATUAL DE EXECUÇÃO DO FOR EACH, ASSIM:

								if(valor=='Lucas'){
									listaFuncionarios[indice]='Seu ruim';
								}

              





			  __________________________[ FIND ] ____________________________

			 /* ESTE MÉTODO TAMBEM RODA ARRAY. PROCURA O PRIMEIRO ITEM QUE ATENDE 
			  DETERMINADA CONDIÇÃO E O RETORNA.
			  DEVE SER APLICADO SOBRE UM ARRAY, E LEVA UMA FUNÇÃO ANONIMA.*/

			  ASSIM:


			  let arr = [10,20,30,40];


			  let pesquisa = arr.find(function(el){
		        if(el>=20) {
		          return el;
		        }
		      });
		      console.log(pesquisa);


		      /*O PARAMETRO PASSADO PARA A FUNÇÃO SERÁ O ELEMENTO, ELE PASSARÁ PELO PARAMETRO
		      DA FUNCAO,AUTOMATICAMENTE ONDE DENTRO DELA, PODEMOS TRATAR ELE DA FORMA QUE 
		      DESEJARMOS. A FUNCAO RETORNA O ELEMENTO.*/




		      let string ='Olá'

		      let pesquisa = arr.find(function(el){
		        if(el==='Olá') {
		          return el;
		        }
		      });
		      console.log(pesquisa);

		      NA DOCUMENTAÇÃO, DIZ QUE SE PODE USAR MAIS ARGUMENTOS, MAS, ACHO QUE JA TA 
		      BOM.

		      arr.find(callback(element, index, array){[, thisArg]})





		      ________________________[FIND INDEX]_______________________


		      ASSIM COMO O FIND, RODA O ARRAY, PROCURANDO A PRIMEIRA OCCORENCIA
		      DE UM DETERMINADO ELEMENTO, MAS NÃO O RETORNA, RETORNA SEU ÍNDICE.

		      var array1 = [5, 12, 8, 130, 44];

				function isLargeNumber(element) {
				  return element > 13;
				}

				console.log(array1.findIndex(isLargeNumber));


				/*NA DOCUMENTAÇÃO, DIZ QUE TAMBEM PODE USAR MAIS ARGUMENTOS*/

				arr.findIndex(callback(element, index, array){ thisArg})




			  _______________________[FILTER ARRAY]__________________________


			MÉTODO NATIVO DO OBJ ARRAY, CHAMADO PELO OBJETO QUE LEVA UMA FUNÇÃO DE
			CALLBACK QUE RECEBE COMO PARÂMETRO CADA INDEX DO ARRAY. A FUNCÃO PODE
			FAZER UMA TRATATIVA PARA RETORNAR AO FILTER O OBJETO (OU ATRIBUTO DELE)
			QUE ATINGIU DETERMINADA CONDIÇÃO.

			FORMATO:

			arr.filter( obj =>{
				if(true)
					return logica
			});

			DÁ PRA APLICAR UM FILTRO NO FILTRO, QUANDO QUEREMOS ATINGIR DUAS LOGICAS
			COMO POR EXEMPLO NESTE CASO:

			CONSIDERANDO QUE TEMOS UM ARRAY DE VÁRIOS FUNCIONÁRIOS PEDIMOS PARA RETORNAR
			AQUELES CUJO SALARIO É MAIOR QUE 200 REAIS:

			funcionarios.filter( obj=>{
				return obj.salario > 2000;
			})

			E SE QUISERMOS RETORNAR OS FUNCIONARIOS DO ARRAY QUE TENHAM SALARIO MAIOR QUE
			2000 REAIS E QUE ESTEJAM ATIVOS:

			funcionarios.filter( obj=>{
				return obj.salario > 2000;
			}).filter(obj2 => {
				return obj.status === "ativo";
			})

			/*APESAR DE EU ACHAR QUE NAO TEM SENTIDO FAZER DOIS FILTROS, O PROFESSOR ENSINOU
			MAS NÃO BASTAVA FAZER SÓ UM FILTRO COM return obj.salario > 2000 && obj.status === "ativo"?*/
			funcionarios.filter(obj => return obj.salario > 2000 && obj.status === "ativo";})


			ATENÇÃO, ESTE METODO NÃO AFETA O ARRAY ORIGINAL, SE QUISERMOS QUE AS ALTERAÇOES 
			SEJAM FEITAS NELE FAZEMOS:

			array = array.filter( o => return logica;)


			ESSE MÉTODO É MUITO UTIL, SE EU TIVER UM CAMPO DE PESQUISA QUE LEVE MAIS DE DOIS PARAMETROS
			SE EU DEIXAR UM DELES VAZIO E PESQUISAR COM UM SÓ DELES, ELE RETORNA TODOS OS RESULTADOS
			COM A MESMA CHAVE QUE EU INSERI, SE PESQUISAR COM OS DOIS, ELE RETORNA TODOS OS RESULTADOS
			COM VALORES CORRESPONDENTES AS CHAVES, BASTA FAZER COMO NO EXEMPLO:


			let despesasFiltradas = Array();
			despesasFiltradas =	this.recuperarTodosRegistros();
			let len = despesasFiltradas.length;

			console.log(despesasFiltradas);
			if(despesa.ano != ""){
				despesasFiltradas = despesasFiltradas.filter(d => d.ano === despesa.ano);
				console.log(despesasFiltradas, "ano");
			}

			
			if(despesa.mes !=""){
				despesasFiltradas = despesasFiltradas.filter(d => d.mes === despesa.mes);
				console.log(despesasFiltradas, "mes");
			}
			
			if(despesa.dia !=""){
				despesasFiltradas = despesasFiltradas.filter(d => d.dia === despesa.dia);
				console.log(despesasFiltradas, "dia");
			}
			if(despesa.tipo !=""){
				despesasFiltradas = despesasFiltradas.filter(d => d.tipo === despesa.tipo);
				console.log(despesasFiltradas, "tipo");
			}
			if(despesa.descricao !=""){
				despesasFiltradas = despesasFiltradas.filter(d => d.descricao === despesa.descricao);
				console.log(despesasFiltradas, "desc");
			}
			if(despesa.valor !=""){
				despesasFiltradas = despesasFiltradas.filter(d => d.valor === despesa.valor);
				console.log(despesasFiltradas, "valor");
			}
			if(len === despesasFiltradas.length)
				console.log("não encontrou nada");

			é como se fosse uma eliminatória, ele vai passando por todos estes testes e atribuindo
			a si mesmo o array com os resultantes do teste. caso nenhum deles passe, ele fica 
			vazio.
	
             ______________________ TRATAMENTO DE ERROS ______________________

             FUNCIONA COMO FILTRO DE ERROS, CAPTURA UMA SITUAÇÃO QUE RENDERIA
             UMA EXCEÇÃO, E A TRATA, DANDO UMA ALTERNATIVA AO ERRO, E ATÉ INDICANDO
             O QUE A LOGICA DEVE FAZER CASO O CODIGO GERE AQUELE ERRO, EXECUTANDO
             OUTRA LOGICA.

             PARA APLICAR ISSO, USAMOS OS BLOCOS: TRY, CATCH, FINALLY, E TRHOW.

             [a] O TRY É A PRIMEIRA PARTE, NELE, O CÓDIGO QUE PODE VIR A GERAR UM ERRO
             FICA. ** podemos usar quantos trys quizermos **

             [b] O CATCH É O TIPO DE ERRO QUE O CODIGO QUE O TRY CONTEM, PODE GERAR
             , PODEMOS PREVER ESSES ERROS E PREPARAR O CODIGO PARA TRATA-LO QUANDO
             ELE OCORRER, NESSE CASO, O CATCH DEVE RECEBER A EXCEÇÃO.

             [c] O FINALLY, É O QUE OCORRE QUANDO O ERRO É CAPTURADO, É O BLOCO ONDE
             SE SITUA A LÓGICA QUE, EM CASO DE ERRO DA LOGICA ORIGINAL, É EXECUTADA,
             NÃO DEIXANDO O CODIGO PARAR POR CAUSA DO ERRO.

             [d] FORÇA A CRIAÇÃO DE UM ERRO EM UM DETERMINADO LUGAR DO CODIGO.



             [OBS] AO CONTRARIO DO JAVA NO QUAL SE PRECISA ESPECIFICAR O NOME DA 
             EXCEÇÃO, EM JS, SÓ É NECESSARIO PASSAR UMA VARIAVEL QUALQUER, COMO
             PARAMETRO, E ELA RECEBERÁ AUTOMATICAMENTE A EXCEÇÃO QUANDO OCORRER.

             [C]** O ERRO FICA ARMAZENADO COMO STRING NA VARIAVEL, UMA BOA DICA, É
             ENVIAR ESSA STRING PARA O SERVIDOR, POR MEIO DE UMA FUNCAO QUE 
             RECEBE O ERRO COMO PARAMETRO, PARA A EQUIPE DE DESENVOLVIMENTO
             VER O QUE ESTA OCORRENDO NA APLICAÇÃO



             		var video=Array();

					video[1]=Array();
					video[1]['nome']='Fullmetal Alchemist'
					video[1]['categoria'] ='Anime';

					function getVideo(video){

						//logica
						try{
							console.log(video[0]['nome']);
						}
						catch(erro){
							tratar(erro);
							console.log('Agora podemos tratar o erro');
						}
						finally{
							console.log('Sempre passa por aqui');
						}
						console.log('A aplicação nao morreu');
					}

					function tratar(e){
						console.log(e);
					}


             **

             [D] PARA CRIARMOS UMA NOVA EXCEÇÃO, USAMOS A PALAVRA THROW, SEGUIDA DA PALAVRA
             RESERVADA NEW, E A PALAVRA Error, DEPOIS, DENTRO DOS PARENTESES, A MENSAGEM QUE DEVE
             SER EXIBIDA QUANDO O ERRO FOR LANÇADO. ASSIM:


             throw new Error('Mensagem');


             (ERROR É CAPITALIZE.)

             O CODIGO PODE SER COLOCADO EM QUALQUER LUGAR DO SCRIPT, ATE DENTRO DOS BLOCOS DE TRATAMENTO
             DE ERRO, PORÉM, COMO ELE FORÇA UM ERRO PROPOSITAL, MESMO PREPARANDO UM TRATAMENTO PARA
             EXCEÇÕES, ELE NAO SERÁ CAPTURADO, SE NÃO ESTIVER NO BLOCO TRY, O BLOCO TRY É RESPONSAVEL
             POR TESTAR CODIGOS QUE PODEM CONTER EXCEÇÕES, FORA DELE OS ERROS AINDA OCORREM.
             **SE UM ERRO OCORRE DENTRO DO TRY,MESMO QUE PROPOSITALMENTE, O ERRO NÃO É DISPARADO NO
             CONSOLE**


             				________________________BOM_______________________


	             		SIGLA PARA BROWSER OBJECT MODEL, API QUE PERMITE O ACESSO
	             		  VIA JS A RECURSOS NATIVOS DO NAVEGADOR, COMO HISTÓRICO, 
	             		   REDIRECIONAMENTO DE URL, SALVAR E RECUPERAR COOKIES.



	             		   					 ---- WINDOW ----

	             		  	JANELA DO BROWSER ONDE O CONTEUDO É RENDERIZADO.
	             		 	DENTRO DO WINDOW, TEMOS O OBJETO WINDOW.DOCUMENT
	             		  QUE É O QUE FORNECE O ACESSO A ARVORE DE OBJETOS DOM


	             		  WINDOW É O OBJETO FORMADO PELO BROWSER QUE INCORPORA
	             		  		A ARVORE DE ELEMENTOS HTML DA PAGINA.


*alert é um objeto do elemento window, que é a utilizaçao por codigo, de um elemento do browser: a caixa de dialogo*


						PARA CHAMAR FUNÇÕES QUE ATIVAM ESSAS FUNÇÕES NATIVAS DO TIPO JANELA
						USAMOS O NOME window.FUNCAO, ONDE AS FUNCOES SÃO VARIAS, VEJA ABAIXO:


							https://www.w3schools.com/jsref/obj_window.asp

									(VEJA WINDOW OBJECT METHODS)





										WINDOW OPEN

							ABRE UMA JANELA PARA UMA DETERMINADA URL(pop-up)

							MODO DE ESCRITA:

							window.open(url,nome,especificacoes);

							url: link para onde a pagina vai(pode ser um script interno, futuramente veremos);
							nome: nome da janela(nao muda o titulo da pagina);
				          especificações: tamanho, altura, posição, etc(dentro de aspas simples separados por virgula 
				          	dentro das aspas, uma aspa pra todos)



							<script>
								function abrir(){
									window.open('https://www.w3schools.com/jsref/met_win_open.asp','nova_janela','width=200, height=200');
								}
							
							</script>

							<button onclick="abrir()">Abrir janela</button>
							<button>Fechar janela</button>


							É SEMPRE UTIL ATRIBUIR A ABERTURA DA JANELA A UMA VARIAVEL
							POIS PRECISAMOS DA REFERENCIA DELA, PARA FUTURAMENTE PODERMOS
							FECHA-LA. :

							var janela;

							function abrir(){
								janela= window.open('url','nome','tamanho');
							}





												WINDOW CLOSE

							ESSA É SIMPLES, SO É NECESSARIO TER A REFERENCIA PARA A JANELA QUE
							SE QUER FECHAR, SEM ABRIR UMA JANELA, NAO É PSSIVEL FECHÁ-LA.
							PRIMEIRO, A ABERTURA DA JANELA DEVE ESTAR ATRIBUIDA A UMA VARIAVEL
							NA FUNCAO DE ABERTURA, SE SIM, RESGATAMOS AQUELA VARIAVEL E EM SEGUIDA
							USAMOS O METODO: close();

								janelaAFechar.close()

							ASSIM:

							var janela;

							function abrir(){
							    janela= window.open('url','nome','tamanho');
							}

							function fechar(){
								janela.close;
							}


													IMPRIMIR


							(AS FUNCOES PODEM SER JOGADAS DIRETO NO ON CLICK, OU IR DENTRO 
								DE OUTRAS FUNCOES CRIADAS POR NOS MESMOS, E CHAMADAS NO
								ONCLICK)


							IPRIME A PAGINA ATUAL, ATIVA O DRIVER DE IMPRESSÃO. BASTA NO
							 ONCLICK DE UM BOTÃO, OU NUMA FUNCAO COLOCAR:


									window.print()





								   ____________ SCREEN _______________
  								

  									     OBJETO: window.screen

					   FORNECE ACESSO A ATRIBUTOS RELATIVOS A TELA DO BROWSER
					   COMO POR EXEMPLO LARGURA E ALTURA DA PARTE INTERNA DO NAVEGADOR
					   ONDE OS ELEMENTOS HTML SÃO RENDERIZADOS, E PODEMOS TER TAMBEM
					   ESSA MESMA INFORMAÇÃO CONSIDERANDO A BARRA DE FERRAMENTAS E 
					   DE STATUS, ENTRE OUTROS.


					   PODEMOS USAR ESSAS INFORMAÇÕES PARA POR EXEMPLO, CAPTURAR O TAMANHO
					   DA TELA DO BROWSER NO DISPOSITIVO QUE ESTA ACESSANDO O SITE, E COM
					   ISSO EXIBIR UM MENU ESPECIFICO.


        		 ___   					window.screen.availHeight
        		|
	pega a 		|	   	ATRIBUTO QUE ANALIZA QUAL A ALGURA MAXIMA QUE O BROWSER PODE ATINGIR
altura e largura|	   	CONSIDERANDO SOMENTE A AREA INTERNA(SEM BARRA DE FERRAMENTAS ETC).
maxima que pode	|
atingiir, nao	|
a largura e     |	   					window.screen.availWidth
altura atual	|
				|	   	ATRIBUTO QUE ANALIZA QUAL A LARGURA MAXIMA QUE O BROWSER PODE ATINGIR
				|	   	CONSIDERANDO SOMENTE A AREA INTERNA(SEM BARRA DE FERRAMENTAS ETC).
				|
				|___
					   	temos tambem o window.screen.width/height, mas eu francamente
					   	nao acho muito util pois ele considera a barra de ferramentas.




				__	   					window.innerHeight
			   |	
	pega a	   |	   		PEGA A ALTURA DO DOCUMENTO, DA AREA INTERNA DO SITE
	l/a		   |
	atual	   |	   					window.innerWidth
			   |
			   |		   	PEGA A LARGURA DO DOCUMENTO, DA AREA INTERNA DO SITE.



					   					_______ LOCATION _______

					   					window.location.FUNCAO

					   	FORNECE ATRIBUTOS E MÉTODOS DA URL ATUAL, DO PATH ONDE ESTAMOS.

					   	 PODEMOS FORÇAR UM REDIRECIONAMENTO, ATUALIZAR A PAGINA, ETC.
					   	 QUANDO USAMOS LINKS, ATUAMOS SOBRE O OBJETO LOCATION.


					   	length	Returns the number of URLs in the history list
						History Object Methods
						Method	Description
						back()	Loads the previous URL in the history list
						forward()	Loads the next URL in the history list
						go()	Loads a specific URL from the history list


					   	 			------------------------------

					   	 				  REDIRECIONAMENTO 

					FORÇA, A PARTIR DO PROCESSAMENTO DA LINHA DE COMANDO PELO JS, QUE 
					O LINK INSERIDO É O LINK PARA A QUAL A PAGINA DEVE SER REDIRECIONADA

								window.location.href='http://www.google.com'



					***PASSANDO PARAMETROS DE UMA PAGINA PARA OUTRA UTILIZANDO O LOCATION
					HREF:***


					BASTA COLOCAR NO FIM DA URL UM: ? E DEPOIS, CONCATENAR A URL COM 
					A VARIAVEL/string/valor QUE DESEJA PASSAR PARA A PAGINA NO HREF. ASSIM:

								window.location.href="app.html?"+nivel 

						ONDE NIVEL NA OCASIÃO EM QUE EU ESCREVI ISSO, ARMAZENAVA
						A OPÇÃO ESCOLHIDA EM UM SELECT, QUE PODIA SER NORMAL, DIFICIL
						OU HARD.


						E PRA RESGATAR O PARAMETRO NA PAGINA A QUE SE DESEJA CHEGAR
						BASTA CRIAR UMA VARIAVEL E ATRIBUIR A ELA O ATRIBUTO:

						window.location.search

						ASSIM:

						var level = window.location.search

						[esse codigo retorna o conteudo depois da url do site, ou seja
						se há uma ? com parametros depois, eles serão resgatados por essa funcao

						MAS ESSA FUNCAO RETORNA UMA STRING QUE CONTEM O PARAMETRO E O ? O QUE NAO
						É INTERESSANTE, PORTANTO, PRECISAMOS TIRA-LA.

						PARA ISSO, USAMOS A FUNCAO REPLACE, QUE TIRA DETERMINADO CARACTERE E POE OUTRO

						EX:

						level = level.replace('?','');

						ISSO SUBSTITUI A INTERROGAÇÃO POR UM CARACTERE VAZIO.






						]


						*TEM FORMAS MAIS PROFISSIONAIS, MAS ESSA É A INICIAL**






									------------------------
											RECARREGAR

									  RECARREGA A PAGINA ATUAL

									  window.location.reload()




									  	CARREGAR NOVA PAGINA

				  CARREGA A PAGINA SOBRESCREVENDO A PAGINA ATUAL, OU SEJA, QUANDO CLICA NO
				  BOTÃO VOLTAR, NAO DA PRA IR PRA A PAGINA ORIGINAL.


				  					window.location.replace(url)


				  					CARREGAR PAGINA COM ANTERIOR

				  CARREGA A PAGINA MANTENDO O LINK PARA A ANTERIOR NO HISTORICO DO DOCUMENTO
				  			    ENTÃO É POSSIVEL VOLTAR PARA A PAGINA ORIGINAL.







				  			    ____________TIMING____________

				  	PERMITEM COM BASE NA DEFINIÇÃO DE UM INTERVALO DE TEMPO,
				  	EXECUTAR UMA AÇÃO DE FORMA PROGRAMATICA




				  	[A FUNCAO É O QUE VAI SER REALIZADO DURANTE O PERIODO DE
				  	EXECUCAO, E O TEMPO, É DE QUANTO EM QUANTO TEMPO AQUELA
				  	FUNCAO SERÁ REALIZADA].

				  						SET TIME OUT

				  	RECEBE DOIS PARAMETROS, UMA FUNCAO CALLBACK, E O TEMPO DE
				  	EXECUÇÃO EM MILISSEGUNDOS.
				  	EXECUTA UMA AÇÃO, UMA VEZ TRANSCORRIDO O TEMPO INFORMADO NO
				  	METODO.(UMA VEZ QUE O TEMPO ACABA EXECUTA UMA VEZ)

				  		setTimeout(funcaoAnonima,tempoMilissegundos);

				  		ASSIM:

				  		setTimeout(function(){document.write('teste');},2000)
				  		*A LETRA O DO TIME OUT, É MINUSCULA MESMO*



				  						SET INTERVAL

				  	RECEBE DOIS PARAMETROS, UMA FUNCAO CALLBACK, E O TEMPO DE
				  	EXECUÇÃO EM MILISSEGUNDOS.
				  	EXECUTA UMA AÇÃO DE FORMA CONTINUA, TRANSCORRIDO O TEMPO
				  	INFORMADO NO METODO,(UMA VEZ QUE O TEMPO ACABA, FICA EXECU
				  		TANDO). ELE EXECUTA COM BASE NO TEMPO, ESPERA O TEMPO
				  	EXECUTA, ESPERA DE NOVO, EXECUTA, E ASSIM POR DIANTE.


				  		 setInterval(funcaoAnonima,tempoMilissegundos);

				  		 ASSIM:

				  	setInterval(function(){document.write('7 diassss')},2000);






				  				 CLEAR INTERVAL/ CLEAR TIME OUT


				  	PARA A EXECUÇÃO DO INTERVAL/TIME OUT. E BOM USAR CASO ALGUMA CONDICAO 
				  	SEJA ATINGIDA.

				  	PARA CONSEGUIR O RESULTADO, ATRIBUIMOS A FUNÇAO SET INTERVAL/TIME OUT
				  	A UMA VARIAVEL, E DEPOIS, NO PARAMETRO DA FUNCAO CLEAR INTERVAL
				  	CHAMAMOS A VARIAVEL.




				  				clearInterval(funcaoInterval)

				  				clearTimeout(funcaoTimeout)

							  	var x = setInterval(function(){
									document.write(i);
									i--;
									if(i===0){
										clearInterval(x);
									}
								},1000)


							  	O CLEAR TIME OUT PODE SER USADO, POR EXEMPLO
							  	EM CASOS QUE UMA ACAO DEVE SER TOMADA EM CERTO
							  	TEMPO, E SE NAO FOR, O CLEAR AGE, PARANDO A CONTAGEM
							  	E EXECUTANDO ALGUMA FUNCAO.



								  	ALGUMAS APLICAÇÕES:

								  	UM CRONOMETRO:


										var i=100;

										setInterval(function(){
											document.write(i);
											 i--;
											},1000);



									CONTANTO O TEMPO DO USUARIO NA PAGINA:

									var i=5;

									setInterval(function(){
										document.write(i);
										i--;
										if(i===0){
											window.location.reload();
										}
									},1000)

					    --------------- ECMA SCRIPT 6(2015)	----------------


					    			VAR, LET E CONST





					    					   VAR

					    DIZ RESPEITO A ESCOPO DE BLOCOS. VARIAVEIS GLOBAIS PODEM
					    SER USADAS EM BLOCOS E EM FUNÇÕS, VARIAVEIS CRIADAS EM
					    FUNCOES SO PODEM SER USADAS DENTRO DAS FUNCOES. VARIAVEIS
					    CRIADAS EM BLOCOS DENTRO DE FUNCOES PODEM SER USADAS TAMBEM
					    NA FUNÇÃO, SOFREM HOISTING PARA A FUNCAO. (HOISTING É A PROPRIEDADE
					   	EM JS, QUE MOVE AS DECLARAÇÕES DE VARIAVEIS PARA O TOPO DO SCRIPT
					   	ATUAL, OU SEJA, UM NIVEL A CIMA DO NIVEL DE ESCOPO ATUAL).

					   	TUDO QUE SE CRIA NA FUNCAO, FICA NA FUNCAO E EM SEUS BLOCOS INTERNOS

					   	VARIAVEIS FEITAS EM BLOCOS DENTRO DE FUNCAO, SOFREM HOISTING PARA A 
					   	FUNÇÃO.

					   	VARIAVEIS CRIADAS EM BLOCOS SOZINHOS SOFREM HOISTING PARA O NIVEL
					   	GLOBAL.


					   	**SOMENTE ESCOPOS DE BLOCO SOFREM HOISTING, (IFS POR EXEMPLO),
					   	BLOCOS DO TIPO FUNCAO, SÃO CHAMADOS ESCOPO DE FUNCAO E NÃO
					   	FAZEM HOISTING**



					   	** SE EXISTEM DUAS VARIAVEIS DE MESMO NOME, E NO NIVEL GLOBAL
					   	ELA TEM UM VALOR, E NUM ESCOPO DE BLOCO A VARIAVEL QUE TEM 
					   	O MESMO NOME DA GLOBAL É ATRIBUIDA A UM OUTRO VALOR, JÁ QUE
					   	A VARIAVEL NO ESCOPO DE BLOCO SOFRE HOISTING PARA O NIVEL ACIMA
					   	ENTÃO ELA IRÁ PARA O NIVEL GLOBAL E CONFLITARÁ COM A ANTERIOR
					   	SOBRESCREVENDO ELA(JA QUE O NOME ERA O MESMO)**


													LET

						DECLARANDO UMA VARIAVEL COM A PALAVRA RESERVADA LET, A VARIAVEL
						FICA RESTRITA AO SEU CORPO, E NÃO FAZ HOISTING PARA UM NIVEL 
						SUPERIOR. NESSE CASO, ELA PERTENCE APENAS A SEU PROPRIO ESCOPO.


						NO MODELO LET, AS VARIAVEIS DENTRO DE BLOCO, SÃO CRIADAS, USADAS
						E DEPOIS SE DESTROEM NA SAIDA DO BLOCO.

						EVITA A SOBREPOSIÇÃO DE VARIAVEIS QUE VENHAM A TER O MESMO NOME.


						** LET NO ESCOPO GLOBAL, CONTINUA GLOBAL, EM ESCOPO DE BLOCO,
						NAO SOFRE HOISTING,EM FUNCAO, SO FICA DISPONIVEL NELA MESMA
						E EM SEUS BLOCOS,  E EM BLOCOS DENTRO DE FUNCAO, NAO SOFREM
						HOISTING PARA A FUNCAO.**

						VAR PROVAVELMENTE SERÁ DESCONTINUADO, VAR É MAIS RECOMENDADO.



									CONST 


					PALAVRA RESERVADA QUE DEFINE QUE UMA VARIAVEL NAO MUDA DE 
					VALOR AO LONGO DA EXECUÇÃO DO CODIGO, CONSTANTE.


					** BOA PRATICA PARA DECLARAÇÃO DE CONSTANTES É ESCREVE-LAS
					EM MAIUSCULO **

					A ATRIBUIÇÃO DO VALOR PRECISA SER FEITA NA HORA DA DECLARAÇÃO.

					** SÃO DE SOMENTE LEITURA E NÃO SOFREM HOISTING**





					---------------- TEMPLATE STRING/ INTERPOLAÇÃO --------------


					VEM PARA DAR UM NOVO JEITO DE CONCATENAR STRINGS COM RESULTADOS
					DE OPERAÇÕES, VARIÁVEIS, E OUTRAS STRINGS DENTRO DE VARIAVEIS.

					PARA ISSO, AO ESCREVER POR EXEMPLO UMA MENSAGEM EM UM CONSOLE.LOG
					AO INVES DE FAZER: console.log('Oi '+nome+ 'tudo bem?');

					UTILIZAMOS AS CRAZES OU BACKTICKS (``)[SHIFT+ACENTO] E ENTRE ELAS COLOCAMOS
					A STRING QUE QUEREMOS CONCATENAR COM VARIAVEIS, PARA ISSO, NÃO
					USAMOS MAIS O SINAL DE MAIS, MAS : ${var} DENTRO DAS CRAZES.
					O CONTEUDO DEPOIS DO SIMBOLO DE DOLAR E ENTRE AS CHAVES, É ALGO
					QUE SERÁ PROCESSADO, E CONFORME A LOGICA SERÁ RETORNADO DENTRO DA
					MENSAGEM, EX:

					console.log(`Olá ${nome} tudo bem?`)

					**AO CONTRARIO DO SISTEMA DE CONCATENAÇÃO, PODE USAR QUEBRA DE LINHA
					SO APERTANDO ENTER**

					PODE TAMBEM LEVAR CALCULOS, FUNCOES E PROCESSAMENTOS:

					console.log(`7+7 = ${7+7}`);

					 	function calcular(x,y){
				          return x*y
				        }

				        console.log(`A multiplicação de 8 x 8 é igual a ${calcular(8,8)}`);



				        DÁ PRA REPETIR EM VARIAS PARTES DO CODIGO

				        console.log(`Olá ${nome}, tudo bem? ${idade} anos`);

					___________________[FUNCOES PARA STRING]___________________

					UPPERCASE

					let string1= "Abobrinha";
					string1 = string1.toUpperCase()


					LOWERCASE
					let string1= "Abobrinha";
					string1 = string1.toLowerCase()

					RETIRAR ESPAÇOS DO COMEÇO E FIM DA STRING
					string1.trim();

					RETORNAR UMA STRING DENTRO DE UMA STRING(RETORNA UMA STRING DO INDEX TAL A TAL)
					let str = "Hello World!";
					str = str.substring(1, 4)
					//ell

					SABER SE COMEÇA COM TAL STRING
					var str = "Hello world, welcome to the universe.";
					var n = str.startsWith("Hello");

				 ----------------- PARAMETROS DEFAULT EM FUNÇÃO -------------------

				 UTIL PARA CONTORNAR PROBLEMAS NO QUAL OS PARAMETROS NÃO SÃO PASSADOS
				 PARA A FUNÇÃO, E ACONTECE UM ERRO INTERNO. SETAMOS PARAMETROS PADRÃO
				 PARA, NO CASO DE OS PARAMETROS CORRETOS SE PERDEREM, A FUNÇÃO NÃO
				 PARAR PELA FALTA DELES.

				 PARA ISSO, USAMOS O OPERADOR DE ATRIBUIÇÃO, PARA ATRIBUIR AO PARAMETRO
				 NA FUNÇÃO CONSTRUIDA(COM O NOME FUNCTION E TAL,NA DECLARAÇÃO, NAO NA 
				 	CHAMADA.) UM VALOR, QUE CASO O PARAMETRO NÃO SEJA CORRETAMENTE PASSADO
				 NA CHAMADA DA FUNÇÃO, SERÁ EXIBIDO COMO DEFAULT.

				 ASSIM:


				 function foo(personagem = 'Doggo'){
				 	document.write(`O ${personagem} é muito fofo`)
				 }
				 foo(); // NÃO PASSOU O PARAMETRO REFERENTE AO PERSONAGEM
						// MAS NAO DARA ERRO POR CAUSA DO DEFAULT, O RESULTADO É;

						// O Doggo é muito fofo



				EX:

	function contarHistoria(personagem = 'doggo', atividade = 'ossinhos' ,dono ='João',anos=2 ){
	    document.write(`Era uma vez um cachorro chamado ${personagem}, ele adorava ${atividade},
	    	seu dono era o ${dono}, e eles viveram felizes para sempre. ${personagem} tinha ${anos}
	    	 anos`);
	}
	contarHistoria(); 	


			SE EU COLOCAR ALGUNS PARAMETROS, E OUTROS NÃO, OS PARAMETROS QUE EU MANDEI
			SERÃO USADOS, E PARA OS QUE EU NAO MANDEI, O QUE VALE É O DEFAULT SETADO.


			EU POSSO TAMBEM QUERER MANDAR DETERMINADOS PARAMETROS E OUTROS NÃO, MAS COMO,
			SE A ORDEM QUE EU PASSO OS PARAMETROS INTERFERE? SIMPLES, OS PARAMETROS
			QUE VOCE NAO QUER PASSAR, QUE ANTECEDEREM OS QUE VOCE QUER PASSAR, É SÓ SETAR
			COMO UNDEFINED. O JS TEM A INTELIGENCIA PARA ENTENDER QUE ELE, A PARTIR DISSO 
			DEVE UTILIZAR O DEFAULT.


			ASSIM:

function contarHistoria(personagem = 'doggo', atividade = 'ossinhos' ,dono ='João',anos=2 ){
    document.write(`Era uma vez um cachorro chamado ${personagem}, ele adorava ${atividade}, 
    	seu dono era o ${dono}, e eles viveram felizes para sempre. ${personagem} tinha ${anos} 
    	anos`);
	}
  ->> *contarHistoria(undefined, undefined, 'Pedro', undefined); 

  //Era uma vez um cachorro chamado doggo, ele adorava ossinhos,
  //seu dono era o Pedro, e eles viveram felizes para sempre. 
  //doggo tinha 2 anos



  			----------------- ARROW FUNCTION ---------------------


  			UMA NOVA FORMA DE ESCREVER FUNCOES ANONIMAS, GERALMENTE
  			ESCREVERIAMOS ASSIM:

  			let quadrado = function (x){
  				document.write(x);
  			}
		    

		    USANDO ARRAY FUNCTION FICA MAIS FÁCIL ESCREVER ESSE TIPO
		    DE FUNÇÃO. DESSE MODO, A PALAVRA FUNCTION SAI, E DEPOIS 
		    DO PARENTESE DO PARAMETRO, VAI : =>

		    ASSIM:

		    let quadrado = (x) =>{
		    	document.write(x);
		    }


		    SE A FUNCAO ESTIVER RECEBENDO UM UNICO PARAMETRO, PODE-SE
		    OCULTAR OS PARENTESES.

		    let quadrado = x =>{
		    	//logica
		    }

		    NO CASO DE NAO RECEBER PARAMETRO ALGUM, SO ABRE E FECHA
		    PARENTESES.

		    NESSE CASO COMO NÃO HA LOGICA NESSA FUNCAO, SO O RECEBIMENTO
		    DE UM VALOR E O RETORNO DA MULTIPLICAÇÃO DELE, PODE-SE
		    OMITIR AS CHAVES, E O RETORNO. SE CHAMA RETORNO IMPLICITO.

		    let quadrado = x => x*x;

		    SEMPRE QUE A LOGICA FOR SOMENTE UMA LINHA DE CODIGO, 
		    DÁ PRA USAR RETORNO IMPLICITO


		    [Segundo a documentação]:


		    COM PARÂMETROS E LOGICA INTERNA
		    (param1, param2, …, paramN) => { statements } 

		    COM PARAMETROS E UMA LINHA DE LOGICA

			(param1, param2, …, paramN) => { return expression; }
			
			[OU]

			(param1, param2, …, paramN) => expression;

			param1 => expression;

			[QUANDO HÁ SÓ UMA EXPRESSÃO, DIGAMOS O RETORNO DE UMA LINHA, NÃO
			PRECISA DA PALAVRA RETURN E NEM DAS CHAVES, BASICAMENTE, É RETORNO
			IMPLÍCITO.]


			QUANDO HÁ UM PARÂMETRO OS PARENTESES SÃO OPCIONAIS
			(singleParam) => { statements }
			singleParam => { statements }


			QUANDO NÃO HÁ PARÂMETROS:

			() => { statements }

			ARROW FUNCTION DE UM PARAMETRO RETORNANDO UM OBJETO LITERAL
			params => ({foo: bar})

			

		    ---------------------- ORIENTACAO A OBJETOS -------------------


		    NO JAVASCRIPT, PODE-SE UTILIZAR O PARADIGMA DE ORIENTAÇÃO A 
		    OBJETOS, E TAMBEM O PROCEDURAL, TENDO BLOCOS DE CODIGO INTERCALANDO
		    ENTRE OS DOIS.


		    PROCEDURAL/ESTRUTURADO/IMPERATIVO : FUNCIONAL, LOGICO.
		    OO : CONCORRENTE, REATIVO.



		    PILARES DA OO:

		    ENCAPSULAMENTO, HERANÇA, ABSTRAÇÃO, POLIMORFISMO.





		    ABSTRAÇÃO:

		    ABSTRAÇÕES DO MUNDO REAL, ONDE TRAZEMOS ELA PARA O SISTEMA.

		    PARA COMPREENDER A ABSTRAÇÃO, É BOM LEMBRARMOS DOS SEGUINTES ASPECTOS:

		    ENTIDADE: COMPREENSAO DE QUE UM OBJETO DO MUNDO REAL PASSA PRA DENTRO DA APP.
		    CRIAR UM MODELO QUE REPRESENTE ESSA ENTIDADE, UM MOLDE.

		    IDENTIDADE: OBJETO FEITO A PARTIR DO MOLDE(ENTIDADE), COM UMA IDENTIFICAÇÃO UNICA.

		    CARACTERISTICAS: OU ATRIBUTOS, AS CARACTERISTICAS DE UM OBJETO.

		    AÇÕES: MÉTODOS, AS AÇÕES QUE AQUELE OBJETO EXECUTA






		    A CLASSE.

		    AO CONTRARIO DE JAVA, ONDE O CONSTRUTOR LEVA O MESMO NOME DA CLASSE
		    O CONSTRUTOR LEVA O NOME DE:

		    constructor(){
		    	this.agencia =1075
		    	this.numeroConta=8351125

		    }

		    O OPERADOR THIS FAZ REFERENCIA A A VARIAVEL ENCAPSULADA

		*** DENTRO DE UMA CLASSE, OS METODOS(FUNCOES), NAO LEVAM A PALAVRA RESERVADA
		FUNCTION MAS NO ECMA5 SE USAVA PROTOTYPE ***

		**EM JS VOCE SO DECLARA AS VARIAVEIS FORA DO CONSTRUTOR SE QUISER, SENAO
		BASTA DECLARAR ELAS COM A PALAVRA .this NO COMEÇO.**


		**DA PRA DAR UM CONSOLE DOS OBJETOS, MOSTRA AS CARACTERISTICAS DELE **



		** É POSSIVEL COLOCAR UM OBJETO NUM ARRAY AO MESMO TEMPO EM QUE ELE É CRIADO: **

		cadeiras.push(new Cadeira(4,true,'red'));


		**TAMBEM DA PRA EXECUTAR UM METODO DE UM OBJETO DENTRO DE UM ARRAY:**

			cadeiras[0].giraCadeira();


		** A CLASSE EM SI NAO LEVA PARAMETRO NEM PARENTESE, SO OS METODOS CONTRUTORES
		E OS INTERNOS. **


		** PARA CHAMAR MÉTODOS DE UM OBJETO, FAZEMOS: **

		objeto.metodoDoObjeto(parametro1,parametro2);



		** PARA CHAMAR ATRIBUTOS , FAZEMOS: **

		objeto.atributoObjeto;




			----------------------- ENCAPSULAMENTO ------------------------

					    
		METODOS PRIVADOS SÓ SAO ACESSIVEIS PELO PROPRIO OBJETO, NÃO PELA APLICAÇÃO.

						NÃO SUPORTADO AINDA PELO ECMASCRIPT 6
				  PROGRAMAMOS UTILIZANDO ENCAPSULAMENTO POR CONVENÇÃO.


		A CONVENÇAO UTILIZADA ATÉ O JS SUPORTAR ENCAPSULAMENTO É COLOCAR ANTES DOS
		NOMES DOS ATRIBUTOS O CARACTERE _, ASSIM:

		this._atributo

		E ENTÃO, FAZER UM GET E UM SET SEM O UNDERLINE. ASSIM, AO INTERPRETAR O CODIGO
		O JS VAI PROCURAR PELO NOME, E VAI ACHAR QUE O QUE TEM ESSE NOME É UM MÉTODO
		GETTER/SETTER.

		OU SEJA, COLOCAMOS O UNDERLINE NO ATRIBUTO, E ENTÃO, CRIAMOS UMA FUNCAO SEM
		UNDERLINE NA QUAL ELE RETORNA AQUELE ATRIBUTO, COM O THIS E O UNDERLINE.

		GETTERS LEVAM A PALAVRA RESERVADA get EM SEGUIDA O NOME DA FUNCAO

		SETTERS LEVAM A PALAVRA RESERVADA set EM SEGUIDA O NOME DA FUNCAO

		ASSIM:

		class Tv{
          constructor(){
            this._canais = Array(2,4,5,7,10);
            this._canalAtivo = 5;
            this._volume = 5;
          }

          get canal(){
            return this._canalAtivo;
          }
         }

         let tv = new Tv();
         console.log(tv.canal);// NAO ACESSA O ATRIBUTO, ACESSA O GETTER COM ESTE NOME);


         ****** MÉTODOS GETTERS NA CHAMADA DA FUNCAO NAO LEVAM () NEM PARAMETROS, GETTERS
         DÃO O RETORNO DA VARIAVEL******


         	MÉTODO SET

        NOS METODOS SETTERS FAZEMOS O MESMO QUE COM OS GETTERS, MAS, LEVAM UM PARAMETRO QUE
        DITA O VALOR QUE ELE VAI RECEBER(ISSO DENTRO DA CLASSE), E DIZEM QUE O ATRIBUTO DA CLASSE
        TERÁ A ELE ATRIBUIDO O VALOR DO PARAMETRO PASSADO, ASSIM:

        set canal(canal){
            this._canalAtivo= canal;
         }

         E NA HORA DE CHAMAR O SETTER FAZEMOS:

         let tv = new Tv();
         tv.canal = 8;



         ******* ESSES MEIOS NAO IMPEDEM QUE ELES SEJAM ACESSADOS, MAS INDICAM
         PARA O PROGRAMADOR QUE A CONVENÇÃO ESTA ALI E VOCE PRECISA USAR GETTERS E SETTERS******


        [PARA CHAMAR DENTRO DE UM MÉTODO, UM METODO DO PROPRIO OBJETO, ANTES USAMOS O THIS.]

        EX:

        gravar(d){
			//window.localStorage.setItem('despesa',JSON.stringify(d));
			this.getProxID();
		}

		O CONSTRUCTOR DA CLASSE:

		O CONSTRUTOR DA CLASSE NÃO PRECISA LEVAR SOMENTE OS ATRIBUTOS DA CLASSE, MAS TAMBÉM PODE SER PROVIDO
		DE LÓGICA, COMO FUNÇÕES QUE PODEM SER EXECUTADAS NA EXECUÇÃO DO OBJETO assim:



        		________________________ HERANÇA _____________________________


        		ASSIM COMO EM JAVA, TEMOS O CONCEITO DE HERANÇA.

        		UMA CLASSE FILHA(SUBCLASSE OU GENERALIZAÇÃO) HERDA DE UMA CLASSE PAI
        		(SUPER CLASSE, ESPECIFICAÇÃO). É UTIL PARA QUANDO TEMOS CLASSES COM
        		ATRIBUTOS E MÉTODOS EM COMUM, PODEMOS CRIAR UMA SUPERCLASSE QUE CONTENHA
        		TODOS OS MÉTODOS E ATRIBUTOS COMUM AS SUBCLASSES, DE MODO QUE AS SUBCLASSES
        		ACESSEM ESSES ATRIBUTOS E MÉTODOS DA SUPERCLASSE, E SO TENHAM SEUS METODOS
        		PROPRIOS, O RESTO ELE HERDA DA SUPER. ISSO ECONOMIZA LINHAS DE CODIGO, E 
        		MELHORA O APROVEITAMENTO, E A MANUTENÇÃO.


        		PARA FAZER UMA CLASSE HERDAR DA OUTRA, UTILIZAMOS NAS SUBCLASSES, DEPOIS DO
        		NOME DA CLASSE, A PALAVRA extends E EM SEGUIDA A CLASSE DA QUAL ELE VAI HERDAR
        		(PAI)

        		DEPOIS, PARA CHAMAR A CLASSE PAI NA CLASSE FILHA, INDICANDO AO CONSTRUTOR
        		DA CLASSE FILHA QUE ELE DEVE HERDAR ELEMENTOS DA CLASSE PAI, UTILIZAMOS
        		O MÉTODO:

        		super(); /*ESSE COMANDO CHAMA A CLASSE PAI IMEDIATA, O PAI MAIS PRÓXIMO.*/

        		ELE VAI ANTES DO COMEÇO DOS ATRIBUTOS ESPECIFICOS DA SUBCLASSE, DENTRO DO
        		CONSTRUCTOR.

        		ASSIM, A CLASSE FILHA TEM DIREITO A HERDAR OS ATRIBUTOS E MÉTODOS DA
        		CLASSE PAI.



        		** /*SE UMA FILHA HERDA DE UM PAI, A FILHA DA FILHA, TAMBEM HERDA DA PRIMEIRA
        		CLASSE PAI, OU NO CASO CLASSE AVÔ. ISSO SE CHAMA EFEITO CASCATA, UM HERDA DE
        		OUTRO, QUE HERDA DESTE ULTIMO, BASTA CHAMAR O METODO OU ATRIBUTO DA PRIMEIRA
        		CLASSE.*/**




        		OPERADOR SUPER:


        		super();

        		FORNECE A CLASSE FILHA, O ACESSO AO CONSTRUTOR DA CLASSE PAI.
        		DEVE VIR ANTES DE QUALQUER OPERADOR THIS DA CLASSE FILHA.
        		PODEMOS OU NAO PASSAR PARAMETROS PARA O SUPER.


        		POSSO PASSAR PARAMETROS PARA O CONSTRUTOR DA CLASSE PAI, NA CLASSE
        		FILHA, AO USAR O SUPER. 
        		ISSO PREENCHE AS VARIAVEIS DA CLASSE PAI E AS REPLICA NA CLASSE FILHA

        		  class Passaro extends Animal{
			        constructor(bico){
			          super();
			          this._bico=bico;
			        }

			        voar(){
			          console.log('Voando, pruu');
			        }
			       }

			       class Papagaio extends Passaro{
			        constructor(falar){
			          super('Médio');
			          this._sabeFalar=falar;
			        }
			        falar(){
			          console.log('pruuuu arrombadooo');
			        }
			     }


        		PARA PASSAR PARAMETROS PARA UM CONSTRUTOR DE UMA CLASSE, AO CHAMAR
        		O CONSTRUTOR NA CRIAÇÃO DO OBJETO, PASSAMOS O PARAMETRO IGUAL A UMA
        		FUNÇÃO, E DEPOIS DENTRO DA CLASSE, NO CONSTRUCTOR, SINALIZAMOS PARAMETROS
        		NO CONSTRUTOR, E IGUALAMOS O PARAMETRO RECEBIDO A UMA VARIAVEL, PARA GUARDAR
        		O VALOR DO PARAMETRO NA VARIAVEL DO CONSTRUTOR DA CLASSE:


        		 class Papagaio extends Passaro{
			        constructor(falar){
			          super();
			          this._sabeFalar=falar;
			        }
			        falar(){
			        	if(this._sabeFalar)
			          		console.log('pruuuu arrombadooo');
			        }
			       }


			       let passaro = new Passaro(true);
			       console.log(passaro);




			    __________________ POLIMORFISMO ___________________



	BASICAMENTE, DIZ RESPEITO A SOBRESCRITA DE METODOS, ESPECIFICAMENTE NO OBJETO FILHO.
	DESTE MODO, A CLASSE FILHA PODE TER UM METODO DE MESMO NOME QUE O DE SUA CLASSE PAI, 
	MAS O QUE SERÁ EXECUTADO SERÁ O DA FILHA, POR PRECEDENCIA. CASO ESTE MÉTODO NAO EXISTA
	NA CLASSE FILHA, AI SIM, A EXECUÇÃO SOBE E BUSCA O MÉTODO NA CLASSE PAI.

	EX:

	class Passaro extends Animal{
        constructor(bico,cor,tamanho,peso){
          super(cor,tamanho,peso);
          this._bico=bico;
        }

        voar(){
          console.log('Voando, pruu');
        }
     }

     passaro.voar() /*// USA O SEU PROPRIO METODO, POIS É SUA CLASSE;*/


       class Papagaio extends Passaro{
        constructor(bico,falar,cor,tamanho,peso){
          super(bico,cor,tamanho,peso);
          this._sabeFalar=falar;
        }
        falar(){
          console.log('pruuuu arrombadooo');
        }
       }


       papagaio.voar()/* // USA O MÉTODO VOAR DA CLASSE PASSARO, QUE É SUA CLASSE PAI
       POIS, NÃO POSSUI O METODO VOAR. DURANTE A EXECUÇAO AO VER QUE É UMA CLASSE 
       FILHA, E O MÉTODO NÃO FOI ENCONTRADO NELA, O JS PROCURA NA CLASSE PAI MAIS 
       PROXIMA, E SOBE ATÉ ACHAR.*/




       class Avestruz extends Passaro{
        constructor(bico,falar,cor,tamanho,peso){
          super(bico,falar,cor,tamanho,peso);
        }
        enterrarCabeca(){
          console.log('Enterrar cabeça'); 
        }
        voar(){
          console.log('Não sei voar');
        }
       }


       avestruz.voar()/*// USA O PROPRIO MÉTODO DA CLASSE AVESTRUZ, QUE SOBRESCREVE O MÉTODO
       VOAR DA CLASSE PASSARO(FILHA DE PASSARO ASSIM COMO PAPAGAIO), SUA CLASSE PAI. COMO
       ELE TEM SEU PROPRIO METODO VOAR, DURANTE A EXECUÇÃO, O METODO É ENCONTRADO NA PROPRIA
       CLASSE, ENTÃO, A EXECUÇÃO NÃO SOBE.*/



       NESTE EXEMPLO, UM PASSARO QUALQUER VOA, ASSIM COMO UM PAPAGAIO, POIS, POR NÃO SOBRESCREVER
       O MÉTODO VOAR EXISTENTE NA CLASSE PASSARO,COMO ELAS EXTENDS AS CLASSES PAIS, SEMPRE HERDARÃO
       ESSE MÉTODO DA CLASSE PÁSSARO. MAS, COMO A CLASSE AVESTRUZ CONTÉM SEU PRÓPRIO MÉTODO VOAR
       DURANTE A EXECUÇÃO, A PREFERENCIA É DADA A FUNCAO DA CLASSE FILHA. SE A CLASSE AVESTRUZ
       NÃO CONTIVESSE O METODO VOAR, ESSA FUNCAO SERIA BUSCADA NA CLASSE PAI, MAS COMO ELA O TEM, A
       EXECUÇÃO NAO SOBE PARA A CLASSE PAI.



     ______________________________ OBJETOS LITERAIS/ESTATICOS __________________________________

     UM OBJETO DESCRITO DENTRO DO CODIGO.
     COMO SE VOCE NAO PRECISASSE CRIAR UMA CLASSE E DEPOIS INSTANCIAR UM OBJETO, PARA TER, DE FATO
     UM OBJETO.



          ******** É UM OBJETO FORMADO SEM A NECESSIDADE DE CONSTRUÇÃO DE UMA CLASSE. ********
          			COMO SE VOCE CONSTRUISSE O CONSTRUTOR DO OBJETO ALI, NA HORA.


     FORMADO POR PARES DE OBJETO CHAVE/NOME/ATRIBUTO - VALOR

     SE CRIA UMA VARIAVEL PARA GUARDAR TUDO ISSO, E SE ATRIBUI A UMA CHAVE, E DENTRO DESSA CHAVE
     VAI TODO O CONTEUDO DO OBJETO, SE DITA A VARIAVEL, E O VALOR DELA, CADA UMA DELAS SEPARADAS
     POR SUAS RESPECTIVAS VIRGULAS. AS FUNCOES(QUE NAS CLASSES SERIAM OS METODOS), SÃO FUNCOES
     ANONIMAS ATRIBUIDAS A UMA VARIAVEL.

     ASSIM:

     MODO DE ESCRITA NO ES5

     let produto = {
     	descricao : 'Geladeira',
     	preco : 2000,
     	verDescricao : function(){
     		console.log(`O produto é ${this.geladeira}, de preço ${preco}`);
     	}
     };

    /* É NECESSARIO USAR O THIS PARA SE REFERIR AS VARIAVEIS INTERNAS. 

   	   NÃO SE USA O OPERADOR = PARA ATRIBUIÇÃO E SIM O :
	*/
	
	MUITO USADO EM FORMULARIOS, NO QUAL NÃO SE TEM NECESSIDADE DE CRIAR UMA CLASSE PARA APENAS
	UM FORMULARIO.




				************************************************************************

				EXEMPLO COM UMA CLASSE COMUM:

				class Produto{
					constructor(descricao,preco){
						this.descricao =  descricao;
						this.preco = preco;
					}
					verDescricao(){
						console.log(`${descricao} por apenas ${preco} reais.`);
					}
				}

				let produto = new Produto('Geladeira',2500);

				/*---------------------------------------------------------*/


				EXEMPLO COM UMA CLASSE LITERAL:


				let produto = {
					descricao: 'Geladeira',
					preco: 2500,
					verDescricao: function(){
						console.log(`Produto ${this.descricao} por apenas ${this.preco} reais`);
					}
				}



							MELHORIAS DO OBJETO LITERAL NO ES6



		primeira melhoria

		NO CASO  DAS VARIAVEIS INTERNAS DO OBJETO LITERAL, O JS TEM A INTELIGENCIA DE SABER QUE
		MESMO AS VARIAVEIS INTERNAS TENDO O MESMO NOME DAS VARIAVEIS EXTERNAS AS QUAIS QUEREMOS
		ATRIBUIR AS INTERNAS, É A INTERNA QUE RECEBE A EXTERNA, EVITANDO QUE ACONTECESSE ALGO 
		ASSIM :

		let nome = 'Jorge'

		let produto = {
			nome: nome;//jorge = jorge
		}


		EM OBJETOS LITERAIS PODEMOS TANTO ATRIBUIR UM VALOR FIXO A UMA VARIAVEL, E PODEMOS TAMBEM
		ATRIBUIR ESSA VARIAVEL DO OBJETO A UMA OUTRA VARIAVEL, FORA DO OBJETO, UM PARAMETRO QUE
		TENHA SIDO PASSADO, POR EXEMPLO. NO ECMA SCRIPT 6, SE A VARIAVEL INTERNA TEM O MESMO NOME
		DA EXTERNA, VOCE NAO PRECISA ATRIBUIR UMA A OUTRA, DENTRO DO OBJETO, PODE SOMENTE, COLOCAR
		O NOME DA VARIAVEL EXTERNA. O JS TEM A INTELIGENCIA DE SABER QUE O NOME DA VARIAVEL É AQUELE
		CITADO, E O VALOR DA VARIÁVEL É O CONTIDO ALI.


		ASSIM :

		let objeto2 = {
        nome,
        sexo,
        idade, 
        profissao,
        exibirResumo(){
          console.log(`${this.nome}, ${this.idade}, anos, sexo ${this.sexo}, ${this.profissao} `);
        }
       };
       console.log(objeto2);



       segunda melhoria


       A SEGUNDA MELHORIA DIZ RESPEITO AS FUNCOES DENTRO DO OBJETO.

       NESSA MELHORIA, NÃO PRECISAMOS UTILIZAR MAIS A PALAVRA RESERVADA function, SOMENTE DAMOS
       UM NOME A FUNCAO( COM PARENTESES ) E ESCREVEMOS NELA O QUE QUEREMOS QUE ELA EXECUTE.


       **DÁ PRA COLOCAR UM OBJETO LITERAL DENTRO DE UM OBJETO LITERAL**


       let produto = {
	      descricao: 'Notebook',
	      preco :2000,
	      detalhes : {
	        fabricante :'Abc',
	        modelo: 'XyZ'
	      }
	    };


	    ISSO SE CHAMA COMPOSIÇÃO.

	    QUANDO CRIAMOS OBJETOS A PARTIR DE OBJETOS LITERAIS, FUNCOES
	    CONSTRUTORAS, OU CLASSES, TEMOS UMA COMPOSIÇÃO * É UM * (É ALGUMA COISA).

	    JÁ QUANDO TEMOS A ATRIBUIÇÃO DE UM OBJETO COMO SENDO O VALOR DE UM ATRIBUTO
	    DE OUTRO OBJETO, TEMOS A COMPOSIÇÃO *TEM UM* (TEM UM ALGUMA COISA[DEFINA COISA
	    	COMO: OBJETO]).

      _______ PARA MUDAR O VALOR DE UM OBJETO __________


       PARA ATRIBUIR UM VALOR A UM ATRIBUTO DE UM OBJETO, JÁ CRIADO, ACESSAMOS, A PARTIR DO OBJETO
       O SEU ATRIBUTO QUE QUEREMOS MUDAR, UTILIZANDO O PONTO, E ATRIBUIMOS O VALOR DESEJADO USANDO O 
       OPERADOR = 
       ASSIM:

       objeto.atributo='string' , objeto.atributo=valor;


       ***** MAS PARA ISSO, AS VARIÁVEIS INTERNAS AO OBJETO DEVEM ESTAR INICIALIZADAS COM ALGO
       ENTÃO SE NÃO QUISER MODIFICAR NO HARD CODE, INICIALIZE COM NULL.
        *****

       ASSIM:



       SOBRE A ATRIBUIÇÃO DUPLICADA A OBJETOS LITERAIS.

       SE CRIAMOS UMA UMA VARIAVEL DE NOME X, ATRIBUIMOS A ELA UM OBJETO LITERAL QUALQUER, E LOGO
       DEPOIS, ATRIBUIMOS A VARIAVEL CRIADA QUE RECEBE A REFERENCIA DO OBJETO A UMA OUTRA VARIAVEL Y
       ESSA VARIÁVEL NÃO CONTERÁ UMA CÓPIA DAQUELE OBJETO, E SIM, UMA REFERENCIA AO MESMO OBJETO.

       DESTE MODO, PODEMOS ACESSAR O OBJETO UTILIZANDO A VARIAVEL X, MAS TAMBEM A VARIÁVEL Y

       ***COMO SE AMBAS VARIAVEIS APONTASSEM PARA O MESMO OBJETO.***


       AO FAZER ISSO A SEGUNDA VARIAVEL ESTÁ PEGANDO A REFERENCIA PARA O OBJETO, E NÃO O OBJETO DE FATO
       POIS, AO PEGAR A REFERENCIA PARA O OBJETO, ELE RECEBE A ATRIBUIÇÃO AO OBJETO CRIADO(REFERENCIA)
       E NÃO AO OBJETO DE FATO, O QUE CRIARIA UMA CÓPIA.

       			EX:


			    let assinatura = {
			      idCliente: 1000,
			      descricao: 'Acesso á internet',
			      status(){
			        console.log('Ativo');
			      }

			    };/* // atribuição da variavel ao objeto*/

			    console.log(assinatura.descricao+'x'); /*// chamada do atributo descrição do objeto*/

			    let y = assinatura /*/ a variavel assinatura contem a referencia para o objeto,
			    					// atribuimos a y essa variavel(o objeto)*/

			    console.log(y.descricao+'y'); /*// como y aponta para o mesmo objeto que a variavel 
			    								//assinatura, podemos por ele, tambem acessar atributos
			    								//desse objeto
			    */

			     y.descricao ='Internet + tv + telefone'; /*//utilizamos y para alterar a descrição, como
			     										// ele contem a referencia para o objeto, ele 
			     										//altera diretamente o objeto cuja referencia contem
*/

			    console.log(assinatura.descricao); /*// 'Internet + tv + telefone'*/
			    console.log(y.descricao); /*//'Internet + tv + telefone'*/

			    /*// O TEXTO É O MESMO POIS, NÃO IMPORTA A VARIAVEL QUE ALTERE O ATRIBUTO, AMBAS
			    // APONTAM PARA O MESMO OBJETO, PORTANTO IRÃO EXIBIR O TEXTO CONTIDO NA VARIAVEL
			    // PARA QUAL APONTAM, QUE É O MESMO.*/



			------------------------ [FUNCOES CONSTRUTORAS]------------------------
			SÃO FUNCOES QUE SIMULAM A CONSTRUÇÃO DE OBJETOS. 

			FUNCOES CONSTRUTORAS LEVAM POR CONVENÇÃO, LETRAS MAIUSCULAS, POIS FUNCIONAM
			QUASE COMO CLASSES, ENTÃO PARA SINALIZAR QUE É UMA FUNCAO CONSTRUTORA
			E NÃO UMA ANONIMA FAZEMOS ASSIM.


			DO MESMO MODO QUE CHAMAMOS O CONSTRUTOR DA CLASSE, CHAMAMOS O CONSTRUTOR DA 
			FUNÇÃO.
			EM FUNCOES CONSTRUTORAS NÃO UTILIZAMOS O constructor() POIS NAO SE TRATA DE
			UMA NOTAÇÃO BASEADA EM CLASSES.


			let Carro = function(){
				this.cor="Amarelo";
				this.velocidadeAtual=0;

				//metodos

				this.acelerar = function(){
					//logica
				}
		    };

		     let carro = new Carro();


		     **UTILIZAMOS O OPERADOR THIS PARA ATRIBUIR A VARIAVEL INTERNA Á AQUELA FUNCAO.
		     DENTRO DA FUNCAO CONSTRUTORA ATÉ MESMO OS METODOS LEVAM O OPERADOR THIS.
		     MESMO NA CHAMADA DE METODOS, SEJAM ELES COMUNS OU GETS, SE USA O THIS**

		     FUNCOES DENTRO DE FUNCOES CONSTRUTORAS(O QUE SERIAM OS METODOS NOS OBJETOS)
		     SE ESCREVEM ASSIM:

		     this.acelerar = function(){
		     	let velocidade = this.getVelocidadeAtual() +10;
		     	this.setVelocidadeAtual(velocidade);
		     	return velocidade;
		     }


		     A PARTIR DO OBJETO CRIADO PODEMOS ACESSAR OS ATRIBUTOS E METODOS NORMALMENTE

		     carro.acelerar();



			      this.getVelocidadeAtual = function(){
			        return this.velocidadeAtual;
			      }
			      this.setVelocidadeAtual = function(velocidadeAtual){
			        this.velocidadeAtual= velocidadeAtual;
			      }


		     OS MÉTODOS GET E SET DOS OBJETOS FEITOS NA BASE DE CLASSE, NAO LEVAM PARENTESE
		     VOCE SETA E GETA NO HARD CODE.
		     NAS FUNCOES CONSTRUTORAS VOCE GETA USANDO PARENTESE SEM PASSAR PARAMETRO, E
		     SETA PASSANDO UM PARAMETRO.


		     GETS LEVAM RETURN E SETS NÃO.


		     TODOS OS MÉTODOS, USAM FUNCAO, *** TODOS *** OS GETS, OS SETS, OS METODOS COMUNS
		     E ATÉ MESMO O PROPRIO GERADOR DO OBJETO.


		     this.metodo = function (){
		     	return this.atributo;
		     }

		     objeto.metodo();



		     _______________ ENCAPSULAMENTO EM FUNCAO CONSTRUTORA __________________

		     PARA ISSO CRIAMOS VARIAVEIS DO CONTEXTO DA FUNCAO. ESCOPO DE FUNCAO.

		     ONDE CRIARIAMOS UMA VARIAVEL DO OBJETO, USANDO O OPERADOR THIS, USAMOS
		     SOMENTE O VAR, E AO CHAMARMOS A VARIAVEL SIMPLESMENTE CHAMAMOS PELO NOME.

		     ASSIM, SOMENTE COM GETERS E SETERS CONSEGUIREMOS MODIFICAR ESSES VALORES.
		     COISAS DO TIPO objeto.atributo = valor; NÃO FUNCIONARÃO.



		     var velocidadeMaxima=180;

		     this.getVelocidadeMaxima = function(){
	            return velocidadeMaxima;
	          }
	          this.setVelocidadeMaxima = function (param){
	            velocidadeMaxima = param;
	          }


	          carro.setVelocidadeMaxima(200); // funciona
	          carro.velocidadeMaxima = 200; // nao funciona


	          MÉTODOS GET E SET AINDA LEVAM THIS, GETTERS E SETTERS ENCAPSULADOS NAO FUNCIONAM
	          (OBVIO, ELAS PODEM SER PUBLICAS, AS VARIAVEIS NAO.)


	          PODEMOS TAMBEM CRIAR FUNCOES DESTE MESMO MODO. CRIAMOS UMA VARIAVEL NO ESCOPO DA 
	          FUNÇÃO, E ATRIBUIMOS A UMA FUNCAO.
	          *** PORÉM NÃO DÁ PRA CHAMAR ELA DE FORA, ASSIM COMO AS VARIAVEIS COM VAR, AS FUNCOES
	          SÃO DO CONTEXTO DA FUNCAO CONSTRUTORA, ENTÃO DECLARANDO ELA COM VAR E NÃO THIS, A FUNCAO
	          SÓ É ACESSIVEL POR MÉTODOS QUE USAM THIS. OU SEJA, ESSAS FUNCOES ENCAPSULADAS COM VAR
	          SÓ PODEM SER CHAMADAS INTERNAMENTE. MÉTODOS GET E SET DEVEM SER FEITOS NA BASE DO THIS***




	          var setVelocidadeMaxima = function(param){
	          	velocidadeMaxima += param;
	          }


	          EX:

	          let Carro = function(){
		          this.cor="Amarelo";
		          this.modelo="Brasilia";
		          this.velocidadeAtual=0;
		          var velocidadeMaxima=180;
		          var quilometrosRodados=0;


		          this.acelerar = function(){
		            let velocidade = this.getVelocidadeAtual()+50;
		            if(velocidade > velocidadeMaxima){
		                velocidade= velocidadeMaxima;
		            }
		            this.setVelocidadeAtual(velocidade);
		             setKilometrosRodados(0.05);
		            console.log(quilometrosRodados);
		          }

		          this.getVelocidadeAtual = function(){
		            return this.velocidadeAtual;
		          }

		          this.setVelocidadeAtual = function(param){
		            this.velocidadeAtual = param;
		          }

		          this.getVelocidadeMaxima = function(){
		            return velocidadeMaxima;
		          }
		          this.setVelocidadeMaxima = function (param){
		            velocidadeMaxima = param;
		          }
		           var setKilometrosRodados = function(q) {
		            quilometrosRodados += q;
		           }
		     };

		     let carro = new Carro();
		     console.log(carro.getVelocidadeAtual());
		     carro.acelerar();
		     carro.setVelocidadeMaxima(200);



		     OS METODOS GET E SET PARA CONTINUAREM ENCAPSULADOS, RECEBEM A PALAVRA RESERVADA
		     VAR, ASSIM, ELA SE TORNA ESCOPO DA FUNCAO. 

		     UM MÉTODO ENCAPSULADO SÓ PODE SER USADO DENTRO DA PROPRIA FUNCAO, NAO FORA.

		     VAR SERVE PRA ISSO, TRANSFORMAR AS VARIAVEIS ALI DENTRO EM VARIAVEIS DE ESCOPO
		     DE FUNCAO. FAZENDO ISSO COM METODOS ELES TAMBEM SE TORNAM PRIVADOS E CHAMADOS
		     SOMENTE POR FUNCOES QUE LEVAM O THIS. AS QUE LEVAM THIS SÃO PUBLICAS E CHAMAVEIS
		     ATRAVEZ DO OBJETO.


		     		 _______________ [FUNCOES FACTORY] _______________

		     	PARA CRIAR UMA "FÁBRICA" DE OBJETOS EM TEMPO DE EXECUÇÃO.

		     	PODE USAR FUNCAO CONSTRUTORA, CLASSE OU OBJETO LITERAL.

		     	FUNCIONA BASICAMENTE JOGANDO UM OBJETO(AS VEZES LITERAL)
		     	DENTRO DE UMA FUNCAO ONDE O OBJETO É RETORNADO PELO RETURN


		     	ASSIM:


		     	let bicicletaFactory = function(param1. param2, param3){
		     		return {
		     			cor:param1,
				        marcha:param2,
				        aro:param3,
				        pedalar(){
				          console.log('Pedalar');
				        }
		     		}
		     	}


		     	E ENTAO, CRIAMOS UMA VARIAVEL QUE RECEBA O RETORNO DESSA FUNCAO FACTORY.

		     	let bicicleta2= bicicletaFactory(param);


		     	DO MESMO MODO, PODEMOS ACESSAR OS ATRIBUTOS E METODOS DO OBJETO.

		     	bicicleta2.pedalar();


		     	DO MESMO MODO, NOS OBJETOS LITERAIS QUANDO TEMOS UM ATRIBUTO NA FUNCAO
		     	QUE TENHA O MESMO NOME DO PARAMETRO(OU A VARIAVEL DE FORA) PODEMOS 
		     	OMITIR A ATRIBUIÇÃO E SÓ POR O NOME DO ATRIBUTO.,

		     	let bicicletaFactory = function (cor, marcha, aro){

			      return {
			        cor,
			        marcha,
			        aro,
			        pedalar(){
			          console.log('Pedalar');
			        }
			      }
			    };

			      let bicicleta3= bicicletaFactory('vermelha','unica',1);
				    console.log(bicicleta3);
				    bicicleta3.pedalar();





						______________ [PROTOTYPE] ____________


						TODOS OS OBJETOS EM JS DESCENDEM DE OBJECT.
	É BASICAMENTE O PRIMEIRO TIPO DE ALGUMA COISA, ELE AUTOMATICAMENTE É UM FILHO DE OBJECT

	PORTANTO ASSIM QUE CRIAMOS UM OBJETO, ELE AUTOMATICAMENTE DESCENDE DE OBJECT, QUE ESTRANHAMENTE
	NÃO É UM OBJETO, E SIM EM UMA FUNCAO. ENTAO LA NO FUNDO, OBJETOS SAO FUNCOES(em js).

	OBJECT POR SUA VEZ, POSSUEM SEUS PROPRIOS PROTOS.


				objetos >> filho da funcao object >> object filho de outros atributos



				PELO PROTOTYPE, PODEMOS ESTABELECER RELACOES DE HERANÇA ATÉ MESMO
				EM OBJETOS LITERAIS(EM OUTROS TB)
				UTILIZANDO A PALAVRA RESERVADA __proto__ (underline, underline prototype 
					underline, underline) E CITANDO QUAL O PROTOTIPO
				DO OBJETO QUE QUEREMOS HERDAR. ASSIM PODEMOS CHAMAR ATRIBUTOS, E METODOS
				EM UM OBJETO QUE NAO TERIA RELAÇÃO DE HERANÇA COM OUTRO.

				EX:

				 let vertebrado = {
			      attr2: 'b',
			     };

			     let ave = {
			      __proto__:vertebrado;
			      attr3:'c',
			     };

			     console.log(ave.attr2);


			     CHAMO EM AVE O PROTOTIPO DE VERTEBRADO, QUE NAO SERIA ACESSIVEL EM AVE
			     PORTANTO, AGORA, A PARTIR DE AVE POSSO CHAMAR OS ATRIBUTOS E MÉTODOS DE 
			     VERTEBRADO.

			     ** AQUI TB N HA HERANÇA MULTIPLA, SÓ PODE TER UM PAI **


			     SE ACONTECER DE UM ATRIBUTO DE UMA CLASSE PAI, ESTIVER SENDO CITADO NOVAMENTE
			     NO ATRIBUTO FILHO, O ELEMENTO DO ATRIBUTO FILHO SOBRESCREVERÁ O DO ELEMENTO PAI.

			      let vertebrado = {
			      __proto__: animal,
			      attr2: 'b'
			     };

			     let ave = {
			      __proto__:vertebrado,
			      attr3:'c',
			      attr2: 'x';
			     };  // será x, sobrescreve o do pai, muda no objeto pai.


			     						  --------------------

			     A PARTIR DO PROTOYPE PODERIAMOS ESTABELECER ATRIBUTOS E MÉTODOS QUE PODERIAM
			     SER HERDADOS POR PADRÃO POR QUALQUER OBJETO DENTRO DA APLICAÇÃO.

			     EM RESUMO, ATRIBUIR A ESSE OBJETO(OU MAIS DE UM) ALGUM COMPORTAMENTO PRÉ DEFINIDO.

			     EX:

			     Object.prototype.attr50 = 'Z';

			     console.log(ave.attr3, ave.attr2, ave.attr1, ave.attr50);
			     // o que antes geraria undefined agora retorna z, pois, um dos atributos
			     // herdados por padrão de todos os objetos, e consequentemente do objeto ave
			     // é attr50.


			     A LINHA ACIMA DITA QUE TODOS OS OBJETOS HERDARÃO (ISSO É MUITO ERRADO, ALTERE 
			     	SOMENTE O SEU OBJETO, NUNCA TODOS OS OBJETOS DA APLICAÇÃO.)
			      OBRIGATORIAMENTE, O ATRIBUTO attr50. TODO OBJETO CRIADO, TERÁ ESTE ATRIBUTO.

			     ** MUITA CAUTELA, ISSO É ERRADO, PARA ALTERAR SOMENTE O OBJETO QUE SE QUER,
			     TROQUE O NOME Object POR UM OBJETO DE FATO**

			     DÁ PRA ADCIONAR ATRIBUTOS E METODOS EM OUTROS OBJETOS, TROCANDO A LINHA OBJECT
			     DO COMANDO Object.prototype.attr POR UM OBJETO DE FATO, INSERINDO EM SEU PROTOTIPO
			     UM OUTRO ATRIBUTO.

			     O PROFESSOR ENSINOU A MODIFICAR TODOS OS OBJETOS, MAS O W3SCHOOLS DIZ:

			     "Only modify your own prototypes. Never modify the prototypes of standard
			      JavaScript objects."


			     **PROTO SERVE PARA HERANÇA ENTRE OBJETOS, E EXTENDS PARA HERANÇA ENTRE CLASSES**



			     [teste isso aqui depois]

			     VER SE DA PRA CRIAR UMA FUNCAO ANONIMA E ATRIBUIR ELA AO PROTOTYPE DE DIVERSAS
			     CLASSES, ASSIM, NAO PRECISA FICAR ESCREVENDO MILHOES DE FUNCOES REPETIDAS PARA
			     CADA CLASSE QUE EXECUTAR AQUELA MESMA FUNCAO.
			     https://blog.caelum.com.br/reaproveitando-codigo-com-javascript-heranca-e-prototipos/






			     UTEIS:

			     ** INSTANCEOF EXISTE EM JS.

			     ** EXISTE UMA FUNCAO CHAMADA generateHash() ADVINDA DA BIBLIOTECA CRYPTO
			     QUE RECEBE UMA STRING, E RETORNA UMA CADEIA DE ALFANUMERICOS, ALEATORIOS
			     COMO UMA CHAVE DE SEGURANÇA. this.hash = this.generateHash();
			     /*// retorna algo como : 
			     //2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae*/



			     ___________________[ REST SPREAD ]___________________



			     A OPERAÇÃO DEPENDE DO CONTEXTO NO QUAL ESTÁ. 
			     REST -> JUNTAR ESTRUTURAS DE DADOS ,
			     SPREAD -> ESPALHAR ESTRUTURAS DE DADOS.


			    	PARA ISSO VOCE UTILIZA O OPERADOR 3 PONTOS.

			   -------------------------[REST]---------------------------

			   SERVE PARA JUNTAR. BEM PARECIDO C O ARGUMENTS.

			   **** REST NO CONTEXTO DE PARAMETROS DE FUNÇÃO SERVE PARA
			   AGRUPAR OS DADOS JUNTOS, GERALMENTE NUM ARRAY ****

			   __ EM DADOS __

			   PODEMOS POR EXEMPLO, EM FUNÇÕES, RECEBER TANTOS PARAMETROS 
			   QUANTO SE QUEIRA UTILIZANDO O OPERADOR REST. ELE PEGA OS 
			   PARAMETROS PASSADOS PARA A FUNÇÃO, E OS JUNTA DENTRO DE UM
			   ARRAY, NOMEADO COM O NOME DO PARAMETRO.

			   DENTRO DESSA FUNÇÃO, PARA RESGATAR OS DADOS, RODAMOS ESSE 
			   ARRAY, DENTRO DE UMA ESTRUTURA DE REPETIÇÃO, NESSE CASO UM
			   FOREACH.


			   EX1:

			   function soma(...param){
		        let resultado = 0;
		        console.log(param);
		       /* retorna o array*/

		        param.forEach(v=>resultado+=v);
		         /*roda o array, e para cada elemento a função atribui o valor naquela posição
		         (v é o parametro valor, o primeiro que deve ser posto dentro de uma foreach de array) 
		         a soma dele mesmo com resultado e a cada rodada o proximo valor é somado a acumulação 
		         com os valores anteriores*/
		        return resultado;
		      }

		      console.log(soma(3,8,5,7,-8,10,115));

		      NESTE AQUI PASSAMOS UM PARAMETRO UNICO, E DEPOIS PASSAMOS UM
		      PARAMETRO COM OPERADOR REST/SPREAD, QUE NESSE CONTEXTO JUNTA
		      OS DADOS. PORTANTO, NESSE CASO, DIZ QUE O PRIMEIRO PARAMETRO
		      É UM PARAMETRO UNICO, E QUE TODOS OS OUTROS A SEGUIR SERÃO 
		      UNIDOS PELO OPERADOR REST/SPREAD(QUE NESSE CASO FUNCIONA COMO REST)


		      EX2:


		      function multiplicador (m, ...params){
		        let resultado = 0;
		        params.forEach(v=>resultado+=m*v);
		        return resultado;
		      }

		     console.log(multiplicador(5,7,12,3,49));




			   ------------------------[SPREAD]--------------------------


			    	__ EM STRINGS, DADOS, ATRIBUTOS:__

			    * O OPERADOR SPREAD ESPALHA OS DADOS(NUM CONTEXTO MUITO AMPLO
			    	MESMO, INCLUSIVE), COMO POR EXEMPLO EM UMA
			    STRING. O SPREAD VAI SEPARAR UMA LETRA DA OUTRA, E TRANSFORMAR
			    ELAS EM CARACTERES SEPARADOS. SE COLOCARMOS ISSO EM UM ARRAY,
			    CADA CARACTERE FICA EM UMA POSIÇÃO.


			    EX:
			     let tituloArtigo ='Como utilizar o operador rest/spread';

			      console.log(tituloArtigo);
			      console.log(...tituloArtigo);
			      console.log([...tituloArtigo]);

			      no console :
			     /* Como utilizar o operador rest/spread

				  C o m o   u t i l i z a r   o   o p e r a d o r  r e s t / s p r e a d

				  (36) ["C", "o", "m", "o", " ", "u", "t", "i", "l", "i", "z", "a", "r", " ", 
				  "o", " ", "o", "p", "e", "r", "a", "d", "o", "r", " ", "r", "e", "s", "t",
				   "/", "s", "p", "r", "e", "a", "d"]*/
			    					---------------------

			    	__ EM ARRAYS __


			    * NO MESMO CONTEXTO DE ESPALHAR, PODEMOS ESPALHAR INFORMAÇÕES
			    DE UM ARRAY EM OUTRO (NAO OS CARACTERES, MAS AS INFORMAÇÕES, O 
			    SPREAD DEPENDE DO CONTEXTO, O "ESPALHAR" TEM UM SENTIDO MUITO
			    AMPLO, E ESSE É UM DELES). 
			    SE TEMOS DOIS ARRAYS COM VARIAS STRINGS
			    E UM TERCEIRO, NO QUAL QUEREMOS COLOCAR AS INFORMAÇÕES (QUASE COMO 
			    	CONCATENAR OS ARRAYS) 
			    [Ç] SOMAR AS INFORMAÇÕES JA CONTIDAS ALI
			    COM AS INFORMAÇÕES CONTIDAS NOS ARRAYS, NÃO CRIAR UM ARRAY DE ARRAY[Ç]
			    ENTÃO, AS INFORMAÇÕES ALI AGORA SE CONCATENARÃO COM A DOS DOIS OUTROS
			    ARRAYS

			    ** DIZ BASICAMENTE, HEY! ESPALHE O CONTEUDO DO ARRAY X EM MIM **

			      let listaCursos1 = ['NodeJs','MongoDB','ES6, Typescript e Angular 4'];
			      let listaCursos2 = ['Multiplataforma Android/IOS','Introdução ao GNU/Linux'];
			      let listaCursosCompleto = ['Web Completo','Andoid completo',...listaCursos1,...listaCursos2];

                  console.log(listaCursosCompleto);

                 /* (7) ["Web Completo", "Andoid completo", "NodeJs", "MongoDB", "ES6, Typescript
                   e Angular 4", "Multiplataforma Android/IOS", "Introdução ao GNU/Linux"]
					*/

					__ EM OBJETOS __

				* PODEMOS TAMBEM ESPALHAR ATRIBUTOS E MÉTODOS DE UM OBJETO EM OUTRO, É
				QUASE COMO UMA HERANÇA, APESAR DE NÃO SER O MODO CORRETO DE SE DIZER.
				BASICAMENTE, DOAMOS UMA COPIA DOS ATRIBUTOS E MÉTODOS DE UM OBJETO
				PARA OUTRO UTILIZANDO OS TRES PONTOS. PARA ISSO, CHAMAMOS COM OS
				TRES PONTOS O OBJETO CUJOS ATRIBUTOS E MÉTODOS QUEREMOS ESPALHAR NO
				OUTRO OBJETO, NO CASO DO OBJETO LITERAL ABAIXO, O DECLARANDO COMO
				ATRIBUTO. MAS TAMBEM SERVE PRA CLASSES E FUNCÇÕES CONSTRUTORAS*

				EX:

				let pessoa = {
					nome:'Fábio', idade:27
				}

				let clone = {
					endereco:'Rua abc', ...pessoa
				}

				console.log(clone);


				no console:

				clone - > {endereco: "Rua abc", nome: "Fábio", idade: 27}

				CLONE TEVE OS ATRIBUTOS DE PESSOA ESPALHADOS DENTRO DE SI.


				  __________________[ DESTRUCTURING] _________________

				OPERADOR DE DESESTRUTURAÇÃO. TIRA VALORES DE DENTRO DE UMA
				ESTRUTURA. ESSA ESTRUTURA POR SUA VEZ, PODE SER UM ARRAY OU
				UM OBJETO.

				ARRAY -> []
				OBJETO -> {}




				EM ARRAYS:

				O TOKEN DO DESTRUCTURING É IGUAL AO DO ARRAY: [], VOCE
				DECLARA ESSE TOKEN COMO UMA VARIAVEL (LET OU CONST, GERALMENTE)
				E ATRIBUI AO ARRAY DO QUAL VOCÊ QUER OBTER INFORMAÇÕES. O TOKEN
				SEMPRE VAI A ESQUERDA DO OPERADOR DE ATRIBUIÇÃO, E A DIREITA
				DA DECLARAÇÃO DE VARIAVEL:

				      **ELE NAO TIRA O OBJETO DO ARRAY SÓ RECUPERA**

				let [] = array;

				*TODO COLCHETE(EM JS) QUE ESTEJA A ESQUERDA DO OPERADOR DE 
				ATRIBUIÇÃO, É UM DESTRUCTURING.*

				E ENTAO, DENTRO DOS COLCHETES VOCE PÔE VARIAVEIS (QUE SE
				CRIAM NA HORA) QUE SERÃO ATRIBUÍDAS, ORDENADAMENTE, AS POSI
				ÇÕES DO ARRAY, COMEÇANDO DO 0.

				 let frutas = ['Abacaxi','Uva','Pêra','Mamão']; 
			     let [a ,b,c, d] = frutas;
			     console.log(a,b,c,d,frutas);


			     PARA PULAR É SÓ ADCIONAR UMA VIRGULA E DEPOIS OUTRA, ONDE
			     TERIA UMA VARIAVEL NAO POE NADA.
			      let [a, ,c,d] = frutas;

			    PARA ATRIBUIR VALORES DEFAULT, BASTA FAZER O MESMO PROCESSO
			    DOS PARAMETROS. ATRIBUI UM IGUAL A VARIAVEL.
			    VALORES DEFAULT SÓ APLICADOS QUANDO POR ALGUM MOTIVO A VARIAVEL
			    NAO PODE SER EXIBIDA(UNDEFINED, OU NAO EXISTE NO OBJETO)

			     let [a,b ='Abacate' ,c, d] = frutas;


			     [PARRA ARRAYS MULTIDIMENSIONAIS:	]


			     SUPONDO QUE TENHAMOS UM ARRAY, COM DOIS ARRAYS DENTRO,
			     SE USÁSSEMOS SOMENTE O COLCHETES COM UMA VARIAVEL NORMAL, PARA
			     RESGATAR UM VALOR ELE RETORNARIA O PRIMEIRO ARRAY, DENTRO DESSE
			     ARRAY. PARA PEGAR A SEGUNDA LINHA DO ARRAY, USARIAMOS UMA VIRGULA
			     E IRIAMOS ARMAZENAR NA VARIAVEL O SEGUNDO ARRAY. MAS SUPONDO QUE
			     QUEIRAMOS RESGATAR UM VALOR DE DENTRO DE UM ARRAY, DENTRO DE UM ARRAY
			     PRECISAMOS SINALIZAR ISSO, ASSIM:

			     let [[]] -> ASSIM ESTAMOS DIZENDO QUE DENTRO DO MEU ARRAY, SE ENTRA
			     NO OUTRO ARRAY(O PRIMEIRO) E PEGA O PRIMEIRO VALOR(POIS NAO TEM MAIS
			     	INSTRUÇÃO DENTRO, MAS PODE TER, VEREMOS ISSO)


			     SE QUISESSEMOS IR PARA O SEGUNDO ARRAY, DESTE ARRAY, DAVAMOS UMA VIRGULA
			     INDICANDO QUE QUEREMOS PULAR O PRIMEIRO ARRAY. 

			     let [,[]] -> VAI PARA O SEGUNDO ARRAY.


			     E ENTAO, DENTRO DO ARRAY, NO ARRAY, PODEMOS QUERER GUARDAR NA VARIAVEL 
			     SOMENTE UMA DETERMINADA COISA, E PARA ISSO, NOVAMENTE PULAMOS POSIÇÕES.

			     let [,[,x]]


			     É BASICAMENTE ISSO, PARA PULAR USAMOS VIRGULAS, É SÓ IR COLOCANDO
			     VIRGULA ONDE QUISER PULAR, ENTRANDO DENTRO DE ALGO, DENTRO DE ALGO.







			    [DESTRUCTURING PARA OBJETOS:]



			    AO CONTRÁRIO DA VERSÃO PARA ARRAYS, NÃO USAMOS O TOKEN DE COLCHETES,
			     E SIM O TOKEN CHAVES {}, MAS A ESCRITA É A MESMA.
			    E ENTÃO, DENTRO DISSO, VOCÊ INDICA OS ATRIBUTOS DO OBJETO AO QUAL 
			    A VARIAVEL ESTARÁ ATRIBUIDA, QUE VOCÊ DESEJA RESGATAR.


			    let produto = {
			      descricao: 'Notebook',
			      preco :2000,
			      detalhes : {
			        fabricante :'Abc',
			        modelo: 'XyZ'
			      }
			    };


			    let {descricao, preco} = produto;
			    console.log(descricao, preco);


			    PODEMOS, DENTRO DO RESGATE DE ATRIBUTOS, FAZER O ATRIBUTO RESGATADO
			    ENTRAR NUMA VARIÁVEL CRIADA POR NÓS(POR EXEMPLO NO CASO DA DESCRIÇÃO
			    	ACIMA, ALI ESTAMOS SINALIZANDO QUE ESTAMOS RESGATANDO O ATRIBUTO
			    	DESCRIÇÃO DE PRODUTO, MAS PODERIAMOS QUERER ATRIBUIR A ESSA
			    	DESCRIÇÃO UMA VARIAVEL D, ENTÃO PODEMOS):

			    ATRIBUINDO ENTÃO A UMA VARIAVEL, O VALOR QUE EXTRAINDO DO OBJETO

			    (FICA ESTRANHO PORQUE DE CERTA FORMA, PARECE SER UMA VARIAVEL DENTRO
			    DE UMA VARIAVEL, MAS OBSERVE BEM O CODIGO, A VARIÁVEL, É O QUE ESTÁ
			    DENTRO DAS CHAVES, O LET SÓ SERVE PARA SINALIZAR A CRIAÇÃO DELAS.

			    PORTANTO, NESTE CASO É COMO SE CRIÁSSEMOS A VARIÁVEL D, E DISSESSEMOS:

			    OLHA, D RECEBE O VALOR EXTRAIDO DO ATRIBUTO DESCRIÇÃO DO OBJETO PRODUTO)

			    let {descrição: d} = produto;



			     [VALORES DEFAULT]


			     DO MESMO MODO, SE TEMOS UM ATRIBUTO QUE CORRE O RISCO DE NÃO ESTAR
			     PRESENTE NO OBJETO, PODEMOS SETAR PARA ELE UM VALOR DEFAULT, ASSIM
			     COMO EM PARAMETROS DE FUNÇÃO, E NO DESTRUCTURING DO ARRAY.

			     A SINTAXE É IGUAL.



			     let {descricao:d, preco: p, desconto=5} = produto;



			     O VALOR DEFAULT SÓ É APLICADO, SE POR ALGUM MOTIVO O ATRIBUTO NÃO FOR
			     ACESSADO, OU NÃO EXISTIR.(UNDEFINED, OU NAO EXISTE NO OBJETO)


			     [RESGATAR ATRIBUTOS DE UM OBJETO, DENTRO DE OUTRO OBJETO]

			     PARA ISSO DECLARAMOS A VARIAVEL NORMALMENTE, AS CHAVES, E INDICAMOS
			     DENTRO DELAS, O ATRIBUTO, QUE POR SUA VEZ CONTÉM O OBJETO, SOBRE O
			     QUAL IREMOS ATUAR, USAMOS OS DOIS PONTOS, E ABRIMOS NOVAMENTE AS CHAVES,
			     DENTRO DESTAS, INDICAMOS OS ATRIBUTOS DO OBJETO MAIS INTERNO, QUE QUEREMOS
			     ACESSAR.	

			    let produto = {
			      descricao: 'Notebook',
			      preco :2000,
			      detalhes : {
			        fabricante :'Abc',
			        modelo: 'XyZ'
			      }
			    };

			    let {detalhes:{fabricante, modelo}};

			    E NOVAMENTE, PODEMOS ATRIBUIR OS VALORES RETIRADOS, A UMA VARIÁVEL.
			    E TAMBEM, UM VALOR DEFAULT.

			    let {detalhes: {fabricante:f='Marca',modelo:m ='Marca'} } = produto;



			    ____________________ [DESTRUCTURING EM FUNCOES] __________________



			    (MEU DEUS ISSO É UM PORREEEEEEEE)



			    [ARRAYS PASSADOS PARA FUNCOES]


			    SE TRATA DE DESTRUCTURING NO PARAMETRO DE FUNCOES. COMO SEMPRE, VOCE PODE
			    PASSAR SOMENTE DETERMINADOS PARAMETROS PARA A FUNCAO.
			    NESSE EXEMPLO USAREMOS UM ARRAY. PORTANTO, O TOKEN É [], ENTÃO, PASSAMOS
			    PARA A FUNCAO O ARRAY INTEIRO, E RECEBEMOS NO PARAMETRO, SOMENTE O QUE 
			    QUEREMOS.

			    ASSIM:

			    let arr = [10,20,30,40,'Olá'];
			    function teste([,a,b]){
			       console.log(a,b);
			    }

			      teste(arr);


			    ENTAO DESSE MODO, PASSAMOS O ARRAY INTEIRO, MAS SO RECEBEMOS ALGUMAS 
			    POSIÇÕES DELE.

			    COMO SEMPRE, USAMOS VIRGULAS PARA PULAR OS VALORES NAO DESEJADOS
			    PODEMOS TAMBEM SETANDO VALORES DEFAULT NOS PARAMETROS
			    E CLARO, ATRIBUIR AO PARAMETRO UMA VARIAVEL QUE RECEBE O VALOR DO ATRIBUTO
			    PASSADO Á FUNÇÃO


			    [OBJETOS PASSADOS PARA FUNCOES]


			    PODEMOS PASSAR UM OBJETO PARA A FUNCAO, E FILTRAR, NOS PARAMETROS, QUAIS ATRIBUTOS
			    SERÃO APROVEITADOS, PEGANDO DO OBJETO SÓ OS ATRIBUTOS DESEJADOS.

			    COMO SE TRATAM DE OBJETOS, USAMOS O TOKEN {}

			    ASSIM:


			    let obj={
			    	a:10,
			    	b:20,
			    	c:30,
			    	d:40
			    }

			    function recebe({,a:x,b:y='default'}){
			    	console.log(x,y) /*por causa da virgula ele vai pular um, e vai mostrar b e c*/
			    }

			    recebe(obj);


			    ______________________[DESTRUCTURING COM REST]____________________

			    [PARA ARRAYS]

			    PODEMOS PEGAR O CONTEUDO DE ARRAYS, E GUARDAR NAS VARIAVEIS COM
			    DESTRUCTURING, ALGUNS DADOS TODOS DE VEZ, USANDO REST .JUNTANDO
			    OS ELEMENTOS NUM ARRAY.


			    let arr = [10,20,30,40]
			    let [a,...restante] = arr

			    console.log(a);
			    console.log(restante);




			    [PARA OBJETOS]

			    let arr = [10,20,30,40]
			    let {a, ...restante} = arr
			    console.log(a);
			    console.log(restante);

			     _________________ [ WEBSTORAGE JS ] ________________


	LocalStorage* - Mantém os dados do lado do cliente no navegador enquanto ele não apaga a cache. Um fato interessante é que
	os dados definidos em localStorage para aquela janela ficam disponiveis para todas as páginas de uma mesma aplicação: ou seja
	páginas que tenham a mesma origem. Se eu tenho dois arquivos em uma pasta, e em um deles eu defino alguma propriedade no localStorage
	na outra eu consigo acessar essa propriedade também, mesmo que esses arquivos estejam, cada um, em guias diferentes do navegador.
	Para outras páginas que sejam abertas na mesma guia, ou em outras do navegador, que não sejam de mesma origem da página onde defini
	a propriedade, esta X propriedade não estará definida.

	SessionStorage* - Mantém os dados do lado do cliente no navegador até que a instancia do navegador se encerre
	IndexedDB** - Não vimos 
	Web SQL** - Não vimos
	Cookies - Enviado pelo lado do cliente ao back end toda vez que é feita uma requisição http

	* Suporta mais dados que os cookies
	** Mais complexos - suportam mais dados que o local e o session storage



Guardando objetos dinamicamente em localstorage:(quando não se sabe o id dos objetos lá)


Para usar o local storage utilizamos o objeto de manipulação localStorage (sim, é só chamar esse nome, sem criar nada antes)
Ou window.localStorage. A partir deste objeto podemos chamar varias funcoes, como:

*localStorage.setItem('identificadorObjeto', JSON.stringify(objeto)) - Este metodo recebe uma string que identifica o objeto
e um objeto do tipo json. Se estivermos passando um objeto normal, utilizamos o JSON.stringify para converter para notação JSON

*Uma observação: Deste modo a cada vez que um item for colocado no localstorage com o mesmo identificador, o objeto de identificador correspondente
a string será atualizado com o objeto JSON, ou seja, os dados do objeto com aquele nome(que nunca muda) írão mudar, ao contrario
de o localStorage receber outro objeto. Se eu clicar no botao para cadastrar um objeto de um identificador, e não mudar o identificador
depois, clicando de novo pra cadastrar um objeto, o objeto cadastrado anteriormente terá seus dados MUDADOS.
BASICAMENTE O OBJETO FEITO ANTERIORMENTE É SOBREPOSTO.

Caso as alterações de um arquivo js com alterações relacionadas a cache não sejam atualizadas ao recarregar, apertar ctrl + F5


Para resolver o problema da sobreposição, podemos criar, na primeira inserção no localStorage(por meio de uma classe)
um objeto qualquer de valor vazio para nos basear, sabendo que ele sempre vai existir ali.
O objetivo desse objeto é guardar o valor atualizado do proximo indice onde pode ser armazenado um objeto qualquer no LocalStorage.

Neste caso, criamos uma classe, e dentro do construtor verificamos, usando o getItem, se já existe a chave padrão(a que nos auxilia)
caso retorne null, ele cria essa chave, com um identificador e valor quaisquer(neste exemplo id e 0 respectivamente).

Na nossa função de gravar em localstorage, recebemos numa variavel o retorno de outra funcao interna a classe. Essa funcao interna recebe
numa variavel atrávez do getItem o valor (segundo parametro) da funcao getItem (getItem('id')) procurando o objeto padrão criado no construtor
e dá o retorno desse valor +1 (é bom dar parseInt no valor de retorno, pq ele vem em string). Voltando a funcao gravar que recebe o retorno da 
função anterior em uma variavel, criamos, usando o setItem, um objeto em localstorage que leva o retorno gerado na funcao anterior como identificador
e o objeto que queremos como valor (não esquecendo do JSON.stringify()). Depois disso atualizamos o objeto padrão com o retorno fornecido
pela função anterior, pra que quando esta execute novamente, incrementar este valor retornado, fornecendo mais identificadores.

O objetivo de atualizar o objeto padrão é dizer pra ele algo como: "Olha, acabei de setar um objeto com esse identificador, guarde ele também , registrando
que ele já existe, assim quando a função gerarProximoID executar novamente, agora ele verá que este foi o ultimo valor gerado, e o incrementará em um, assim,
você sempre guarda o ultimo valor gerado" 

Aqui o exemplo:

class BD{
	constructor(){
		let id = window.localStorage.getItem('id');
		if(id===null){
			id = window.localStorage.setItem('id',0);
		}
	}
	getProxID(){
		let proxID = window.localStorage.getItem('id');
		return parseInt(++proxID);
	}
	gravar(d){
		let id = this.getProxID();

		window.localStorage.setItem(id,JSON.stringify(d));
		window.localStorage.setItem('id', id);
	}
}


Recuperando objetos dinamicamente do localstorage (quando não se sabe o id dos objetos lá):

fazemos um método onde colocaremos as instruções, primeiramente.
Depois, pegamos uma chave que tenhamos certeza de que sempre esteja lá, a chave base, usada na parte anterior, que é criada
logo na construção do objeto. Como na parte anterior diz, aquela chave sempre terá o valor referente ao ultimo registro, e tambem
representa a quantidade de registros em localstorage, sendo assim, podemos iterar usando um laço for, resgatando todos os registros
pela quantidade contida no valor da chave padrão. pegando cada um dos itens:

function recuperarRegistros(){
	let id = window.localStorage.getItem('id');
	let despesa;
	for (let i = 1; i<= id ;i++){
		despesa = window.localStorage.getItem(i);
		console.log(despesa);
	}
}


	setItem('id',*valor) 
Usado pra criar um objeto json no localStorage (valor geralmente é: JSON.stringify(objeto)) quando o objeto cujo identificador não
existe em localStorage, e usado para mudar o valor de um objeto cujo identificador já exista em localstorage.

    getItem('myCat')
Usado para pegar um objeto em localstorage por meio do identificador e retorna o *valor(conteudo) do objeto, quando ele existe
caso não exista retorna null.

	removeItem('myCat');
Remove um item do localStorage

	localStorage.clear();
Limpa a cache daquela aplicação

HÁ TAMBEM O SESSION STORAGE, COM MÉTODOS IDÊNTICOS AO LOCALSTORAGE. A DIFERENÇA DE UM PARA OUTRO É QUE OS OBJETOS NO
SESSION STORAGE SÓ EXISTEM ENQUANTO O USUÁRIO NÃO FECHAR O NAVEGADOR.


Podemos criar atributos para o localStorage, como por exemplo uma variável para armazenar um contador, o que faria com que
não precisassemos ter todo este trabalho que o professor teve. A variavel do localStorage poderia ser incrementada toda vez
que um registro fosse ser colocado(se o valor da chave é 0 atualmente, o proximo registro é colocado em ++chave);

Para criar atributos basta referenciar o localStorage, um ponto e o nome do atributo:

ex:

localStorage.attr = valor;





  				 _________________ [ Objetos literais vs JSON JS ] ________________

  				 O JSON é basicamente uma estrutura de dados de String (cadeia de caracteres).

  				 O JSON parece um objeto literal, sua estrutura é assim:

  				 abre aspas, abre chaves, depois há conjuntos chave : valor, onde chave e valor
  				 são também englobados por aspas, pode haver tantos conjuntos de chave e valor
  				 quantos se tornarem necessário, o valor pode ser um número, nesse caso não precisa
  				 de aspas.  Os : não precisam estar englobados por aspas.

  				 Porque usar JSON? 

  				 Quando usamos o local storage, estamos passando dados da nossa aplicação para o browser
  				 : eles se comunicam. O localstorage é usado pela nossa aplicação, e é uma aplicação externa
  				 a nossa. É por meio do JSON que eles se comunicam,já que o localStorage precisa da representação 
  				 textual de um objeto, ou seja, o protocolo de comunicação é em texto, texto que é enviado através do 
  				 front end para o local storage e até mesmo para o localStorage para o backend. Os objetos literais 
  				 são objetos, portanto não servem, já que não são textos, somente podem ser convertidos.


  				 Para converter objetos (literais, construidos, de classe) para JSON:

  				 JSON.stringify(objetoComum)

  				 Para converter objeto JSON para um objeto literal:

  				 JSON.parse(ObjetoJSON);


  	         _________________ [ VALIDAÇÃO DE FORMULÁRIO - METODO PRATICO JS ] ________________
  	         		NESTE CASO INTERESSANTE, USANDO O THIS DENTRO DA CLASSE, CLARAMENTE FAZEMOS REFERENCIA
					OU A UM METODO/ATRIBUTO DA PROPRIA CLASSE OU AO OBJETO QUE O CHAMA, ASSIM, O OBJETO
					SE COMPORTA COMO UM ARRAY.

					SE ITERANDO O THIS(OBJETO), PEDINDO PARA RETORNAR A VARIAVEL CORRESPONDENTE A ITERAÇÃO
					NAQUELE MOMENTO, TEMOS O ATRIBUTO DO OBJETO, E ASSIM COMO UM ARRAY, PODEMOS TAMBÉM 
					RETORNAR O VALOR NO ATRIBUTO NAQUELE MOMENTO, USANDO O INDICE: THIS[Indice]


					ASSIM, COMO EXPLICADO NA SESSÃO DO FOR IN, PODEMOS ITERAR SOBRE OS ATRIBUTOS DE UM OBJETO.

					NEM SEMPRE PRECISAMOS TER UM OBJETO PROVIDO DE UMA CLASSE, MAS PODE SER UM LITERAL, NO CASO
					DE UM GERADO PELO PREENCHIMENTO DE UM FORMULARIO.

					PODEMOS, AO INVES DE RESGATAR, UM POR UM OS ATRIBUTOS PARA SÓ DEPOIS OS VALIDAR, PODEMOS ITERAR
					SOBRE OS ATRIBUTOS, CHECANDO CADA UM DELES DINAMICAMENTE, RETORNANDO FALSE IMEDIATAMENTE CASO
					ALGUM DELES COMPREENDA CONDIÇÃO DE INVALIDADE. CASO O RETORNO FALSO NÃO SEJA ATINGIDO, O RETORNO
					VERDADEIRO PARA A FUNÇÃO AVISANDO QUE NENHUM DOS ATRIBUTOS ATINGIU A CONDIÇÃO DE INVALIDADE, E ,
					A PARTIR DAI, PODEMOS REALIZAR ESSAS OPERAÇÕES.

					POR EXEMPLO, CASO ESTA FUNCAO DE VALIDAÇÃO RETORNE TRUE, PROCEDEMOS PARA O REGISTRO EM LOCALSTORAGE,
					OU PODEMOS PREENCHER OUTRO FORMULARIO, ETC. CASO NÃO, PODEMOS MOSTRAR DIÁLOGOS, FECHAR A PÁGINA, ETC.
					NO CASO DE UM CHECKBOX DE ACEITO AS CONDIÇÕES DE USO NÃO MARCADO, PODEMOS COLOCAR UM DIALOG. INFINITAS
					POSSIBILIDADES.

					EXEMPLO:

							class Despesa{
								constructor(ano,mes,dia,tipo,descricao,valor){
									this.ano = ano;
									this.mes = mes;
									this.dia = dia;
									this.tipo = tipo;
									this.descricao =  descricao;
									this.valor = valor;
								}
								validarDados(){
									for(let i in this){
										if(this[i] == undefined || this[i] == "" || this[i] == null)
											return false;
									}
									return true;
								}
							}
							let despesa = new Despesa(
								ano.value,
								mes.value,
								dia.value,
								tipo.value,
								descricao.value,
								valor.value
							);

							if(despesa.validarDados()){
								//bd.gravar(despesa);
								console.log('dados validos');
							}
							else{
								console.log('dados invalidos')
							}



	 __________________[VALIDANDO DADOS DE FORMULÁRIO COM JS E ENVIANDO PRO SERVIDOR COM PHP]__________________

	 gravar(){
		if(validarPagina()){
			if(confirm("Você tem certeza que deseja encaminhar esta manifestação para a Ouvidoria?")){
				document.frm1.acao.value="salvar";
				document.frm1.submit();
			}
		}
	}	

	Aprendi no exemplo acima com o site da faculdade. 

	O objeto form no javascript tem atributos e métodos e um deles é o submit. Desta forma não precisamos colocar
	o submit direto no botão e sim chamar uma função que envia o formulário para o servidor, caso todos os dados
	tenham sido validados por uma outra função.

	<form name ="myForm" > </form>
	document.myForm.submit();

	Ao colocar um botão que ative a função de validação, o name do botão NUNCA pode ser submit, pois ele sobrescreve o método
	submit do formulário. (o type sim, o name não)

	<input type="submit" name="btn-submit" class="btn btn-pink btn-block" id="button-submit" value="Login" onclick="validar()">



	// É aplicado no form.

	Lista de atributos e métodos do objeto form:

	action 
	autocomplete
	length - 	Returns the number of elements in a form
	method
	noValidate

	target - Esse é especial. Muda onde mostrar a resposta(do servidor) que é recebida depois de submeter um form. 
	Abre a resposta em uma nova janela ao invés de na mesma que foi clicada *(ou nao). valores: _blank|_self|_parent|_top|framename

	reset()	Resets a form
	submit() Submits a form


	a Atributos e e seletores das inputs:

	disabled	- Specifies that the input element should be disabled
	max		    - Specifies the maximum value of an input element (range)
	min			- Specifies the minimum value of an input element (range)
	pattern	    - Specifies the value pattern of an input element
	required	- Specifies that the input field requires an element
	type 	    - Specifies the type of an input element
	readonly    - Attribute specifies that the input field is read only (cannot be changed)
	maxlength   - Attribute specifies the maximum allowed length for the input field:
	autocomplete
	autofocus
	form
	formaction
	formenctype
	formmethod
	formnovalidate
	formtarget - 
	height and width
	list
	min and max
	multiple
	pattern (regexp)
	placeholder
	step


	:disabled	Selects input elements with the "disabled" attribute specified
	:invalid	Selects input elements with invalid values
	:optional	Selects input elements with no "required" attribute specified
	:required	Selects input elements with the "required" attribute specified
	:valid	Selects input elements with valid values
	:focus Seleciona o que acontece com a input quando ela está selecionada



			_________________ [ INSERINDO ELEMENTOS EM UMA TABELA DINAMICAMENTE JS ] ________________

			CONSIDERANDO QUE TENHAMOS POR EXEMPLO, UM ARRAY DE INFORMAÇÕES E QUEREMOS JOGAR CADA UM DOS
			INDICES NUMA TABELA, PARA CADA INDICES QUEREMOS UMA LINHA. PARA ISSO PODEMOS USAR O FOREACH, 
			ASSIM PARA CADA UM DOS INDICES PODEMOS USAR A FUNÇÃO:

			let linha = tbodyElemento.insertRow();

			CONSIDERANDO A LINHA CRIADA, AGORA CRIAMOS AS COLUNAS DA LINHA, UTILIZANDO O METODO insertCell(N)
			ONDE N É O NUMERO DA COLUNA, CRIAMOS TANTAS QUANTAS NECESSÁRIAS, COMEÇANDO DO 0.

			CONSIDERANDO 4 COLUNAS:

			linha.insertCell(0);
			linha.insertCell(1);
			linha.insertCell(2);
			linha.insertCell(3);

			PARA ALTERAR O CONTEUDO DA COLUNA EM QUESTÃO:

			linha.insertCell(0).innerHTML = conetudo ;

			EXEMPLO:

			despesas.forEach(
				d =>{
					console.log(d);
					let linha = listaDespesas.insertRow();

					d.dia = d.dia < 10 ? "0" + d.dia : d.dia;
					d.mes = d.mes < 10 ? "0" + d.mes : d.mes;

					linha.insertCell(0).innerHTML = `${d.dia}/${d.mes}/${d.ano}`;
					switch(parseInt(d.tipo)){
						case 1: d.tipo = "Alimentação"; break;
						case 2: d.tipo = "Educação"; break;
						case 3: d.tipo = "Lazer"; break;
						case 4: d.tipo = "Saúde"; break;
						case 5: d.tipo = "Transporte"; break;
						default: d.tipo = "Outros"; break;

					}
					linha.insertCell(1).innerHTML = `${d.tipo}`;
					linha.insertCell(2).innerHTML = `${d.descricao}`;
					linha.insertCell(3).innerHTML = `${d.valor}`;
				}
			);


			PARA COLOCAR UM ELEMENTO CRIADO (UM RESGATADO, OU CRIADO COM CREATE ELEMENT)

			let elemento = document.creteElement('tag') // pode ser body, button, etc
			DEPOIS PERSONALIZA ELE E PA E COLOCA DENTRO DO ELEMENTO
			elementoHtml.append(elemento)

			NESTE EXEMPLO:

			let btn = document.createElement('button');
			btn.className = "btn btn-danger";
			btn.innerHTML = '<i class="fas fa-times"</i>';
			linha.insertCell(4).append(btn);


________________________________[COPIAR CONTEUDO DE DIV PARA O CTRL C]________________________________

Primeiro fazemos uma função e dentro dela, selecionamos o elemento que contém o texto que queremos copiar:

let elem = document.get...pipippopopoEtc..
// o comando não quer o texto, e sim o elemento, não precisa capturar value, innerHTML etc..

elem.select();

Depois copiamos o texto dentro da div com o comando:

document.execCommand("Copy");

EX:

function copiar(){
	let textoCopiado = resultBox;
    textoCopiado.select();
    document.execCommand("Copy");
}


Para SÓ SELECIONAR O TEXTO DENTRO DE UMA DIV(SEM COPIAR AUTOMATICAMENTE):

Pegamos a referencia para o objeto que contém o texto a selecionar e em seguida usamos a função select;

Ex:

let box = document.getElementById('messageBox');

box.addEventListener('click', ()=> box.select());

Ao clicar na div o texto dentro dela será copiado. (Muito usado em campos de texto).

________________________________[SEGURANÇA E CRIPTOGRAFIA]_____________________________________________

BASE 64:

Apesar de não ser tão segura, a criptografia de base 64 pode ser usada para pegar parametros do url(muito útil pra 
passar critpgrafado por get por parametro e descriptografar no back end pra ninguem ver qual a mensagem ou pra não
atrapalhar o tratamento por conter caracteres especiais).

Para criptografar no javascript:

De String para Base-64

let criptografada = btoa("String");

De Base-64 para String:

let descriptografada = atob(criptografada);

				________________________[OBSERVAÇÕES JS]_____________________________

				1 - SUPONDO UM OBJETO QUE ESTÁ SENDO TRATADO EM TEMPO DE EXECUÇÃO DE 
				QUALQUER FORMA QUE SEJA, PODEMOS CRIAR, EM TEMPO DE EXECUÇÃO, ATRIBUTOS
				NOVOS, AO INVÉS DE TER QUE IR ALTERAR A CLASSE PRA PODER, SÓ ENTÃO, PREENCHER
				ESSE ATRIBUTO DO OBJETO. SE CHAMAMOS O OBJETO E UM ATRIBUTO QUE NÃO EXISTE
				ATRIBUINDO ESTE VALOR, ELE É CRIADO, E O VALOR É ATRIBUIDO A ESTE ATRIBUTO
				AUTOMATICAMENTE: 

				2 - ATRIBUTOS PARA MUDAR DINAMICAMENTE AS CORES, VALORES, CLASSE, ID DE UM
				ELEMENTO:

				elem.className = 'nome';
				elem.id = 'nome';
				elem.innerHTML = 'nome';

				3 - QUALQUER COISA DENTRO DE UMA FUNÇÃO ESTÁ CONTIDA NO ESCOPO DELA, PORTANTO
				FUNÇÕES DENTRO DE OUTRA FUNÇÃO FICAM PRESAS NO ESCOPO DESTA TAL FUNÇÃO, FORMANDO
				ASSIM O CONCEITO DE [CLOSURE] - O QUE SIGNIFICA QUE ELA SÓ É VISIVEL DENTRO DA FUNÇÃO
				PAI, E SÓ PODE SER EXECUTADA ATRAVÉS DO PAI. EX:

				function operacao(numero, numero1){
					function abc(){
						return "Oi";
					}
					abc();
					return { 
						soma(){
							return numero + numero1;
						},
						sub(){
							return numero - numero1;
						}
					}

				}

				OBS: OS PARAMETROS SÃO RECEBIDOS PELA FUNCAO PAI, PORTANTO SÃO TAMBÉM PARAMETROS DO
				ESCOPO DA FUNÇÃO FILHA.

				SE EU CHAMAR A FUNÇÃO OPERAÇÃO, ELA EXECUTA A FUNÇÃO ABC NORMALMENTE SEM EXECUTAR NENHUMA DAS DUAS
				SE EU NÃO CAPTAR O RETORNO PARA PODER CHAMAR AS FUNCOES RETORNADAS, QUEM EXECUTOU A FUNCAO PAI
				SEM VER O QUE HÁ NELA, SEQUER VAI SABER QUE ELAS EXISTEM. ESTA É A IDEIA DE FUNCAO E ATRIBUTOS 
				PRIVADOS EM JS.


				3 - DÁ PRA COMBINAR AS FUNCOES MAP, REDUCE E FILTER.







					     _________________ [ BIBLIOTECAS JS ] ________________

					     * BIBLIOTECA DROP *
					     POP UPS, DROPDOWNS(MOUSEOVERS TB) ETC.
					     https://github.hubspot.com/drop/docs/welcome/

					     * BIBLIOTECA STICKER *
					     CRIA EFEITO DE FIGURINHA DOBRANDO
					     http://stickerjs.cmiscm.com

					     * DESENHANDO NO CANVAS *
					     https://www.devmedia.com.br/desenhando-com-o-mouse-na-canvas-da-html5/27619


					   			--------------- [NODE] ----------------

							INSTALAR A CRYPTO JS -> npm install crypto-js 
							   	(TEM QUE TER O NODE INSTALADO)

					________________________[OBJETO CONSOLE]__________________________
					assert()	Writes an error message to the console if the assertion is false
					clear()	Clears the console
					count()	Logs the number of times that this particular call to count() has been called
					error()	Outputs an error message to the console
					group()	Creates a new inline group in the console. This indents following console messages by an additional level, until console.groupEnd() is called
					groupCollapsed()	Creates a new inline group in the console. However, 
					the new group is created collapsed. The user will need to use the disclosure
					button to expand it
					groupEnd()	Exits the current inline group in the console
					info()	Outputs an informational message to the console
					log()	Outputs a message to the console
					table()	Displays tabular data as a table
					time()	Starts a timer (can track how long an operation takes)
					timeEnd()	Stops a timer that was previously started by console.time()
					trace()	Outputs a stack trace to the console
					warn()	Outputs a warning message to the console

			____________________________[MODULOS JS]___________________________________

			A idéia de módulos permite o reuso e melhor flexibilidade dos codigos em js.

			Antes de tudo:
			O arquivo que vai importar(chamar para si) os itens de outro tem que ser um
			módulo.
			O arquivo que vai exportar(enviar para outro) tem que ser um módulo.

			Ambos arquivos tem que ser módulos. Um módulo só importa coisas de outro, assim
			como só exporta coisas para outro.

			Para tanto, ao declarar nosso arquivo no html ao invés do mime text/javascript,
			o arquivo tem que carregar: type='module'. Não importa se a fonte é externa ou não.



			Para usar módulos usamos a palavra export no que queremos que possa ser importado
			de outros arquivos, e import como comando para importar o arquivo que leva a palavra
			reservada export.

			assim:

			export const PI = Math.PI // 3.141592653589793

			export function soma (...params) {
			 return params.reduce((a, b) => a + b, 0)
			}

			No import dizemos entre chaves o que queremos importar de X arquivo.

			import { soma } from './util.js' 

			Para importar vários itens, dentro das chaves utilizamos virgulas entre cada
			item.
			Mesmo que o item importado seja uma função, ele é chamado entre chaves sem o 
			parentese. Caso seja preciso executar os parenteses são executados depois.

		É possivel dar um apelido para um item importado, que será usado no contexto do arquivo atual
		ao invés do nome original(também funciona para funções, ela agora é executada uasndo o apelido,
		como se fosse o nome da função original), importando entre chaves normalmente o nome do item
		seguido da palavra as e depois o apelido. Assim:

		import { soma as somaDeTodosOsValores } from './util.js'


					_______________________[OBJETO NAVIGATOR]________________________


					The navigator object contains information about the browser.

Note: There is no public standard that applies to the navigator object, but all major browsers support it.

	[window.navigator.Attr] 

	exemplo: window.navigator.onLine (esse é bom colocar um listener pra escutar se há conexão a cada x segundos), tipo>

	var online = navigator.onLine; // true ou false, (há, não há conexão à internet)
	if(online) {
	    // efetuar pedido ajax
	}


	appCodeName	Returns the code name of the browser
	appName	Returns the name of the browser
	appVersion	Returns the version information of the browser
	cookieEnabled	Determines whether cookies are enabled in the browser
	geolocation	Returns a Geolocation object that can be used to locate the user's position
	language	Returns the language of the browser
	onLine	Determines whether the browser is online
	platform	Returns for which platform the browser is compiled
	product	Returns the engine name of the browser
	userAgent	Returns the user-agent header sent by the browser to the server
	Navigator Object Methods
	Method	Description
	javaEnabled()	Specifies whether or not the browser has Java enabled
	taintEnabled()	Removed in JavaScript version 1.2. Specifies whether the browser has data tainting enabled


					**************************[BACK END]*******************************

					HTTP: HYPERTEXT TRANSFER PROTOCOL
					O PADRÃO AO FAZER UMA REQUISIÇÃO HTTP SEGUE AS REGRAS DE:
					IDENTIFICAR O CLIENTE FAZENDO A REQUISIÇÃO, O URL SOLICITADO QUE SEGUE
					PELA INTERNET ATÉ O SERVIDOR QUE IRÁ RESPONDER A REQUISIÇÃO. CASO DIGITEMOS
					UMA URL QUE NÃO EXISTE, A URL SEGUE PELA INTERNET MAS NENHUM SERVIDOR RESPONDE
					A REQUISIÇÃO.

					PROTOCOLO DE REQUISIÇÃO/RESPOSTA.

					SERVIDOR WEB: PROGRAMA CAPAZ DE ACEITAR REQUISIÇÕES HTTP E RESPONDE-LAS.
					FUNCIONA COMO MEDIADOR ENTRE O CLIENTE (GERALMENTE BROWSER) E A APLICAÇÃO DE
					BACK-END.

					BASICAMENTE HÁ 3 COMPONENTES POR TRAS DO BACK END:
					A LNGUAGEM DE PROGRAMAÇÃO DE BACK END - php
					O SERVIDOR HTTP - apache
					SISTEMA GERENCIADOR DE BANCO DE DADOS. - mysql

					MariaDB => Versão melhorada do MySQL

					Maria db foi o gerenciador de banco de dados melhorado pela comunidade depois de
					a oracle abandonou o projeto após ter comprado o MySQL da Sun. Ele foi adotado
					pela apache como gerenciador oficial.

					XAMPP - STACK PHP, APACHE, MARIADB


					DENTRO DO XAMPP IRÃO EXISTIR AS OPÇÕES DE INICIALIZAÇÃO DOS SERVIÇOS INSTALADOS, NO
					CASO: APACHE E MYSQL.
					ANTES DE TENTAR USAR OS DOIS, ELES DEVEM SER INICIALIZADOS.
					A JANELA DE LOGS MOSTRA DADOS DOS SERVIÇOS INSTALADOS, E DO PROPRIO XAMPP, ENTÃO 
					QUALQUER ERRO EM TEMPO DE EXECUÇÃO SERÁ MOSTRADO ALI. 

					AO CLICAR EM START O SERVIÇO FICA VERDE ALÉM DE MOSTRAR O PID E A PORTA ONDE ELE ESTÁ ESCUTANDO.
					DÁ PRA MODIFICAR AS PORTAS DE ACORDO COM A NECESSIDADE.

					ENDEREÇO DE LOOPBACK: ENDEREÇO QUE FAZ COM QUE POSSAMOS FAZER REQUISIÇÕES HTTP AO 
					NOSSO PROPRIO COPUTADOR, O LOCALHOST. O ENDEREÇO FAZ COM QUE A REQUISIÇÃO BATA NA PLACA 
					DE REDE DA PROPRIA MÁQUINA, FAZENDO COM QUE ELA MESMA RESPONDA A REQUISIÇÃO.
					SE DIGITARMOS LOCALHOST COM O APACHE ATIVADO, SERÁ FEITA UMA REQUISIÇÃO A QUEM ESTÁ
					ESCUTANDO NAQUELA PORTA, A PORTA DO LOCALHOST.
					SE O APACHE ESTIVER PARADO, VAI DAR ERRO, PORQUE NÃO TEM NINGUEM EM LOCALHOST(NA PORTA)
					PRA RECEBER A REQUISIÇÃO.

					SE EU FAÇO UMA REQUISIÇÃO E NÃO INDICO UM PARAMETRO, EU TENHO COMO RETORNO O INDEX.





					O XAMPP UTILIZA A PORTA 80 POR PADRÃO, SE OUTRA APLICAÇÃO ESTIVER USANDO-A, VAI DAR 
					CONFLITO.

					 XAMPP => Apache, MariaDB(Mysql), PHP and Perl.
					 Full stack WAMP => Windows + Apache + MariaDB(MySQL) + PHP.
					 Full stack LAMP => Linux + Apache + MariaDB(MySQL) + PHP.
					 Full stack MAMP => Mac + Apache + MariaDB(MySQL) + PHP.


					 Para mudar a ordem de prioridade na qual os arquivos serão lidos caso seja passado somente
					 o diretorio na url pela requisição, podemos acessar no apache : config -> httpd.conf -> ctrl+f -> directoryindex
					 terá uma lista de arquivos que vão ser acessados linearmente caso se passe só o diretorio, é so mudar. Reinicie o apache 

							____________________________[PHP]________________________________


								  HYPERTEXT PREPROCESSOR - APLICAÇÕES DE SERVIDOR

					O INTERPRETADOR DO PHP PODE SER BAIXADO LIVREMENTE AO SER USADO EM PROJETOS.
					SUAS APLICAÇÕES SÃO:

					Script e linha de comando - Uma vez instalado o interpretador, o proprio shell do linux pode
					executar. Isso é muito util pra criar rotinas automatizadas no SO, ou do servidor, como por
					exemplo, uma rotina de backup de arquivos, de remoção de arquivos temporários, importação de arquivos 
					via ftp. 

					Aplicações desktop : php - gtk - Por exemplo o skype, etc. Essa parte ainda deixa a desejar, 
					ele não é uma linguagem pro lado do cliente, AINDA.

					Aplicações server-side (scripts) - Sua finalidade principal.

					Métodos:

					https://www.php.net/manual/pt_BR/indexes.functions.php


			____________________________[EMBUTINDO BLOCOS PHP EM PÁGINAS HTML]________________________


									TAG PADRÃO  - 
									<?php codigo ?> Vem habilitada - MAIS INDICADA
									<?php
										echo 'Utilizando a tag padrão';
									?>

									Tag de impressão -
									<?= codigo ?> Vem habilitada - Específica pra impressão de 
									conteudos dentro da página html
									imprime resultados sem precisar do echo. EX:

									<?= 
										'Tag impressão'; 
									 ?>


SE COLOCARMOS ESSA TAG AQUI NO CODIGO SEM HABILITAR ANTES, O PHP COMENTA ELA NO CODIGO PRA NÃO DEIXAR O USUÁRIO VÊ-LA
									Tag curta - <? codigo ?>  Vem desabilitada

				Para habilitar: No XAMPP na parte do apache vá em configurações>PHP.ini> Ctrl+F no bloco de notas buscando short_open_tag
				> A segunda chave com esse nome provavelmente terá o valor OFF, para ativar, mude para On.
				Depois é só reiniciar o apache.
									Asp Tag - <% codigo %> DEPRECATED

						ESSAS TAGS ESTÃO PARA O PHP COMO A TAG SCRIPT ESTÁ PARA O JAVASCRIPT.
						ELAS INDICAM UMA SESSÃO DE CÓDIGOS EM PHP.

						UM FATO INTERESSANTE, O QUE EU PRODUZIR DENTRO DESTAS TAGS NÃO SERÁ CONTABILIZADO
						PELO BROWSER COMO PHP, E SIM COMO HTML. O BACK END INTERPRETA A CODIFICAÇÃO, E DEVOLVE
						PRO BROWSER O PHP COMO HTML. O BROWSER NÃO TEM INTELIGENCIA PARA PROCESSAR O PHP. O SERVIDOR
						ONDE O PHP ESTÁ CONFIGURADO SIM. 

						CADA COMANDO DADO DEVE ESTAR SEGUIDO DE PONTO E VÍRGULA.

					CONSIDERANDO ESTE TRECHO:

					<body>

						<?php
							echo 'Utilizando a tag padrão';
						?>

					</body>

					O RESULTADO SERÁ:

					<body>
						"Utilizando a tag padrão"
					</body>

					PODEMOS NOTAR QUE ONDE O CODIGO FOI POSTO, O CONTEÚDO A SER IMPRESSO FICOU.


					COmandos:

					echo Joga algo no documento, seja string, valores, elementos html, etc. Suporta vários argumentos
					print Mesma função do echo, mas tem valor de retorno de 1 quando dá tudo certo e 0 quando dá erro.
					Suporta 1 argumento. Util pra saber se o conteúdo foi realmente impresso ou não. Ela imprime antes
					e depois retorna o valor, então é mais lenta que o echo.
					

					<?php
				 		echo 'Comando echo <br>';
				 		print 'Comando print <hr>'; // ou print("abc")
				 	?>

				____________________________[COMENTÁRIOS]________________________

				Uma linha:

				// comentario
				# comentario

				Mais de uma linha:

				/* codigo */

				____________________________[TIPAGEM E VARIÁVEIS]________________________

				Fracamente tipada: String, int, float, boolean, array;
				Apesar da tipagem forte, não há a opção de defini-la explícitamente na declaração de variável. A tipagem é dinâmica.
		Nomes de variáveis devem começar obrigatóriamente com $, sem espaços ou caracteres especiais, com excessão do _
				Case sensitive.
				Podemos atribuir ou não um valor no momento da sua criação.

				Se não atribuir nada a variável ela fica sem tipagem, inválida.

				Para por exemplo imprimir a variável em uma parte do documento:

				<?php
			 		$nome = 'Abc';
			 		$idade = '21';
			 		$fumante = false;
			 		$peso = 82.5;
			 	?>
			 	<h1>Ficha cadastral </h1>
			 	<br>
			 	<p>Nome:<?= $nome ?></p>
			 	<br>
			 	<p>Idade:<?= $idade ?></p>
			 	<br>
			 	<p>Fumante:<?= $fumante ?></p> // a saida de um valor false impresso diretamente no browser assume uma representação vazia
			 	<br>
			 	<p>Peso:<?= $peso ?></p>

			 	PARA IMPRIMIR UMA VARIÁVEL NA TELA, UTILIZAMOS UMA TAG PHP ONDE QUEREMOS QUE ELA SEJA IMPRESSA, 
			 	GERALMENTE, A TAG DE IMPRESSAO. 

			 	TAMBEM PODERIA SER:

			 	<p>Nome:<?php echo $nome ?></p>

			 	ou se a tag simplificada estiver ativa:

			 	<p>Nome:<? echo $nome ?></p>

			 	Ao longo do processamento o tipo da variável e seu valor podem mudar.

			 	Dá pra exibir qualquer coisa do php dentro de qualquer tag html.

			 			_______________________[CONSTANTES]___________________________


			 			Para declarar constantes usamos a função define. Ela pede 2 parâmetros:

			 			nome, valor

			 			EX:

			 			define('BD_URL','endereco_bd_dev');
				 		define('BD_USUARIO','endereco_bd_usuario');
				 		define('BD_SENHA','endereco_bd_senha');


			 			Boa prática: Caracteres maiúsculos em constantes.

			 			Ao chama-las não precisamos usar o $

			 			
 						echo BD_URL.'<br>'.BD_USUARIO.'<br>'.BD_SENHA;

			 			Variáveis constantes emitem erro ao ter seu valor mudado em tempo de execução, obviamente.
			 			São imutáveis.

			 			Util quando há necessidade de parametrizar informações de ambiente.

			 			Aparentemente não dá pra concatena-las usando as aspas duplas.

			 			____________________________[CONCATENAÇÃO]________________________



			 Operador .

			 Para concatenar usamos o operador ponto, seguido da variável(sem esquecer do dolar).
			 O operador . está para a concatenação no php, como o operador + está para a concatenação no java ou no js.
			 Sempre que quisermos concatenar algo com outro algo usamos o ponto na direção da concatenação.

			 Concatenação na frente:

			 echo $var.'Olá';

			 Atrás:

			 echo 'Olá'.$var;

			 No meio:

			 echo 'Olá'.$nome.'Pessoa';

			 Aspas duplas "

			 Se imprimirmos uma mensagem com ASPAS, podemos incluir a variável dentro da cadeia de caracteres, sem problemas.

			 Ex:

			 echo "Eu gosto de $gostos meu nome é $nome e tenho $idade anos";

			 O método com aspas duplas é mais lento, então só é recomendado caso se tenha a necessidade de exibir 
			 variáveis com texto internamente (se o texto for hardcode/estatico use aspas simples)


			 					_______________________[CONDICIONAL]________________________

			 					if, else, else if, if else if, enfim, aquela coisa



			 					     _____________________[OPERADORES]____________________


			 					Literalmente igual ao js. Exceto pelo diferente que tem duas representações:

			 					!= ou <>
			 					Igual == 
			 					Identico ===
			 					Diferente !=
			 					Diferente <>
			 					Não identico !==
			 					Menor <
			 					Maior >
			 					Menor igual <=
			 					Maior igual >=


			 					Em todo lugar que precisarmos chamar variáveis a chamamos considerando o $.

			 					OPERADORES LÓGICOS SÃO AQUELES QUE JA CONHECEMOS, E A XOR, EM ADIÇÃO.

			 					E - &&
			 					OU - ||
			 					XOR - XOR - (Essa é meio estranha pq eu so vi np php essa opção até agora, rs)
			 								- RETORNA VERDADEIRO SE UMA DAS EXPRESSÕES FOR VERDADEIRA E A OUTRA FALSA.
			 								obrigatoriamente uma ou mais precisam ser verdadeiras e as outras falsas ou vice versa.
			 								Em resumo, se a comparação resultar em valores diferentes entre
			 								si, ou seja, falso e verdadeiro ou verdadeiro e falso.
			 					! - Inverte o resultado

			 												[TERNÁRIO]


			 					<condição> ? true : false;

			 					Eu posso imprimir, se quiser, o resultado do teste no ternário diretamente no documento, com
			 					a tag de impressão:

			 					<?=
						 			$cartao_usuario ? 'SIM' : 'NÃO';
						 		?>

						 		Há a possibilidade de usar operadores ternários encadeados, mas isso não é recomendado.



						 		_______________________[SWITCH]__________________________

						 		DEFINE O FLUXO A SER SEGUIDO CONFORME O VALOR DA VARIÁVEL TESTADA.
						 		PRECISA DO BREAK APOS CADA OPÇÃO,
						 		pode omitir o DEFAULT, nesse caso caso nenhuma condição seja atendida, nada acontece.
						 		faz comparação entre não identicos - o que significa que o tipo não é relevante. 

						 				_____________________[CASTING]__________________


						 Para castar uma variável de um tipo para outro, colocamos a esquerda da variavel/valor
						 parenteses, e dentro deles o tipo da variável pra qual queremos castar:

						 Ponto flutuante: (float), (double), (real) - representam a mesma coisa
						 string: (string)
						 int: (int), (integer)
						 boolean: (boolean), (bool)

						 De float para int, o int aproveita somente a parte inteira do valor.
						 A representação booleana de uma string válida é 1, então castando uma string que contenha caracteres, 
						 o retorno é sempre 1, castando uma string que seja um caractere vazio, a representação é false, mas o 
						 false não tem representação, então não retorna nada, o false é uma representação vazia.

						 				_____________[OPERADORES ARITMÉTICOS]___________


						 adição: +
						 subtração: -
						 multiplicação: *
						 divisão: /
						 módulo: % - retorna o resto inteiro da divisão
						 potência: **

						 ()- Pra quando for necessário realizar uma operação aritmética antes de qualquer outra operação.

						 ex:

						 echo 'Resultado da soma é'.($num1+$num2)

						 ATRIBUIÇÃO:

						 =, +=, -=, /=, *= ,%=;

						 Incremento decremento:

						 pré:

						 ++$var
						 --$var

						 pós:

						 $var --
						 $var ++

						 		_____________________[FUNÇÕES]__________________


						Com a mesma sintaxe das funcoes originais do javascript.

						function nomeFuncao($params){
							//logica
						}

						nomeFuncao();

						nome das funcoes recomendadas: verbo-substantivo em estilo camelCase

						os parâmetros são tratados como variáveis, então levam também o simbolo de $

						tipo void, ou tipo com retorno (o tipo do retorno depende do valor do retorno, 
							fracamente tipado)

						Assinatura da função: quantidade de argumentos no método(como não tem um tipo pré
							definido no parametro até que um tipo seja atribuido a ele, através da inferencia
							de um valor a ele, somente a quantidade de parametros conta, ao contrario de outras
							linguagens.)

			 			 _________________[FUNCOES NATIVAS STRING]___________________

			 			strtolower($texto) - transforma string em lovercase
			 			strtoupper($texto) - transforma string em uppercase
			 			ucfirst($texto)    - (uppercase first) transforma string em capitalize
			 			strlen($texto)     - conta quantidade de caracteres na string

			 						substitui isso    por isso      nisso
			 			str_replace(<procura por>, <substitui por>, $texto) - substitui uma cadeia de caracteres em uma string por outra
			 			cadeia de caracteres. - É CASE SENSITIVE. Essa funcao é boa pra mudar a representação numérica de um numero que varia
			 			de país pra pais. Internamente numeros são tratados como ponto, enquanto que a representação visual, ao menos no brasil
			 			usa virgula. Podemos usa-la pra substituir o ponto pela virgula. Também podemos formatar datas, etc.
			 			
			 			substr($texto, <posicao inicial>, <qtd de caracteres>) Retorna parte de uma string. <qtd de caracteres> quantidade a partir e 
			 			inclusive da <posicao inicial>. Útil para, por exemplo quando não queremos mostrar o titulo de uma noticia inteira, podemos cortar
			 			uma parte do texto e colocar "truncado" com reticencias, para indicar que aquele texto continua.

			 			[CRIPTOGRAFIA]:

			 			De Base-64 para String:

			 			$str = 'VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==';
			 			echo base64_decode($str);
			 			--------------------------------
			 			output:
			 			This is an encoded string




			 			De String para Base-64:
			 			$str = 'This is an encoded string';
						echo base64_encode($str);
						-----------------------------
						output:
						VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==


						__________________[FUNCOES NATIVAS MATEMATICAS]__________________

						ceil($numero) - Arredonda o valor pra cima
						floor($numero) - Arredonda pra baixo
						round($numero) - Arredonda com base nas casas decimais - Se está mais proximo do valor quando arredondado pra cima
						arredonda pra cima, se está mais proximo do valor quando arredondado pra baixo, arredonda pra baixo.
						fração entre 0 - 4 arredonda p baixo, maior ou igual a 5 pra cima.
						
						rand()         - Gera um número aleatório. - Quando não se passa um parâmetro os valores gerados vão de 0 ao valor maximo
						provido pelo SO.

						rand com limite de N a N:
						rand(10, 20) - Gera numeros aleatorios entre 10 e 20 incluindo 10 e 20.

						getrandmax() - Devolve o número aleatorio máximo que o so pode gerar.
						sqrt($numero)  - Retorna a raiz quadrada do numero.
						Se o numero for negativo ele retorna NAN. Para checar se o número é nan temos que usar uma função nativa
						pq se ele for, só vai avisar que é NAN do lado do cliente, do lado do servidor, a raíz de um numero negativo
						é qualquer outra coisa(por isso um if não funciona), a função é: is_nan(num);

						is_nan($valor) - Checa se o valor é um NAN (not a number) - o php retorna NAN pro lado do cliente quando um CÁLCULO
						envolve um caractere, um char, ou um valor não numérico(caso de uma raíz negativa, divisão por 0, multiplicação de 0 por infinito, 
							infinito x infinito etc. Nesse caso o php dá um warning alem disso).

						number_format(numero, qtdCasasDecimais) - define quantas casas decimais o numero vai mostrar:

						pow(2, 8) - (2 elevado a 8) Retorna o resultado do primeiro numero elevado ao segundo

						abs($numero) - Valor absoluto de um número (deixa ele positivo)

					 				_____________________[DATAS]___________________

					Excelente filtro de registros, útil pra registrar junto a acontecimentos sistêmicos.

					(por conta do locale os dias da semana são representados em inglês, mas tem como alterar isso).
					Recuperando a data atual:

					date(formato) -> Onde formato se refere a formatação do retorno da data.

					Para retornar, por exemplo, dia do mês, mês do ano, e dia do ano (abreviado):

					date('d/m/y')
					date('y/m/d')

					(Essa barra é estranha mas é só a representação de um separador, o que importa são as letras passadas
						como parâmetro). Pode ter espaço, barra, dois pontos, etc entre as letras-parametro. 

					

					PARÂMETROS:

					Dias :

					d : dia do mês entre 01 e 31
					D : dia da semana - Retorna a String referente ao dia da semana, abreviadamente. - Thu
					j : dia do mês sem 0 a esquerda - 1 a 31
					J : representação textual do dia da semana sem abreviar - Sunday
					N : representação numérica ISO-8601 do dia da semana - 1 a 7
					S : representação abreviada dos sufixos ordinais referentes aos dias da semana em ingles -st, nd
					w : representação numérica do dia da semana - de 0 a 6
					z : dia do ano - de 0 a 365

					Semana	---	---
					W	Número do ano da semana ISO-8601, começa na Segunda (adicionado no PHP 4.1.0)	
					Exemplo: 42 (a 42ª semana do ano)
					
					Mês	---	---
					F	Um representação completa de um mês, como January ou March	January até December
					m	Representação numérica de um mês, com zero à esquerda	01 a 12
					M	Uma representação textual curta de um mês, três letras	Jan a Dec
					n	Representação numérica de um mês, sem zero à esquerda	1 a 12
					t	Número de dias de um dado mês	28 até 31
					Ano	---	---
					L	Se está em um ano bissexto	1 se está em ano bissexto, 0, caso contrário.
					o	Número do ano ISO-8601. Este tem o mesmo valor como Y, exceto que se o número da semana ISO (W) pertence ao anterior ou próximo ano, o ano é usado ao invés. (adicionado no PHP 5.1.0)	Exemplos: 1999 ou 2003
					Y	Uma representação de ano completa, 4 dígitos	Exemplos: 1999 ou 2003
					y	Uma representação do ano com dois dígitos	Exemplos: 99 ou 03
					Tempo	---	---
					a	Antes/Depois de meio-dia em minúsculo	am or pm
					A	Antes/Depois de meio-dia em maiúsculo	AM or PM
					B	Swatch Internet time	000 até 999
					g	Formato 12-horas de uma hora sem zero à esquerda	1 até 12
					G	Formato 24-horas de uma hora sem zero à esquerda	0 até 23
					h	Formato 12-horas de uma hora com zero à esquerda	01 até 12
					H	Formato 24-horas de uma hora com zero à esquerda	00 até 23
					i	Minutos com zero à esquerda	00 até 59
					s	Segundos, com zero à esquerda	00 até 59
					u	Microssegundos (adicionado no PHP 5.2.2). Note que a função date() sempre gerará 000000, já que aceita um parâmetro integer, enquanto que DateTime::format() possui suporte a microssegundos se DateTime foi criado com microssegundos.	Example: 654321
					Fuso horário	---	---
					e	Identificador do fuso horário (adicionado no PHP 5.1.0)	Exemplos: UTC, GMT, Atlantic/Azores
					I (i maiúsculo)	Se a data está ou não no horário de verão	1 se horário de verão, 0, caso contrário.
					O	Deslocamento ao Horário de Greenwish (GMT) em horas	Exemplo: +0200
					P	Deslocamento ao Horário de Greenwish (GMT) com dois pontos entre horas e minutos (adicionado no PHP 5.1.3)	Exemplo: +02:00
					T	Abreviação do fuso horário	Exemplos: EST, MDT ...
					Z	Deslocamento, em segundos, do fuso horário. O deslocamento para fusos horários a oeste de UTC sempre será negativa, e para aqueles à leste de UTC sempre será positiva.	-43200 até 50400
					Data/Hora completa	---	---
					c	Data ISO 8601 (adicionado no PHP 5)	2004-02-12T15:19:21+00:00
					r	» RFC 2822 formatted date	Exemplo: Thu, 21 Dec 2000 16:01:07 +0200
					U	Segundos desde Unix Epoch (January 1 1970 00:00:00 GMT)

					Se a data/hora estiverem erradas mesmo com a data do sistema operacional atualizada, pode ser que o timezone
					seja o culpado. Neste caso, a instalação do php vem com o timezone de um país diferente setado(no meu caso Europa/Berlim)
					, precisamos mudá-lo. Podemos fazer isso configurando no arquivo php.ini no servidor, ou com uma função, em tempo de processamento(geralmente
						quando não temos acesso ao servidor).

					Para saber em qual timezone estamos basta executar a função:

					date_default_timezone_get();

					Para mudar usamos o identificador do timezone identificado na documentação.
					O timezone do brasil é:
					'America/Sao_Paulo'

					assim

					date_default_timezone_set('America/Sao_Paulo')

					Para configurar o timezone no servidor:

					Apache -> Config -> php.ini -> timezone 4x -> Altere o valor padrão para America/Sao_Paulo


					PADRÕES COMPUTACIONAIS SÃO EM AMERICANO(NO BANCO DE DADOS).


					Para converter uma data em segundos:

					strtotime(data); data-> formato americano yyyy-mm-dd

					Retorna a quantidade de segundos entre 01/01/1970(inicio da era unix) e a data(não é milissegundos)

					Pra converter de segundos para dias:

					$tempo_dias = $segundos / 86400;

							___________________________[ARRAY]__________________________


							ARRAY SEQUENCIAL:
							Criando array:

							$lista_frutas = array(item, item1, item2);
							ou
							$lista_frutas = [item1, item2, item3];
							ou
							$lista_frutas = [];

							Para colocar um novo valor no array, durante a execução:

							$lista_frutas[]='Item X';

							O php vai dinamicamente alocar um espaço novo para o item no fim
							da lista.


							Mostrando valor em um indice N:

							echo $lista_frutas[1];

							Associando valor em um indice N:

							$lista_frutas[N] = 'Bolinho';



							ARRAY ASSOCIATIVO:

							Criamos o array do mesmo modo que o anterior mas de maneira não sequencial
							onde os indices não crescem. Aqui, os indices podem ser valores, caracteres
							ou strings, definimos o indice de cada elemento do array EXPLICITAMENTE, através
							de pares chave/valor, onde chave é o índice do elemento e valor é o elemento em si.
							Os associamos desta forma:

							'chave' => 'valor'

							ex:

								$lista_bolinhos = ['a' => 'Bolinho', 'x' => 'Banana', 1 => 'Maçã'];

							E para mostrar o indice:

								$lista_bolinhos['x'];

							Associando valor em um indice N:

								$lista_frutas[N] = 'Bolinho';

							Adicionando dinamicamente itens no final de um array:

							$lista_frutas[] = $valor;




							ARRAY MULTIDIMENSIONAL:

							Basta atribuir ao array num x indice, um outro array:

								$lista_coisas = []
								$lista_coisas['x'] = [];

							Colocando um array dentro de outro por referencia:

							$array1 = ['Banana','Maçã'];
							$array2 = ['Bolo','Suco'];

							$array3 = [$array1, $array2];
							$array3 = ['x' => $array1, 'y' => $array2];

							MÉTODOS DE ARRAY:

							in_array('valorprocurado', array); - Retorna 1 (true) caso o elemento esteja no array e vazio (false) caso não
		
							array_search('valorprocurado', array) - Retorna o indice do valor procurado caso o valor exista e null caso não exista.
							(se precisar comparar o retorno dessa função com null pra saber se o indice retornado é valido tem que usar os operadores
								identico ou não identico. null internamente é tratado como false, ou seja, 0, portanto, se o valor procurado estiver
								no indice 0 e comparar o indice 0(que foi retornado), o php vai apontar que não existe).
							
							MÉTODOS DE ARRAY:

							- is_array($array) - Retorna true se o parametro passado for um array
							
							- array_keys($array) - Retorna todos os valores do array (não imprime sozinho, retorna as chaves
								para uma variável ou função(use var_dump ou print_r))

							- sort(array) - Ordena o array, retorna true caso o sort tenha sido bem sucedido e false(vazio) caso não seja bem sucedido.
							O método rearranja os valores do array pra os indices, linearmente. Dá pra ordenar arrays multidimensionais também,o método
							reordena todos os arrays de dentro. 
							O sort modifica os indices do array passado por parametro. Portando se um array multidimensional é passado o array que leva 
							os outros tem seus indices alterados(em caso de indices não numéricos, ou não lineares). No caso de um array só, o mesmo acontece.

							- asort(array) - Atua sobre o array passado dando sort, mas ordena somente pelo valor no indice, não o proprio indice, eles são chaves levadas
							junto com seu par valor na ordenação. Também não altera os índices não numéricos.

							- count($array) - Conta a quantidade de elementos de um array.

							- array_merge(array1,...,arrayN) - Funde um ou mais arrays em um. Retorna um novo array. Útil para manipular dados mais facilmente
							onde diversos arrays vem de diversos locais, mas as informações juntas também fazem sentido.

							- explode(delimitador, $string) - Quebra uma string em uma substring a cada delimitador encontrado(pode ser este uma barra, um número, uma virgula..)
							onde cada substring é posta em um índice de um array que é retornado. Pode ser usado, por exemplo, pra transformar uma data brasileira em americana.
							O delimitador na string é eliminado.
							Ex:

							$data = '25/01/2020';
							echo $data;
							$retorno = explode('/', $data);
							 echo "<pre>";
								var_dump($retorno);
								echo count($retorno);
							echo "</pre>";
							echo "Nova data:".$retorno[2].'/'.$retorno[1].'/'.$retorno[0];

							- implode(glue, pieces) - Pega os índices de um array e implode em uma String, juntando os indices.
							Recebe como parametro o separador que haverá entre cada um dos indices implodidos na nova string e o array.
							Retorna uma string.

							Posso combinar o explode e o implode pra tirar por exemplo, barras de uma string, e colocar  traços.
							O produto inicial é uma string, e o resultado final também. Mas no meio do processo é gerado um array.

							$data = '25/01/2020';
							$retorno = explode('/', $data);
							$retorno2 = implode('-', $retorno);

							__________________[MÉTODOS DE DEBUG]_______________

							Testei imprimindo array, neste caso, mas deve servir pra mais.
							Testam o tipo de dado e o que está ali. No caso de array retorna
							cada um dos indices, cada um com seu respectivo tipo e conteudo.

							var_dump($array); - Retorna tipo, indice, e conteudo(tamanho do conteudo tb). - nao precisa de echo
							$variavel = 'abc';
							var_dump($variavel)

							$lista_bolinhos = ['a' => 'Bolo de morango', 'x' => 'Bolo de chocolate', 1 => 'Bolo de banana', 50 => 30];
							var_dump($lista_bolinhos);

							print_r($array) - retorna indice e conteudo; - nao precisa de echo


							____________________[CHECAGEM DE VALOR INVÁLIDO]_____________________

							is_nan(&valor) - Checa se o valor é um not a number

							is_null($valor) - Checa se o valor é null - E SOMENTE NULL
							echo is_null($funcionario) ? 'É null' : 'Não é null';


							empty($valor) - Checa se o valor é vazio = ''.(também funciona se os valores forem false ou null)




							Um resuminho:

							O valor nulo é vazio para função empty e para a is_null
							O valor vazio é vazio para a função empty e não é nulo para a função is_null
							O valor false é também vazio para a função empty mas não é nulo para a funcao is_null

							Portanto, is_null só retorna true quando o valor recebido é nulo E NENHUM OUTRO
							empty retorna true quando os valores são vazios nulos ou falsos.
							is_null só funciona para valores null, empty funciona para todos ('' false null)

							Essas regras só valem usando as funções. Por comparação as coisas ficam
							muito loucas.

										_____________________[LOOPS]______________________


							while(condição){
								//logica;
								condição de parada;
							}

							do{
								//logica;
								condição de parada;
							}while(condicao);

							for($var ; condicao; condicao_parada){

							}

							Foreach: para arrays e objetos

							foreach($array as $valor){
								//logica
							}

							ou

							foreach($array as $chave => $valor){
								//logica
								echo "$chave $valor";
							}


							Comandos de alteração do fluxo normal do laço:

							break - para a iteração
							continue - pula a lógica interna depois desse comando e pula a próxima iteração



						__________________________[REQUEST]_________________________

	Um request é como uma cartinha, o cabeçalho é o action e o corpo é o método, get/post

	action - colocado como atributo numa tag form de html, diz pra onde aquele formulario será submetido 
	quando o botão submit for pressionado. O próprio browser encapsula as informações do formulario e as
	dispara por meio de uma requisição, que podem ser recuperados do lado do servidor.
	"action é o destino do submit de um formulário".

	GET: (get é um dos metodos pelo qual o formulário pode ser submetido pro action).
	No get os dados da requisição vao juntos com a url por parâmetro. Para isso, no form, colocamos
	method: get(ou nada, já que get é o padrão). O navegador encapsula os dados do formulário em suas respectivas tags
	name e as passa como parametro para a url.
	Para recuperar esses parâmetros do lado do servidor usamos a super global $_GET (é case sensitive), que é um array.
	Cada parâmetro encaminhado na url é um índice no get, o nome da tag name(o nome dos parametros passados por url são
		também o nome dos indices). Ou seja, os indices da super global get são definidos com base dos nomes criados nas
	tags inputs, que são passadas como parametro para a url. Bem, isso não é seguro em determinados casos, para isso, existe
	o post.

	POST:(post é um dos metodos pelo qual o formulário pode ser submetido pro action). No get os dados de formulário são anexados A PROPRIA REQUISIÇÃO, retirando os dados da url. Para isso colocamos no
	form: method="post". Agora todos os dados serão encapsulados numa fichinha que pode ser vista em: network -> arquivo -> headers -> form data (la embaixo)
	Assim como a $_GET o $_POST também é um array cujos indices leva o nome das tags encapsuladas e enviadas via requisição.


	Adendos:

	Ao acessar diretamente uma página que só deveria ter sido acessada depois de se ter feito o metodo get ou post, haverá um erro
	por que a variável (a depender da logica que fizemos né) get ou post não receberão nada. 
	Se não passarmos o tipo de requisição ele é automaticamente GET.

	As tags name derivadas das inputs tem que estar presentes em cada uma, mesmo dentro do formulário.
	Assim, do lado do front end o nome das tags recebem o conteudo da input cujos dados serão enviados junto com o disparo
	da request.
	SE NÃO HOUVEREM TAGS NAME, AO ENVIAR OS DADOS PARA O ACTION, TANTO O GET QUANTO O POST PEGAM UM ARRAY VAZIO!!!!!

	o nome nas tags name serão referentes aos índices de onde estarão armazenadas as informações da input, dentro
	de um array no php.

	O tipo de método deve estar explicito na tag FORM ou ele é get. 
	Para os dados serem SUBMETIDOS para a action o input deve ser do tipo SUBMIT e ele deve estar dentro do form.

	



	QUALQUER PARÂMETRO PASSADO PELA URL PODE SER PEGA COM GET, CONTANTO QUE O ARQUIVO EM QUESTÃO TENHA EXTENSÃO .PHP
	PARA ISSO BASTA FAZER, COM O GET, REFERENCIA AO NOME DAQUELE PARAMETRO, ASSIM: $_GET['paramDaUrl']

	_________________________[RESPONSE]_________________________

	A resposta dada ao cliente é o resultado da interpretação do script php.
	Depois de uma request, o servidor a recebe e a submete para o script php que dá um retorno em html ao apache.
	tudo isso por meio de uma comunicação chamada cgi. Despois disso ele devolve o html para o cliente.



							______________[AUTENTICAÇÃO]_____________


	session_start();
	$aut = false;

	$usuarios = array(
		array('email' => 'adm_teste@gmail.com.br', 'password' => 'admin'),
		array('email' => 'user@teste.com.br', 'password' => '1234')
	);

	foreach ($usuarios as $value) {
		if ($value['email'] === $_POST['email'] && $value['password'] === $_POST['password']) {
			$aut = true;
		}
		#echo $value['email'].'<br>'.$value['password'].'<br>';
	}

	if($aut){
		$_SESSION['autenticado'] = 'yes';
		header('Location: home.php');
		//caso passe no teste é redirecionado pra a página principal sem erro e a sessão leva o parametro de autenticado
	}
	else{
		$_SESSION['autenticado'] = 'no';
		header('Location: index.php?login=error');
			//caso não, leva o parametro de erro
	}

				TAMBÉM DA PRA FAZER ISSO AQUI AO INVES DE EXPLICITAR O POST SEMPRE:

							$login = $_POST['login'];
							$senha = $_POST['senha'];

	Se ao compararmos a senha e email pegas por post/get os dados não forem compativeis, para podermos mostrar
	no formulario de login que algum dado foi posto errada, podemos utilizar a função header. ELa força o redirecionamento
	para uma determinada página.Do mesmo modo, podemos redirecionar o fluxo para uma outra página caso os dados sejam compativeis
	Num caso de erro, por exemplo, podemos encaminhar a url do formulario de login, juntamente com um parâmetro qualquer, que indique um
	erro, que o front end pode tratar.

	header('Location: url.php?param=seila')

	Em um caso de erro, por exemplo:

	header('Location: index.php?login=error')

	Depois, no index, resgatamos o valor do parametro por post, dentro do html, assim:


	 <?php
	    if(isset($_GET['login']) && $_GET['login'] === 'error'){
	    
	  ?>
	     <div class="text-danger"> Usuário ou senha inválidos</div>
	 <?
	    }
	 ?>

	 Na parte lá encima de validar login, dentro de cada página (la no topo), verificamos se
	 o array de sessão está não está setado e se o valor no indice autenticado é falso, pois se
	 for, redirecionamos para a página de login com erro. Esse código pode estar em um arquivo 
	 separado e ser chamado em todas as páginas usando require_once().

	 Em todas as páginas que dependerem de autenticação:

	 <?php
		session_start();
		if(!isset($_SESSION['autenticado']) || $_SESSION['autenticado'] === 'no'){
		  header('Location: index.php?login=error_auth');
		}
	?>

	ou

		<?php
			require_once('valida_acesso.php');// usamos require once porque se essa instrução não achar o arquivo
		?>									// nao podemos prosseguir, a autenticação é essencial.  e once porque
										// so precisamos nos autenticar uma vez.

	Onde no arquivo valida_acesso.php consta o código acima.

	Depois checamos no index se o parametro error_auth do indice login retornou e se o array de sessão ali está setado,
	se sim incluimos uma div indicando erro:


                <?php
                if(isset($_GET['login']) && $_GET['login'] === 'error_auth'){
                
                ?>
                  <div class="text-danger"> Faça login para continuar</div>
                <?
                  }
                ?>

    Eu fiz isso aqui: 
    Caso a sessão já tenha sido iniciada, não tem porque, ao voltar para a página de login, você poder fazer login de novo.
    O correto seria, caso você já esteja logado(caso a sessão em autenticado esteja setado como true, ao entrar na página de login
    	você ser redirecionado para a página principal, a home)


 <?php
  session_start();
  
  if(isset($_SESSION['autenticado']) || $_SESSION['autenticado'] === 'yes'){
    var_dump($_SESSION['autenticado']);
    header('Location: home.php');
  }
?>

Para fazer logoff, temos que ter um botão cuja href seja um arquivo .php que contenha a lógica para efetuar o logoff.

Para isso, é simples, podemos dar unset($_SESSION['index']) nos index que guardam os valores da sessão, ou simplesmente
session_destroy() (isso tudo, claro, depois de dar um session_start()). Como falado na parte do session, só é possivel
visualizar que a sessão e seus dados foram excluidos depois de uma requisição. Portanto, temos que redirecionar o fluxo para
outra página, neste caso, o index é muito conveniente.

FIca assim:

Dentro do menu:

 <nav class="navbar navbar-dark bg-dark">
      <a class="navbar-brand" href="#">
        <img src="logo.png" width="30" height="30" class="d-inline-block align-top" alt="">
        App Help Desk
      </a>
      <ul class="navbar-nav">
        <li class="nav-item"></li>
          <a href="logoff.php" class="nav-link">Sair</a>// Esse é o botão
      </ul>
 </nav>

O script:

<?php
	session_start();
	if (session_status() === PHP_SESSION_ACTIVE) {
		session_destroy();
		header('Location: index.php');
	}
?>

				______________________________[SESSION]___________________________________

			Uma sessão é um espaço de memória do lado do servidor onde podem ser armazenadas informações
			que conectem a instancia da aplicação no servidor com a instancia da aplicação do lado do cliente. Essas informações
			são transitadas durante a requisição pelo cliente através de um cookie ou url, pro servidor para que a linguagem de pro
			gramação tenha condições de recuperar essa informação e acessar aquele espaço de memoria dedicado pra aquela instâcia do
			browser em espacial.

			Basicamente, ao usar o start_session() iniciamos uma instancia no servidor com um id unico que corresponde ao cliente que logou
			nessa instancia. Podemos setar diversas informações do usuário usando a super global $_SESSION ex($_SESSION['carrinho'] = array('bolinho', 'seila'))
			(só temos acesso a essa super global depois de usar o start_session() )Mesmo com a session tendo sido definida em um script podemos resgatá-la em qualquer outra página apenas fazendo referencia a ela.
			Como esta session terá um id unico, caso quisermos que aquela pagina so seja acessada depois de um login, a session deve começar
			logo no script de autenticação do login. Assim, depois verficamos na pagina pra qual somos redirecionados depois do login, se a sessão está ativa, caso não
			podemos jogar o usuário para fora dali.

			Os dados criados em uma sessão estão disponiveis para todos os scripts da aplicação que forem acessados por aquela instância do navegador(entende-se pelo proprio navegador cliente)
			A transação de dados entre os scripts é feita através de um cookie que leva o id unico do navegador. Então quando a requisição é feita a partir dessa instancia do navegador o cookie
			é transitado na requisição http, e do lado do servidor a partir do id carregado no cookie temos condições de acessar áquela sessão especifica dedicada a esse browser.

			O cookie tem um id unico usado para acessar a sessão.

			Cada sessão php dura 3 horas. Então mesmo que fechemos a instancia do browser o cookie ainda permanece ali SEMPRE e será transitado pela requisição. Enquanto a sessão ainda existir do lado do servidor
			o cookie nos será útil, uma vez que o id do cookie é usado para acessar a sessão persistente no servidor.

			"Pra este browser eu(servidor) iniciei uma sessão com x id pra sempre que ele precisar de algum dado meu, me mostrar seu id, que se válido lhe renderá os dados pedidos
			, e outro servidor iniciou outra sessão para este mesmo browser com outro id que é usado pra o mesmo fim, uma prova de que ele é um cliente com uma area unica que ele pode acessar
			apresentando o id"


			Pense assim: Eu, uma unica pessoa, posso ter duas sessões reservadas com uma identificação diferente para um hotel, e para um restaurante.
			O restaurante me forneceu um id quando eu o paguei, a partir desse id posso transitar livremente no restaurante. O mesmo acontece com o hotel
			me deram um cartão com um id onde toda vez que precisar dos serviços dele, eu o mostro.

			Do lado do servidor, uma região de memoria será dedicada para uma determinada instancia do navegador, sempre que essa instancia realizar uma requisição 
			o identificador unico dessa instancia do lado do servidor será encaminhado na requisição e a propria linguagem de programação é inteligente para recuperar essa
			identificação e liberar o acesso a essa sessão exclusiva para o navegador, permitindo que lá, na interpretação dos scripts do lado do servidor as variaveis dessa sessão sejam recuperadas, de modo
			que os scripts sejam processados, e uma pagina html seja devolvida ao navegador.

			Enfim, uma vez tendo iniciado a sessão, na nossa parte de autenticação, podemos fazer a verificação. Se o email e a senha forem compativeis com a dos formularios
			então inserimos um registro(indice) no array session dizendo que o usuario está autenticado. Depois é só resgatar o valor desse mesmo indice e ver se é compativel com
			o necessario para estar autenticado, se sim, a página é exibida.

			ADENDO:

			MESMO TENDO CRIADO A SESSÃO, EM TODAS AS PÁGINAS PROTEGIDAS EU TENHO QUE EXECUTAR O start_session() TODA VEZ ANTES DE UMA SAIDA DE DADOS.
				
			
			Métodos do $_SESSION

			session_start() - Usada sempre que queremos dar uma inicio a uma sessão, usando esse comando estamos habilitados a manipular
			a super global session.


			session_destroy() - Destrói todos os índices e dados de uma sessão. Um adendo, ela funciona de forma parecida com o pós decremento
			: ela destroi todos os dados da sessão, mas isso só será visível após uma nova requisição. 
			A sessão morre, o espaço de memória reservado para aquele cliente é excluído.


			session_unset() - Apaga todos os dados da sessão atual .Geralmente session_unset() é usado antes de session_destroy() 

			unset($_SESSION['index']) - É originalmente uma função de array, mas serve para isso tambem. Apaga um X index(no caso, um dado da sessão.)
 

			session_status() - Verifica o status da sessão. Possiveis valores retornaveis:

			PHP_SESSION_DISABLED = 0
			PHP_SESSION_NONE = 1
			PHP_SESSION_ACTIVE = 2   / cada um desses valores é representado por uma constante interna, então podem ser usadas em qualquer parte.
			

			É útil usar esse comando no script que executa pela primeira vez o início da sessão(na pagina que autentica o login, por exemplo).

			if (session_status() !== PHP_SESSION_ACTIVE) {//Verificar se a sessão não já está aberta.
			  session_start();
			}// visto tudo o que fizemos, nem precisa.


			SESSION GERALMENTE É USADO QUANDO PRECISAMOS RESGATAR EM VARIAS PAGINAS DA APLICAÇÃO, A MESMA INFORMAÇAO.



			PARA DESTRUIR A SESSÃO CASO O USUÁRIO FIQUE OFFLINE MAIS DOQ X MINUTOS:

			if (isset($_SESSION['ultima_atividade']) && (time() - $_SESSION['ultima_atividade'] > 3600)) {

			    // última atividade foi mais de 60 minutos atrás
			    session_unset();     // unset $_SESSION  
			    session_destroy();   // destroindo session data 
			}
			$_SESSION['ultima_atividade'] = time(); // update da ultima atividade
					_____________________[IMPORTAÇÃO DE SCRIPTS]_________________

						[INCLUDE]

						Útil para reaproveitamento, funciona como o import do javascript.
						Para isso usamos as tags php na posição que queremos que o script
						importado atue(caso ali no script tenha, por exemplo, um retorno.).

						import(inclusão):

						<?php
							include("url_script.php");

							ou

							include "url_script.php"
						?>

						Para comparar includes:

						<?php
						// won't work, evaluated as include(('vars.php') == TRUE), i.e. include('')
						if (include('vars.php') == TRUE) {
						    echo 'OK';
						}

						// works
						if ((include 'vars.php') == TRUE) {
						    echo 'OK';
						}
						?> #não pode levar o parenteses na comparação.


						1 Podemos usar isso para não ter que ficar replicando não só logica como
						também html(como menus).

						2 Quando um arquivo é incluído, o código herda o escopo de variáveis da
						linha que a inclusão ocorrer. Qualquer variável disponível no arquivo 
						que incluiu estará disponível no arquivo incluído, daquela linha em diante.
						Entretanto, todas as funções e classes definidas no arquivo incluído estarão 
						no escopo global.

						3 Resumindo, as variáveis e funções do script importado vem agora para o escopo
						da função que o importou.

						4  Não é obrigatório o uso dos parenteses (é ate melhor, pois os ifs só aceitam assim)

						5 O INCLUDE GERA UM WARNING QUANDO HÁ ALGUM ERRO OU ELE NÃO ENCONTRA O ARQUIVO A
						INCLUIR. O PROCESSAMENTO CONTINUA.

						[REQUIRE]

						A diferença principal do include pro require é que ele, ao contrario do include
						lança uma exceção e trava a execução em caso de erro ou o arquivo não ser encontrado.
						Um erro fatal.

						require("url_script.php")

						ou 

						require "url_script.php";

						[INCLUDE ONCE]

						Como as variáveis do script importado se tornam do escopo global do script que o
						importa, se o script for incluido duas vezes, as variáveis serão sobrescritas, e 
						isso não é interessante. O require once não deixa isso acontecer. Caso o arquivo 
						seja incluido uma vez, qualquer outra inclusão é desconsiderada. 

						include_once("url_script.php");

						ou 

						include_once "url_script.php";

						[REQUIRE ONCE]

						Como as variáveis do script importado se tornam do escopo global do script que o
						importa, se o script for incluido duas vezes, as variáveis serão sobrescritas, e 
						isso não é interessante. O require once é parecido com o include once e seu pai, 
						require. Gera um erro fatal caso não encontre o arquivo, e só deixa ele ser requerido
						uma unica vez, evitando sobreposição de variáveis do escopo global.

						require_once("url_script.php");

						ou 

						require_once "url_script.php";

		___________________________ [ARQUIVOS E MANIPULAÇÃO DE ARQUIVOS] _______________________________


		Para escrevermos num arquivo, precisamos abri-lo, e após a escrita fechá-lo.

Abrir arquivo de texto: fopen('1caminho/nome_arquivo.extensão','2parametro');
1 - Caso o nome do arquivo não exista, o arquivo é criado.
2 - O parâmetro é o tipo de manipulação que desejamos fazer com o arquivo, alguns:

r: Somente leitura. [Retorna um erro caso o arquivo não exista e não tenta cria-lo.]

r+ : Leitura e escrita, posiciona o ponteiro no começo do arquivo.[Retorna um erro caso o arquivo não exista e não tenta cria-lo.]

w : Abre o arquivo para apenas escrita. Assim coloca o ponteiro do arquivo no começo do arquivo e vai diminuindo(truncando)
o tamanho do arquivo para zero. [Se o arquivo não existe, tenta criá-lo].
====Tenha cuidado pois o modo ‘w’ coloca o ponteiro de escrita no início do arquivo. Portanto se o arquivo já existir,
 ele deletará todo o conteúdo!====

w+ :Abre o arquivo para leitura e escrita. Assim coloca o ponteiro do arquivo no começo do arquivo e vai diminuindo(truncando)
o tamanho do arquivo para zero. [Se o arquivo não existe, tenta criá-lo].

a: Abre para somente para escrita somente; coloca o ponteiro do arquivo no final.
[Se o arquivo não existir, tenta criá-lo]. 
=>(o melhor, já que se o arquivo existir, só adicionaremos novas linhas 
final). [Eu uso esse]
a+: Abre o arquivo para leitura e escrita; coloca o ponteiro do arquivo no final.
[ Se o arquivo não existir, tenta criá-lo].
=>(o melhor, já que se o arquivo existir, só adicionaremos novas linhas 
final).

x: Cria e abre o arquivo para escrita somente; coloca o ponteiro no início do arquivo.
Se o arquivo já existe, a chamada a fopen() irá falhar, retornando FALSE, gerando um erro nível E_WARNING. 
[Se o arquivo não existe, tenta criá-lo.
Esta opção é suportada no PHP 4.3.2 e posteriores, e somente funciona em arquivos locais.]

x+: Cria e abre um arquivo para escrita e leitura; coloca o ponteiro do arquivo no início.
Se o arquivo já existe, a chamada a fopen() irá falhar, retornando FALSE, gerando um erro nível E_WARNING. 
[Se o arquivo não existe, tenta criá-lo.
Esta opção é suportada no PHP 4.3.2 e posteriores, e somente funciona em arquivos locais].

b: Lê de forma binária. [fortemente recomendado].

Dá pra aliar os comandos, como esperado. Na documentação, se recomenda fortemente usar o parâmetro b, para forçar 
uma leitura binária do arquivo, uma vez que cada sistema operacional tem um encerramento de string diferente. Lendo
de forma binária não há esse problema.


O esperando ao se fazer isso, é criar um arquivo dentro do diretório htdocs do servidor.


Métodos de arquivo:
$path = fopen('arquivo.extensão','modo'); - Path é a variável que vai guardar a referencia para o arquivo aberto.
É criada quando o arquivo é aberto, e podemos usar o valor na referencia para usar nas outras funcoes. O modo definido
na função é importante pois diz a funcao de leitura e de escrita como ela deve trabalhar.
PRA LER UM ARQUIVO ABRIMOS USANDO r, PRA ESCREVER USAMOS a.

fwrite($path, $texto)- Escreve em um arquivo (ao usar se certificar de que o arquivo foi aberto em modo de escrita);

fgets($path); - Lê cada caractere de uma linha até encontrar uma quebra de linha. Pode levar um segundo parametro
relacionado a quantidade de bits a serem lidos de cada linha( fgets($path, 2024).(se certificar de que ao usar essa função
o arquivo foi aberto em modo de leitura).

fclose($path) - Fecha um arquivo - É MUITO IMPORTANTE FECHAR UM ARQUIVO DEPOIS DE MANIPULA-LO!;

file_exists($path) - Checa se o arquivo existe;

feof($path) - Função end of file: Identifica o fim de um arquivo, útil para ler um arquivo usando while, itera sobre o
arquivo enquando existirem linhas. Retorna false caso ainda existam linhas e true caso tenha encontrado o final do
arquivo, então a função deve ser negada.

while(!feof($path)){

}

Atributos de arquivo:

PHP_EOL - PHP End of Line, coloca uma quebra de linha no local onde for inserida. O tipo de quebra de linha muda
conforme o sistema operacional no qual o servidor php está rodando. Útil para concatenar no fim de textos.

Observações:

Podemos usar qualquer extensão para gravar;
Para subir um nível hierarquico na estrutura de pastas usamos o: ../ - pode encadear
				_____________________________[Funções úteis]________________________________________

				- isset($arr[$index]) : Retorna true se o array naquele indice está setado;
				- header('Location: url.php') ou header('Locaton: url.php?param=nomeParam') Redireciona
				o fluxo para uma X página, com ou sem parâmetros(que podem ser resgatados por get a partir
				do nome dos parametros). Para passar mais de um parâmetro colocando no fim de cada um os simbolos
				&&, assim: header('Locaton: url.php?param=nomeParam&&param2=nomeParam2')
				- file_exists($caminhoArquivo)
				- unset(index)

							__________________[FATOS UTEIS]__________________

			 1 	O interpretador do php tem a inteligência de entender um mesmo comando
				iniciado em uma abertura e fechamento de tag php pode ser encerrada em outra
				abertura e fechamento de tag. Por exemplo:

				 <?php
                	if(isset($_GET['login']) && $_GET['login'] === 'error'){
                ?>
                  <div class="text-danger"> Usuário ou senha inválidos</div>
                <?
                  }
                ?>

                O php lê o conteudo da primeira tag, e entende que o fechamento ainda não foi posto
                e o encontra. A div ali só é adicionada caso a condição seja atendida. Isso é muito útil
                porque o php não entende css tampouco compreende as classes do bootstrap. Isso acontece porque:

                Quando o PHP interpreta um arquivo, ele simplesmente repassa o texto do arquivo até encontrar 
                uma das tags especiais que lhe diz para começar a interpretar o texto como código PHP. 
                O interpretador então executa todo o código que encontra, até chegar em uma tag de fechamento PHP,
                 que novamente o coloca simplesmente repassando texto novamente. Este é o mecanismo que permite a 
                 inclusão de código PHP dentro do HTML: qualquer coisa fora das tags PHP é deixado como encontrado,
                  enquanto tudo dentro é interpretado e executado.

             2 Eu posso usar o post para transitar informações entre o front e o back end via requisição, mas
             usar o get para resgatar possiveis parametros passados via url provenientes de um possivel tratamento
             com o header('Location: url.php?param=nomeParam')

             3 Sempre que for checar um valor nas super globais (com if, no caso) $_SESSION, $_GET, $_POST usar a função
             isset para checar se o array naquele index está setado.

             4 -  Fazendo uma página de erro e explicação sobre requisições: 
             https://pt.stackoverflow.com/questions/20733/como-criar-uma-tela-de-erro-404

             5 SEEMMPREEEEEEEEEEEEEEE QUE MEXER COM A VARIÁVEL SESSION EM QUALQUER LUGAR TEM QUE ANTES INICIAR A SESSÃO
             PRA QUE A SUPER GLOBAL EXISTA NAQUELE CONTEXTO, SE NÃO FIZER ISSO, DÁ ERRO! DÁ COMO SE ELA NÃO EXISTISSE!
             session_start(). É necessário executar a session_start pra ter acesso a super global session.


             6 SOBRE SEGURANÇA DO BACK END:

             Guardamos arquivos, até então, no diretorio htdocs que é um diretório publico, portanto qualquer requisição
             feita ao servidor(no caso usando nosso ip e caminho para os arquivos) rende ao cliente, uma resposta. A questão
             é, quando por exemplo fazemos login, o fluxo é redirecionado para uma tratativa que pode ser uma manipulação no
             banco de dados, dados de usuário ou até mesmo a manipulação de um arquivo. Todos esses arquivos são processados
             e enviados traduzidos para o cliente, mas uma pessoa má intencionada com mais habilidade pode usar tecnicas para
             encontrar os arquivos originais, já que é um diretório público.
             O que fazer?

             Continuar usando o diretório htdocs para que qualquer um ainda consiga fazer requisições, mas, é recomendado que
             os arquivos sensíveis, que envolvem manipulação de dados sigilosos, banco de dados etc sejam incluidos fora desta
             pasta, e chamados nos arquivos presentes no diretório htdocs via include. 
             Assim, uma má intencionada não tem acesso aos arquivos, já que este em si não é público.

             Exemplo de páginas que devem ficar no htdocs:

             index
             home
             etc.

             Exemplos de páginas que devem ficar fora do htdocs:

             validadores de login (consulta a um arquivo ou a um banco de dados para procurar usuários compativeis com os dados 
             passados por post) .
             No caso de validar um login, o index deve nos redirecionar para um script que nos redirecione a partir de um include
             para outro script que deve estar fora do htdocs que  contenha a logica para validar ou não o login e nos conceder 
             acesso ao sistema. Assim, caso alguem mal intencionado chegue ao arquivo pela requisição, ele vai ver somente o
             arquivo que faz o include, não o que está dentro do include, já que este ultimo está protegido pelo SO por não estar
             em um diretório público.

             quaisquer arquivos que mexam com dados sigilosos.

             No caso de manipulação de arquivos, colocamos os arquivos fora do htdocs, também, e fazemos referencia ao arquivo
             usando o caminho para onde ele está(fora do htdocs). Os arquivos no htdocs podem chamar arquivos de fora, mas o cliente
             so pode chamar arquivos do diretório público.


             UM ARQUIVO QUALQUER DENTRO DE UM DIRETÓRIO QUE NÃO É O HTDOCS, OU SEJA, NÃO É PÚBLICO, NÃO PODE SER CHAMADO DIRETAMENTE
             PELO CLIENTE, SOMENTE SOLICITADO POR OUTROS ARQUIVOS DO DIRETÓRIO PÚBLICO. É ISSO QUE TORNA A APLICAÇÃO SEGURA.
             SÓ A PROPRIA APLICAÇÃO PODE LER E ESCREVER EM ARQUIVOS FORA DO DIRETÓRIO PUBLICO.

             TODA REGRA DE NEGÓCIO SIGILOSA DEVE OBRIGATORIAMENTE ESTAR FORA DO DIRETÓRIO PUBLICO.